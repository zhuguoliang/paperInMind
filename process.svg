<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: G Pages: 1 -->
<svg width="78505pt" height="1074pt"
 viewBox="0.00 0.00 78505.46 1074.07" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1070.0672)">
<title>G</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-1070.0672 78501.4597,-1070.0672 78501.4597,4 -4,4"/>
<!-- USENIX -->
<g id="node1" class="node">
<title>USENIX</title>
<ellipse fill="none" stroke="#000000" cx="37440.022" cy="-1048.0672" rx="42.5629" ry="18"/>
<text text-anchor="middle" x="37440.022" y="-1043.8672" font-family="Times,serif" font-size="14.00" fill="#000000">USENIX</text>
</g>
<!-- 0 -->
<g id="node2" class="node">
<title>0</title>
<ellipse fill="none" stroke="#000000" cx="762.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="762.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">0</text>
</g>
<!-- USENIX&#45;&gt;0 -->
<g id="edge1" class="edge">
<title>USENIX&#45;&gt;0</title>
<path fill="none" stroke="#000000" d="M37397.176,-1048.0319C36105.0701,-1046.9614 5993.034,-1021.7503 2157.022,-994.0672 1617.7982,-990.1759 961.3985,-979.4391 799.456,-976.7065"/>
<polygon fill="#000000" stroke="#000000" points="799.1415,-973.2008 789.0837,-976.531 799.023,-980.1998 799.1415,-973.2008"/>
</g>
<!-- 1 -->
<g id="node6" class="node">
<title>1</title>
<ellipse fill="none" stroke="#000000" cx="2193.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="2193.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">1</text>
</g>
<!-- USENIX&#45;&gt;1 -->
<g id="edge5" class="edge">
<title>USENIX&#45;&gt;1</title>
<path fill="none" stroke="#000000" d="M37397.0665,-1048.0576C36070.9788,-1047.7547 4471.6883,-1040.0573 2576.022,-994.0672 2449.0552,-990.987 2298.6041,-982.5 2230.1973,-978.3763"/>
<polygon fill="#000000" stroke="#000000" points="2230.1328,-974.866 2219.939,-977.7534 2229.7085,-981.8531 2230.1328,-974.866"/>
</g>
<!-- 2 -->
<g id="node10" class="node">
<title>2</title>
<ellipse fill="none" stroke="#000000" cx="2612.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="2612.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">2</text>
</g>
<!-- USENIX&#45;&gt;2 -->
<g id="edge9" class="edge">
<title>USENIX&#45;&gt;2</title>
<path fill="none" stroke="#000000" d="M37397.2274,-1048.0437C36083.9609,-1047.3145 4970.9562,-1029.6756 3104.022,-994.0672 2934.1424,-990.8271 2731.429,-981.7655 2649.3053,-977.877"/>
<polygon fill="#000000" stroke="#000000" points="2649.3694,-974.3762 2639.2142,-977.3965 2649.0363,-981.3683 2649.3694,-974.3762"/>
</g>
<!-- 3 -->
<g id="node13" class="node">
<title>3</title>
<ellipse fill="none" stroke="#000000" cx="4878.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="4878.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">3</text>
</g>
<!-- USENIX&#45;&gt;3 -->
<g id="edge13" class="edge">
<title>USENIX&#45;&gt;3</title>
<path fill="none" stroke="#000000" d="M37397.3014,-1048.0354C36180.2419,-1047.1224 9339.9017,-1026.6466 5917.022,-994.0672 5525.3355,-990.3391 5050.6774,-979.9871 4915.5351,-976.9287"/>
<polygon fill="#000000" stroke="#000000" points="4915.3879,-973.4246 4905.311,-976.6966 4915.2289,-980.4228 4915.3879,-973.4246"/>
</g>
<!-- 4 -->
<g id="node17" class="node">
<title>4</title>
<ellipse fill="none" stroke="#000000" cx="5953.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="5953.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">4</text>
</g>
<!-- USENIX&#45;&gt;4 -->
<g id="edge17" class="edge">
<title>USENIX&#45;&gt;4</title>
<path fill="none" stroke="#000000" d="M37397.0781,-1048.0293C36200.2017,-1046.9672 10359.8333,-1023.7269 7063.022,-994.0672 6641.8077,-990.2778 6130.7658,-979.8392 5990.2819,-976.8666"/>
<polygon fill="#000000" stroke="#000000" points="5990.1369,-973.3629 5980.0648,-976.6498 5989.9883,-980.3613 5990.1369,-973.3629"/>
</g>
<!-- 5 -->
<g id="node21" class="node">
<title>5</title>
<ellipse fill="none" stroke="#000000" cx="7099.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="7099.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">5</text>
</g>
<!-- USENIX&#45;&gt;5 -->
<g id="edge21" class="edge">
<title>USENIX&#45;&gt;5</title>
<path fill="none" stroke="#000000" d="M37397.4439,-1048.0251C36229.7847,-1046.8639 11411.4779,-1021.8922 8244.022,-994.0672 7808.5601,-990.2419 7280.0199,-979.7847 7136.4933,-976.8451"/>
<polygon fill="#000000" stroke="#000000" points="7136.138,-973.3372 7126.0682,-976.631 7135.9941,-980.3357 7136.138,-973.3372"/>
</g>
<!-- 6 -->
<g id="node25" class="node">
<title>6</title>
<ellipse fill="none" stroke="#000000" cx="8280.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="8280.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">6</text>
</g>
<!-- USENIX&#45;&gt;6 -->
<g id="edge25" class="edge">
<title>USENIX&#45;&gt;6</title>
<path fill="none" stroke="#000000" d="M37397.4197,-1048.0228C36253.5735,-1046.8248 12434.2953,-1021.5861 9393.022,-994.0672 8970.6698,-990.2456 8458.2463,-979.8298 8317.3826,-976.8646"/>
<polygon fill="#000000" stroke="#000000" points="8317.2096,-973.3602 8307.1379,-976.6482 8317.0618,-980.3587 8317.2096,-973.3602"/>
</g>
<!-- 7 -->
<g id="node29" class="node">
<title>7</title>
<ellipse fill="none" stroke="#000000" cx="9429.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="9429.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">7</text>
</g>
<!-- USENIX&#45;&gt;7 -->
<g id="edge29" class="edge">
<title>USENIX&#45;&gt;7</title>
<path fill="none" stroke="#000000" d="M37397.0957,-1048.0183C36274.0046,-1046.7339 13464.9054,-1020.3653 10551.022,-994.0672 10125.2554,-990.2247 9608.6877,-979.8236 9466.6848,-976.8632"/>
<polygon fill="#000000" stroke="#000000" points="9466.4283,-973.3572 9456.3572,-976.6472 9466.2818,-980.3557 9466.4283,-973.3572"/>
</g>
<!-- 8 -->
<g id="node33" class="node">
<title>8</title>
<ellipse fill="none" stroke="#000000" cx="10587.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="10587.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">8</text>
</g>
<!-- USENIX&#45;&gt;8 -->
<g id="edge33" class="edge">
<title>USENIX&#45;&gt;8</title>
<path fill="none" stroke="#000000" d="M37397.3667,-1048.0627C36374.9478,-1047.9413 17264.6205,-1044.9973 11698.022,-994.0672 11276.429,-990.21 10764.9261,-979.8193 10624.3155,-976.8623"/>
<polygon fill="#000000" stroke="#000000" points="10624.1609,-973.3583 10614.0892,-976.6466 10624.0131,-980.3568 10624.1609,-973.3583"/>
</g>
<!-- 9 -->
<g id="node37" class="node">
<title>9</title>
<ellipse fill="none" stroke="#000000" cx="11734.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="11734.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">9</text>
</g>
<!-- USENIX&#45;&gt;9 -->
<g id="edge37" class="edge">
<title>USENIX&#45;&gt;9</title>
<path fill="none" stroke="#000000" d="M37397.4297,-1048.0568C36400.0141,-1047.8009 18169.6604,-1042.4767 12857.022,-994.0672 12430.8763,-990.1841 11913.848,-979.8118 11771.7184,-976.8606"/>
<polygon fill="#000000" stroke="#000000" points="11771.4524,-973.3544 11761.3816,-976.6453 11771.3065,-980.3529 11771.4524,-973.3544"/>
</g>
<!-- 10 -->
<g id="node41" class="node">
<title>10</title>
<ellipse fill="none" stroke="#000000" cx="12893.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="12893.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">10</text>
</g>
<!-- USENIX&#45;&gt;10 -->
<g id="edge41" class="edge">
<title>USENIX&#45;&gt;10</title>
<path fill="none" stroke="#000000" d="M37397.2626,-1048.0515C36422.8894,-1047.6797 19074.375,-1040.4345 14016.022,-994.0672 13589.8766,-990.161 13072.848,-979.805 12930.7184,-976.8591"/>
<polygon fill="#000000" stroke="#000000" points="12930.4523,-973.3529 12920.3816,-976.6442 12930.3067,-980.3514 12930.4523,-973.3529"/>
</g>
<!-- 11 -->
<g id="node45" class="node">
<title>11</title>
<ellipse fill="none" stroke="#000000" cx="3140.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="3140.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">11</text>
</g>
<!-- USENIX&#45;&gt;11 -->
<g id="edge45" class="edge">
<title>USENIX&#45;&gt;11</title>
<path fill="none" stroke="#000000" d="M37397.0606,-1048.0335C36094.1729,-1047.0056 5579.5938,-1022.6415 3748.022,-994.0672 3531.7178,-990.6927 3272.2643,-981.1927 3177.2279,-977.5315"/>
<polygon fill="#000000" stroke="#000000" points="3177.1124,-974.0245 3166.9844,-977.1349 3176.8415,-981.0192 3177.1124,-974.0245"/>
</g>
<!-- 12 -->
<g id="node48" class="node">
<title>12</title>
<ellipse fill="none" stroke="#000000" cx="14052.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="14052.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">12</text>
</g>
<!-- USENIX&#45;&gt;12 -->
<g id="edge49" class="edge">
<title>USENIX&#45;&gt;12</title>
<path fill="none" stroke="#000000" d="M37397.2654,-1048.0452C36448.5447,-1047.5445 19982.605,-1038.2519 15179.022,-994.0672 14750.8824,-990.1291 14231.3317,-979.7739 14089.3771,-976.8476"/>
<polygon fill="#000000" stroke="#000000" points="14089.1298,-973.3418 14079.0595,-976.6342 14088.985,-980.3403 14089.1298,-973.3418"/>
</g>
<!-- 13 -->
<g id="node52" class="node">
<title>13</title>
<ellipse fill="none" stroke="#000000" cx="15215.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="15215.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">13</text>
</g>
<!-- USENIX&#45;&gt;13 -->
<g id="edge53" class="edge">
<title>USENIX&#45;&gt;13</title>
<path fill="none" stroke="#000000" d="M37397.1626,-1048.0355C36474.4923,-1047.3402 20918.1042,-1035.0585 16377.022,-994.0672 15934.1624,-990.0697 15396.4381,-979.6936 15252.1306,-976.8166"/>
<polygon fill="#000000" stroke="#000000" points="15252.1115,-973.3156 15242.0435,-976.6149 15251.9715,-980.3142 15252.1115,-973.3156"/>
</g>
<!-- 14 -->
<g id="node56" class="node">
<title>14</title>
<ellipse fill="none" stroke="#000000" cx="16413.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="16413.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">14</text>
</g>
<!-- USENIX&#45;&gt;14 -->
<g id="edge57" class="edge">
<title>USENIX&#45;&gt;14</title>
<path fill="none" stroke="#000000" d="M37397.2518,-1048.0287C36503.1962,-1047.211 21847.769,-1033.2669 17567.022,-994.0672 17127.6998,-990.0443 16594.3756,-979.7081 16450.3543,-976.8244"/>
<polygon fill="#000000" stroke="#000000" points="16450.3492,-973.3236 16440.2809,-976.6221 16450.2086,-980.3222 16450.3492,-973.3236"/>
</g>
<!-- 15 -->
<g id="node60" class="node">
<title>15</title>
<ellipse fill="none" stroke="#000000" cx="17603.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="17603.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">15</text>
</g>
<!-- USENIX&#45;&gt;15 -->
<g id="edge61" class="edge">
<title>USENIX&#45;&gt;15</title>
<path fill="none" stroke="#000000" d="M37397.1782,-1048.0223C36530.3755,-1047.1013 22758.5396,-1031.9373 18733.022,-994.0672 18303.7439,-990.0288 17782.8093,-979.7448 17640.4766,-976.8412"/>
<polygon fill="#000000" stroke="#000000" points="17640.2011,-973.3349 17630.1316,-976.6296 17640.0578,-980.3335 17640.2011,-973.3349"/>
</g>
<!-- 16 -->
<g id="node64" class="node">
<title>16</title>
<ellipse fill="none" stroke="#000000" cx="18769.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="18769.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">16</text>
</g>
<!-- USENIX&#45;&gt;16 -->
<g id="edge65" class="edge">
<title>USENIX&#45;&gt;16</title>
<path fill="none" stroke="#000000" d="M37397.1737,-1048.0359C36554.052,-1047.4049 23509.3037,-1036.9908 19694.022,-994.0672 19349.125,-990.187 18931.9824,-980.151 18806.4816,-977.0168"/>
<polygon fill="#000000" stroke="#000000" points="18806.345,-973.5124 18796.2604,-976.7607 18806.1696,-980.5102 18806.345,-973.5124"/>
</g>
<!-- 17 -->
<g id="node68" class="node">
<title>17</title>
<ellipse fill="none" stroke="#000000" cx="19730.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="19730.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">17</text>
</g>
<!-- USENIX&#45;&gt;17 -->
<g id="edge69" class="edge">
<title>USENIX&#45;&gt;17</title>
<path fill="none" stroke="#000000" d="M37397.2411,-1048.005C36584.1889,-1046.8103 24414.3532,-1028.439 20852.022,-994.0672 20426.2579,-989.9592 19909.6884,-979.746 19767.6849,-976.8462"/>
<polygon fill="#000000" stroke="#000000" points="19767.427,-973.3403 19757.3574,-976.6347 19767.2836,-980.3388 19767.427,-973.3403"/>
</g>
<!-- 18 -->
<g id="node72" class="node">
<title>18</title>
<ellipse fill="none" stroke="#000000" cx="20888.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="20888.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">18</text>
</g>
<!-- USENIX&#45;&gt;18 -->
<g id="edge73" class="edge">
<title>USENIX&#45;&gt;18</title>
<path fill="none" stroke="#000000" d="M37397.3445,-1047.992C36615.9911,-1046.6043 25328.9109,-1026.1022 22022.022,-994.0672 21591.2258,-989.894 21068.4462,-979.7056 20925.6092,-976.8327"/>
<polygon fill="#000000" stroke="#000000" points="20925.2962,-973.3257 20915.2276,-976.6233 20925.1549,-980.3243 20925.2962,-973.3257"/>
</g>
<!-- 19 -->
<g id="node76" class="node">
<title>19</title>
<ellipse fill="none" stroke="#000000" cx="22058.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="22058.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">19</text>
</g>
<!-- USENIX&#45;&gt;19 -->
<g id="edge77" class="edge">
<title>USENIX&#45;&gt;19</title>
<path fill="none" stroke="#000000" d="M37397.2075,-1047.9784C36646.4903,-1046.4096 26237.8253,-1024.2274 23185.022,-994.0672 22756.8852,-989.8375 22237.3325,-979.6891 22095.3772,-976.8291"/>
<polygon fill="#000000" stroke="#000000" points="22095.1284,-973.3234 22085.0597,-976.6206 22094.9869,-980.322 22095.1284,-973.3234"/>
</g>
<!-- 20 -->
<g id="node80" class="node">
<title>20</title>
<ellipse fill="none" stroke="#000000" cx="23221.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="23221.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">20</text>
</g>
<!-- USENIX&#45;&gt;20 -->
<g id="edge81" class="edge">
<title>USENIX&#45;&gt;20</title>
<path fill="none" stroke="#000000" d="M37397.4628,-1047.9635C36681.6077,-1046.2087 27139.6349,-1022.4131 24338.022,-994.0672 23914.1567,-989.7787 23399.8882,-979.6932 23258.5172,-976.8346"/>
<polygon fill="#000000" stroke="#000000" points="23258.3045,-973.3297 23248.2356,-976.6261 23258.1626,-980.3282 23258.3045,-973.3297"/>
</g>
<!-- 21 -->
<g id="node84" class="node">
<title>21</title>
<ellipse fill="none" stroke="#000000" cx="24374.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="24374.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">21</text>
</g>
<!-- USENIX&#45;&gt;21 -->
<g id="edge85" class="edge">
<title>USENIX&#45;&gt;21</title>
<path fill="none" stroke="#000000" d="M37397.1976,-1048.0584C36822.2351,-1047.9024 30570.9901,-1045.0429 25523.022,-994.0672 25085.6067,-989.6501 24554.5908,-979.595 24411.1928,-976.8"/>
<polygon fill="#000000" stroke="#000000" points="24411.2294,-973.3002 24401.1629,-976.604 24411.0926,-980.2988 24411.2294,-973.3002"/>
</g>
<!-- 22 -->
<g id="node88" class="node">
<title>22</title>
<ellipse fill="none" stroke="#000000" cx="25559.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="25559.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">22</text>
</g>
<!-- USENIX&#45;&gt;22 -->
<g id="edge89" class="edge">
<title>USENIX&#45;&gt;22</title>
<path fill="none" stroke="#000000" d="M37397.2532,-1048.0365C36853.1417,-1047.6081 31224.4735,-1042.0809 26677.022,-994.0672 26252.7792,-989.5879 25738.049,-979.6374 25596.5509,-976.8224"/>
<polygon fill="#000000" stroke="#000000" points="25596.3279,-973.3173 25586.2601,-976.6171 25596.1883,-980.3159 25596.3279,-973.3173"/>
</g>
<!-- 23 -->
<g id="node92" class="node">
<title>23</title>
<ellipse fill="none" stroke="#000000" cx="26713.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="26713.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">23</text>
</g>
<!-- USENIX&#45;&gt;23 -->
<g id="edge93" class="edge">
<title>USENIX&#45;&gt;23</title>
<path fill="none" stroke="#000000" d="M37397.2143,-1048.0006C36885.0462,-1047.1682 31877.8092,-1038.0528 27830.022,-994.0672 27406.16,-989.4613 26891.8892,-979.6003 26750.5174,-976.8142"/>
<polygon fill="#000000" stroke="#000000" points="26750.303,-973.3094 26740.2358,-976.6111 26750.1647,-980.308 26750.303,-973.3094"/>
</g>
<!-- 24 -->
<g id="node96" class="node">
<title>24</title>
<ellipse fill="none" stroke="#000000" cx="27866.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="27866.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">24</text>
</g>
<!-- USENIX&#45;&gt;24 -->
<g id="edge97" class="edge">
<title>USENIX&#45;&gt;24</title>
<path fill="none" stroke="#000000" d="M37397.3046,-1047.9559C36919.6753,-1046.6777 32530.572,-1034.0827 28980.022,-994.0672 28557.3,-989.3031 28044.4093,-979.554 27903.4168,-976.8041"/>
<polygon fill="#000000" stroke="#000000" points="27903.2293,-973.2998 27893.1628,-976.6036 27903.0924,-980.2985 27903.2293,-973.2998"/>
</g>
<!-- 25 -->
<g id="node100" class="node">
<title>25</title>
<ellipse fill="none" stroke="#000000" cx="29016.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="29016.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">25</text>
</g>
<!-- USENIX&#45;&gt;25 -->
<g id="edge101" class="edge">
<title>USENIX&#45;&gt;25</title>
<path fill="none" stroke="#000000" d="M37397.2363,-1047.8904C36956.3216,-1046.0394 33194.1444,-1029.5637 30148.022,-994.0672 29717.9944,-989.0561 29196.1306,-979.4621 29053.5435,-976.7796"/>
<polygon fill="#000000" stroke="#000000" points="29053.2442,-973.2734 29043.18,-976.5842 29053.1122,-980.2722 29053.2442,-973.2734"/>
</g>
<!-- 26 -->
<g id="node104" class="node">
<title>26</title>
<ellipse fill="none" stroke="#000000" cx="30184.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="30184.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">26</text>
</g>
<!-- USENIX&#45;&gt;26 -->
<g id="edge105" class="edge">
<title>USENIX&#45;&gt;26</title>
<path fill="none" stroke="#000000" d="M37397.4066,-1047.8102C36997.0595,-1045.371 33854.3554,-1025.6962 31307.022,-994.0672 30880.8915,-988.7762 30363.8524,-979.3999 30221.7193,-976.7703"/>
<polygon fill="#000000" stroke="#000000" points="30221.4455,-973.2647 30211.3823,-976.5787 30221.3157,-980.2635 30221.4455,-973.2647"/>
</g>
<!-- 27 -->
<g id="node108" class="node">
<title>27</title>
<ellipse fill="none" stroke="#000000" cx="31343.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="31343.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">27</text>
</g>
<!-- USENIX&#45;&gt;27 -->
<g id="edge109" class="edge">
<title>USENIX&#45;&gt;27</title>
<path fill="none" stroke="#000000" d="M37397.3169,-1047.6805C37041.2133,-1044.4389 34527.6026,-1021.2443 32487.022,-994.0672 32051.9621,-988.273 31523.8681,-979.2162 31380.4619,-976.722"/>
<polygon fill="#000000" stroke="#000000" points="31380.105,-973.2154 31370.0456,-976.5407 31379.9831,-980.2143 31380.105,-973.2154"/>
</g>
<!-- 28 -->
<g id="node112" class="node">
<title>28</title>
<ellipse fill="none" stroke="#000000" cx="32523.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="32523.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">28</text>
</g>
<!-- USENIX&#45;&gt;28 -->
<g id="edge113" class="edge">
<title>USENIX&#45;&gt;28</title>
<path fill="none" stroke="#000000" d="M37397.0459,-1047.4607C37091.9548,-1043.1515 35221.8224,-1016.69 33700.022,-994.0672 33251.4782,-987.3993 32706.7892,-978.9323 32560.6117,-976.6538"/>
<polygon fill="#000000" stroke="#000000" points="32560.4472,-973.1509 32550.3938,-976.4945 32560.338,-980.15 32560.4472,-973.1509"/>
</g>
<!-- 29 -->
<g id="node116" class="node">
<title>29</title>
<ellipse fill="none" stroke="#000000" cx="33736.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="33736.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">29</text>
</g>
<!-- USENIX&#45;&gt;29 -->
<g id="edge117" class="edge">
<title>USENIX&#45;&gt;29</title>
<path fill="none" stroke="#000000" d="M37397.4654,-1047.24C37012.378,-1039.7545 34135.4256,-983.831 33773.4135,-976.7941"/>
<polygon fill="#000000" stroke="#000000" points="33773.2753,-973.2908 33763.2092,-976.5957 33773.1392,-980.2895 33773.2753,-973.2908"/>
</g>
<!-- 30 -->
<g id="node120" class="node">
<title>30</title>
<ellipse fill="none" stroke="#000000" cx="34927.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="34927.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">30</text>
</g>
<!-- USENIX&#45;&gt;30 -->
<g id="edge121" class="edge">
<title>USENIX&#45;&gt;30</title>
<path fill="none" stroke="#000000" d="M37397.4586,-1046.8478C37093.0741,-1038.1268 35250.9161,-985.3471 34964.4512,-977.1396"/>
<polygon fill="#000000" stroke="#000000" points="34964.275,-973.6332 34954.1788,-976.8453 34964.0745,-980.6304 34964.275,-973.6332"/>
</g>
<!-- 31 -->
<g id="node124" class="node">
<title>31</title>
<ellipse fill="none" stroke="#000000" cx="3784.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="3784.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">31</text>
</g>
<!-- USENIX&#45;&gt;31 -->
<g id="edge125" class="edge">
<title>USENIX&#45;&gt;31</title>
<path fill="none" stroke="#000000" d="M37397.4304,-1048.0332C36074.8813,-1046.9721 4390.8297,-1021.2707 3936.022,-994.0672 3896.5145,-991.7042 3851.5278,-985.998 3820.8101,-981.6386"/>
<polygon fill="#000000" stroke="#000000" points="3820.9699,-978.1255 3810.5723,-980.1605 3819.9695,-985.0536 3820.9699,-978.1255"/>
</g>
<!-- 32 -->
<g id="node127" class="node">
<title>32</title>
<ellipse fill="none" stroke="#000000" cx="35719.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="35719.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">32</text>
</g>
<!-- USENIX&#45;&gt;32 -->
<g id="edge129" class="edge">
<title>USENIX&#45;&gt;32</title>
<path fill="none" stroke="#000000" d="M37397.4802,-1046.2875C37158.1204,-1036.2736 35981.9619,-987.0676 35756.4481,-977.633"/>
<polygon fill="#000000" stroke="#000000" points="35756.2791,-974.123 35746.1415,-977.2018 35755.9864,-981.1168 35756.2791,-974.123"/>
</g>
<!-- 33 -->
<g id="node130" class="node">
<title>33</title>
<ellipse fill="none" stroke="#000000" cx="3972.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="3972.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">33</text>
</g>
<!-- USENIX&#45;&gt;33 -->
<g id="edge133" class="edge">
<title>USENIX&#45;&gt;33</title>
<path fill="none" stroke="#000000" d="M37397.2481,-1048.0468C36158.0826,-1047.449 8382.8945,-1033.6262 4842.022,-994.0672 4519.4165,-990.4631 4129.6236,-980.3461 4009.2353,-977.0904"/>
<polygon fill="#000000" stroke="#000000" points="4009.1717,-973.5875 3999.0804,-976.8147 4008.9817,-980.5849 4009.1717,-973.5875"/>
</g>
<!-- 34 -->
<g id="node131" class="node">
<title>34</title>
<ellipse fill="none" stroke="#000000" cx="36887.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="36887.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">34</text>
</g>
<!-- USENIX&#45;&gt;34 -->
<g id="edge137" class="edge">
<title>USENIX&#45;&gt;34</title>
<path fill="none" stroke="#000000" d="M37399.3586,-1042.7729C37295.7537,-1029.2837 37023.059,-993.7791 36923.8131,-980.8574"/>
<polygon fill="#000000" stroke="#000000" points="36924.04,-977.3575 36913.6717,-979.537 36923.1361,-984.2989 36924.04,-977.3575"/>
</g>
<!-- 35 -->
<g id="node135" class="node">
<title>35</title>
<ellipse fill="none" stroke="#000000" cx="37623.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="37623.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">35</text>
</g>
<!-- USENIX&#45;&gt;35 -->
<g id="edge141" class="edge">
<title>USENIX&#45;&gt;35</title>
<path fill="none" stroke="#000000" d="M37471.4808,-1035.69C37504.5927,-1022.6624 37556.4861,-1002.2453 37590.1285,-989.0089"/>
<polygon fill="#000000" stroke="#000000" points="37591.498,-992.2314 37599.5222,-985.3131 37588.935,-985.7174 37591.498,-992.2314"/>
</g>
<!-- 36 -->
<g id="node139" class="node">
<title>36</title>
<ellipse fill="none" stroke="#000000" cx="38754.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="38754.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">36</text>
</g>
<!-- USENIX&#45;&gt;36 -->
<g id="edge145" class="edge">
<title>USENIX&#45;&gt;36</title>
<path fill="none" stroke="#000000" d="M37482.2529,-1045.7532C37681.7661,-1034.821 38528.0732,-988.448 38716.6652,-978.1142"/>
<polygon fill="#000000" stroke="#000000" points="38717.1018,-981.5956 38726.8953,-977.5536 38716.7188,-974.6061 38717.1018,-981.5956"/>
</g>
<!-- 37 -->
<g id="node143" class="node">
<title>37</title>
<ellipse fill="none" stroke="#000000" cx="39942.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="39942.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">37</text>
</g>
<!-- USENIX&#45;&gt;37 -->
<g id="edge149" class="edge">
<title>USENIX&#45;&gt;37</title>
<path fill="none" stroke="#000000" d="M37482.6604,-1046.8402C37786.5107,-1038.0963 39619.7099,-985.3424 39904.7759,-977.1391"/>
<polygon fill="#000000" stroke="#000000" points="39905.1029,-980.6312 39914.998,-976.8449 39904.9014,-973.6341 39905.1029,-980.6312"/>
</g>
<!-- 38 -->
<g id="node147" class="node">
<title>38</title>
<ellipse fill="none" stroke="#000000" cx="41089.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="41089.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">38</text>
</g>
<!-- USENIX&#45;&gt;38 -->
<g id="edge153" class="edge">
<title>USENIX&#45;&gt;38</title>
<path fill="none" stroke="#000000" d="M37482.5822,-1047.2275C37864.2854,-1039.6959 40693.0253,-983.8808 41051.6698,-976.8043"/>
<polygon fill="#000000" stroke="#000000" points="41051.8569,-980.3013 41061.7859,-976.6047 41051.7187,-973.3027 41051.8569,-980.3013"/>
</g>
<!-- 39 -->
<g id="node151" class="node">
<title>39</title>
<ellipse fill="none" stroke="#000000" cx="42236.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="42236.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">39</text>
</g>
<!-- USENIX&#45;&gt;39 -->
<g id="edge157" class="edge">
<title>USENIX&#45;&gt;39</title>
<path fill="none" stroke="#000000" d="M37482.8485,-1047.4648C37784.9373,-1043.2099 39626.4088,-1017.1876 41125.022,-994.0672 41546.5825,-987.5635 42058.1084,-979.0452 42198.7264,-976.6924"/>
<polygon fill="#000000" stroke="#000000" points="42199.0132,-980.1882 42208.9532,-976.5212 42198.896,-973.1892 42199.0132,-980.1882"/>
</g>
<!-- 40 -->
<g id="node155" class="node">
<title>40</title>
<ellipse fill="none" stroke="#000000" cx="43427.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="43427.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">40</text>
</g>
<!-- USENIX&#45;&gt;40 -->
<g id="edge161" class="edge">
<title>USENIX&#45;&gt;40</title>
<path fill="none" stroke="#000000" d="M37482.7887,-1047.6613C37834.2534,-1044.3101 40283.3848,-1020.675 42272.022,-994.0672 42711.7039,-988.1843 43245.5052,-979.1743 43389.656,-976.7095"/>
<polygon fill="#000000" stroke="#000000" points="43389.7999,-980.2076 43399.7385,-976.5369 43389.68,-973.2086 43389.7999,-980.2076"/>
</g>
<!-- 41 -->
<g id="node159" class="node">
<title>41</title>
<ellipse fill="none" stroke="#000000" cx="44597.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="44597.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">41</text>
</g>
<!-- USENIX&#45;&gt;41 -->
<g id="edge165" class="edge">
<title>USENIX&#45;&gt;41</title>
<path fill="none" stroke="#000000" d="M37482.8023,-1047.7971C37879.8763,-1045.266 40963.334,-1025.1113 43463.022,-994.0672 43893.8051,-988.7173 44416.594,-979.3636 44559.4339,-976.7581"/>
<polygon fill="#000000" stroke="#000000" points="44559.8814,-980.2506 44569.8158,-976.5684 44559.7535,-973.2518 44559.8814,-980.2506"/>
</g>
<!-- 42 -->
<g id="node163" class="node">
<title>42</title>
<ellipse fill="none" stroke="#000000" cx="45759.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="45759.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">42</text>
</g>
<!-- USENIX&#45;&gt;42 -->
<g id="edge169" class="edge">
<title>USENIX&#45;&gt;42</title>
<path fill="none" stroke="#000000" d="M37482.5664,-1047.8868C37919.0833,-1046.0066 41629.0368,-1029.3531 44633.022,-994.0672 45060.7704,-989.0428 45579.8681,-979.4582 45721.6994,-976.7788"/>
<polygon fill="#000000" stroke="#000000" points="45722.076,-980.2723 45732.0079,-976.5836 45721.9434,-973.2736 45722.076,-980.2723"/>
</g>
<!-- 43 -->
<g id="node167" class="node">
<title>43</title>
<ellipse fill="none" stroke="#000000" cx="46920.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="46920.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">43</text>
</g>
<!-- USENIX&#45;&gt;43 -->
<g id="edge173" class="edge">
<title>USENIX&#45;&gt;43</title>
<path fill="none" stroke="#000000" d="M37482.5758,-1047.949C37956.1513,-1046.6004 42289.4423,-1033.4396 45795.022,-994.0672 46222.3931,-989.2673 46741.028,-979.5234 46882.7327,-976.793"/>
<polygon fill="#000000" stroke="#000000" points="46883.1015,-980.2866 46893.032,-976.5941 46882.9663,-973.2879 46883.1015,-980.2866"/>
</g>
<!-- 44 -->
<g id="node171" class="node">
<title>44</title>
<ellipse fill="none" stroke="#000000" cx="48073.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="48073.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">44</text>
</g>
<!-- USENIX&#45;&gt;44 -->
<g id="edge177" class="edge">
<title>USENIX&#45;&gt;44</title>
<path fill="none" stroke="#000000" d="M37482.8038,-1047.9974C37992.1237,-1047.13 42948.8606,-1037.7226 46956.022,-994.0672 47379.8838,-989.4496 47894.1547,-979.5969 48035.5266,-976.8135"/>
<polygon fill="#000000" stroke="#000000" points="48035.8792,-980.3073 48045.8082,-976.6105 48035.741,-973.3087 48035.8792,-980.3073"/>
</g>
<!-- 45 -->
<g id="node175" class="node">
<title>45</title>
<ellipse fill="none" stroke="#000000" cx="49231.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="49231.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">45</text>
</g>
<!-- USENIX&#45;&gt;45 -->
<g id="edge181" class="edge">
<title>USENIX&#45;&gt;45</title>
<path fill="none" stroke="#000000" d="M37482.8337,-1048.0329C38024.6421,-1047.5608 43602.4425,-1041.6196 48109.022,-994.0672 48534.7822,-989.5747 49051.3544,-979.6335 49193.3588,-976.8215"/>
<polygon fill="#000000" stroke="#000000" points="49193.7579,-980.3144 49203.6864,-976.6165 49193.6189,-973.3158 49193.7579,-980.3144"/>
</g>
<!-- 46 -->
<g id="node179" class="node">
<title>46</title>
<ellipse fill="none" stroke="#000000" cx="50356.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="50356.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">46</text>
</g>
<!-- USENIX&#45;&gt;46 -->
<g id="edge185" class="edge">
<title>USENIX&#45;&gt;46</title>
<path fill="none" stroke="#000000" d="M37482.7313,-1047.9439C38161.755,-1045.9732 46743.5037,-1020.6828 49267.022,-994.0672 49679.3418,-989.7185 50179.4043,-979.7174 50318.5394,-976.8492"/>
<polygon fill="#000000" stroke="#000000" points="50318.7454,-980.3458 50328.6709,-976.6398 50318.6006,-973.3473 50318.7454,-980.3458"/>
</g>
<!-- 47 -->
<g id="node183" class="node">
<title>47</title>
<ellipse fill="none" stroke="#000000" cx="51485.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="51485.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">47</text>
</g>
<!-- USENIX&#45;&gt;47 -->
<g id="edge189" class="edge">
<title>USENIX&#45;&gt;47</title>
<path fill="none" stroke="#000000" d="M37482.6343,-1047.9632C38194.5398,-1046.2142 47623.1915,-1022.6373 50392.022,-994.0672 50806.3192,-989.7923 51308.8775,-979.7183 51447.8685,-976.8448"/>
<polygon fill="#000000" stroke="#000000" points="51448.058,-980.3417 51457.9833,-976.6351 51447.9128,-973.3432 51448.058,-980.3417"/>
</g>
<!-- 48 -->
<g id="node187" class="node">
<title>48</title>
<ellipse fill="none" stroke="#000000" cx="52603.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="52603.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">48</text>
</g>
<!-- USENIX&#45;&gt;48 -->
<g id="edge193" class="edge">
<title>USENIX&#45;&gt;48</title>
<path fill="none" stroke="#000000" d="M37482.5961,-1047.9806C38226.4728,-1046.4552 48505.8742,-1024.9272 51521.022,-994.0672 51930.6935,-989.8743 52427.5402,-979.7636 52565.7805,-976.8595"/>
<polygon fill="#000000" stroke="#000000" points="52565.9227,-980.3574 52575.8468,-976.6474 52565.7752,-973.3589 52565.9227,-980.3574"/>
</g>
<!-- 49 -->
<g id="node191" class="node">
<title>49</title>
<ellipse fill="none" stroke="#000000" cx="54041.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="54041.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">49</text>
</g>
<!-- USENIX&#45;&gt;49 -->
<g id="edge197" class="edge">
<title>USENIX&#45;&gt;49</title>
<path fill="none" stroke="#000000" d="M37482.6796,-1047.9714C38257.9735,-1046.2214 49379.8852,-1020.778 52639.022,-994.0672 53180.9471,-989.6258 53840.6438,-979.2958 54003.3999,-976.6785"/>
<polygon fill="#000000" stroke="#000000" points="54003.882,-980.1713 54013.8243,-976.5105 54003.7692,-973.1722 54003.882,-980.1713"/>
</g>
<!-- 50 -->
<g id="node195" class="node">
<title>50</title>
<ellipse fill="none" stroke="#000000" cx="55483.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="55483.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">50</text>
</g>
<!-- USENIX&#45;&gt;50 -->
<g id="edge201" class="edge">
<title>USENIX&#45;&gt;50</title>
<path fill="none" stroke="#000000" d="M37482.6206,-1047.9863C38295.2962,-1046.4334 50503.6653,-1022.7393 54077.022,-994.0672 54620.4937,-989.7065 55282.0723,-979.3168 55445.2926,-976.6826"/>
<polygon fill="#000000" stroke="#000000" points="55445.8047,-980.1749 55455.7467,-976.5135 55445.6914,-973.1758 55445.8047,-980.1749"/>
</g>
<!-- 51 -->
<g id="node199" class="node">
<title>51</title>
<ellipse fill="none" stroke="#000000" cx="56650.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="56650.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">51</text>
</g>
<!-- USENIX&#45;&gt;51 -->
<g id="edge205" class="edge">
<title>USENIX&#45;&gt;51</title>
<path fill="none" stroke="#000000" d="M37482.7042,-1048.0175C38332.5509,-1047.0152 51630.6043,-1030.8152 55519.022,-994.0672 55948.6797,-990.0067 56470.0755,-979.7383 56612.5343,-976.8398"/>
<polygon fill="#000000" stroke="#000000" points="56612.9619,-980.3319 56622.8884,-976.6285 56612.8191,-973.3334 56612.9619,-980.3319"/>
</g>
<!-- 52 -->
<g id="node203" class="node">
<title>52</title>
<ellipse fill="none" stroke="#000000" cx="57816.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="57816.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">52</text>
</g>
<!-- USENIX&#45;&gt;52 -->
<g id="edge209" class="edge">
<title>USENIX&#45;&gt;52</title>
<path fill="none" stroke="#000000" d="M37482.7614,-1048.0264C38361.587,-1047.1741 52542.4293,-1032.8806 56686.022,-994.0672 57115.3003,-990.0462 57636.2347,-979.7498 57778.5674,-976.8423"/>
<polygon fill="#000000" stroke="#000000" points="57778.9863,-980.3346 57788.9124,-976.6304 57778.8428,-973.336 57778.9863,-980.3346"/>
</g>
<!-- 53 -->
<g id="node207" class="node">
<title>53</title>
<ellipse fill="none" stroke="#000000" cx="58958.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="58958.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">53</text>
</g>
<!-- USENIX&#45;&gt;53 -->
<g id="edge213" class="edge">
<title>USENIX&#45;&gt;53</title>
<path fill="none" stroke="#000000" d="M37482.5753,-1048.0364C38387.0899,-1047.3694 53452.97,-1035.6811 57852.022,-994.0672 58271.2491,-990.1015 58779.7831,-979.8093 58920.4267,-976.8649"/>
<polygon fill="#000000" stroke="#000000" points="58920.7375,-980.3592 58930.6618,-976.6499 58920.5905,-973.3607 58920.7375,-980.3592"/>
</g>
<!-- 54 -->
<g id="node211" class="node">
<title>54</title>
<ellipse fill="none" stroke="#000000" cx="60119.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="60119.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">54</text>
</g>
<!-- USENIX&#45;&gt;54 -->
<g id="edge217" class="edge">
<title>USENIX&#45;&gt;54</title>
<path fill="none" stroke="#000000" d="M37482.8178,-1048.0415C38416.0407,-1047.4674 54345.3388,-1037.078 58994.022,-994.0672 59421.4018,-990.113 59940.0305,-979.7692 60081.7332,-976.8465"/>
<polygon fill="#000000" stroke="#000000" points="60082.107,-980.3397 60092.0324,-976.6335 60081.9621,-973.3412 60082.107,-980.3397"/>
</g>
<!-- 55 -->
<g id="node215" class="node">
<title>55</title>
<ellipse fill="none" stroke="#000000" cx="61298.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="61298.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">55</text>
</g>
<!-- USENIX&#45;&gt;55 -->
<g id="edge221" class="edge">
<title>USENIX&#45;&gt;55</title>
<path fill="none" stroke="#000000" d="M37482.5621,-1048.0463C38439.0452,-1047.5649 55251.6187,-1038.5031 60155.022,-994.0672 60589.7224,-990.1279 61117.34,-979.7517 61260.6161,-976.838"/>
<polygon fill="#000000" stroke="#000000" points="61261.0965,-980.329 61271.023,-976.6257 61260.9537,-973.3305 61261.0965,-980.329"/>
</g>
<!-- 56 -->
<g id="node219" class="node">
<title>56</title>
<ellipse fill="none" stroke="#000000" cx="62492.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="62492.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">56</text>
</g>
<!-- USENIX&#45;&gt;56 -->
<g id="edge225" class="edge">
<title>USENIX&#45;&gt;56</title>
<path fill="none" stroke="#000000" d="M37482.8934,-1048.0507C38468.6701,-1047.659 56172.8656,-1040.0099 61334.022,-994.0672 61774.8676,-990.143 62310.04,-979.7364 62454.5603,-976.8305"/>
<polygon fill="#000000" stroke="#000000" points="62454.7413,-980.3276 62464.6686,-976.6266 62454.6001,-973.329 62454.7413,-980.3276"/>
</g>
<!-- 57 -->
<g id="node223" class="node">
<title>57</title>
<ellipse fill="none" stroke="#000000" cx="63667.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="63667.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">57</text>
</g>
<!-- USENIX&#45;&gt;57 -->
<g id="edge229" class="edge">
<title>USENIX&#45;&gt;57</title>
<path fill="none" stroke="#000000" d="M37482.726,-1048.0576C38492.0523,-1047.8179 57104.8807,-1042.7533 62528.022,-994.0672 62960.72,-990.1827 63485.803,-979.7895 63629.2692,-976.851"/>
<polygon fill="#000000" stroke="#000000" points="63629.7706,-980.3415 63639.6966,-976.6367 63629.6267,-973.343 63629.7706,-980.3415"/>
</g>
<!-- 58 -->
<g id="node227" class="node">
<title>58</title>
<ellipse fill="none" stroke="#000000" cx="64827.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="64827.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">58</text>
</g>
<!-- USENIX&#45;&gt;58 -->
<g id="edge233" class="edge">
<title>USENIX&#45;&gt;58</title>
<path fill="none" stroke="#000000" d="M37482.759,-1048.0636C38516.8686,-1047.963 58022.3292,-1045.3908 63703.022,-994.0672 64129.5473,-990.2137 64647.0359,-979.8204 64789.2921,-976.8625"/>
<polygon fill="#000000" stroke="#000000" points="64789.7132,-980.3546 64799.638,-976.6467 64789.5672,-973.3561 64789.7132,-980.3546"/>
</g>
<!-- 59 -->
<g id="node231" class="node">
<title>59</title>
<ellipse fill="none" stroke="#000000" cx="65981.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="65981.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">59</text>
</g>
<!-- USENIX&#45;&gt;59 -->
<g id="edge237" class="edge">
<title>USENIX&#45;&gt;59</title>
<path fill="none" stroke="#000000" d="M37482.9448,-1048.0203C38617.5489,-1046.7739 61890.5272,-1020.9214 64863.022,-994.0672 65287.2711,-990.2345 65801.9969,-979.8265 65943.4935,-976.8639"/>
<polygon fill="#000000" stroke="#000000" points="65943.8599,-980.357 65953.7842,-976.6477 65943.7129,-973.3586 65943.8599,-980.357"/>
</g>
<!-- 60 -->
<g id="node235" class="node">
<title>60</title>
<ellipse fill="none" stroke="#000000" cx="67165.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="67165.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">60</text>
</g>
<!-- USENIX&#45;&gt;60 -->
<g id="edge241" class="edge">
<title>USENIX&#45;&gt;60</title>
<path fill="none" stroke="#000000" d="M37482.559,-1048.0232C38636.7466,-1046.8232 62917.4959,-1021.2939 66017.022,-994.0672 66454.0621,-990.2282 66984.6119,-979.7609 67127.8839,-976.8357"/>
<polygon fill="#000000" stroke="#000000" points="67127.9787,-980.3346 67137.9049,-976.6305 67127.8353,-973.3361 67127.9787,-980.3346"/>
</g>
<!-- 61 -->
<g id="node239" class="node">
<title>61</title>
<ellipse fill="none" stroke="#000000" cx="68337.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="68337.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">61</text>
</g>
<!-- USENIX&#45;&gt;61 -->
<g id="edge245" class="edge">
<title>USENIX&#45;&gt;61</title>
<path fill="none" stroke="#000000" d="M37482.9788,-1048.0266C38667.354,-1046.9021 63971.8674,-1022.5785 67201.022,-994.0672 67632.5812,-990.2569 68156.2805,-979.811 68299.3687,-976.8557"/>
<polygon fill="#000000" stroke="#000000" points="68299.8432,-980.3467 68309.7686,-976.6402 68299.6982,-973.3482 68299.8432,-980.3467"/>
</g>
<!-- 62 -->
<g id="node243" class="node">
<title>62</title>
<ellipse fill="none" stroke="#000000" cx="69497.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="69497.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">62</text>
</g>
<!-- USENIX&#45;&gt;62 -->
<g id="edge249" class="edge">
<title>USENIX&#45;&gt;62</title>
<path fill="none" stroke="#000000" d="M37482.8427,-1048.0303C38689.3802,-1046.9857 65015.0257,-1023.8846 68373.022,-994.0672 68799.5479,-990.2799 69317.0361,-979.8398 69459.2921,-976.8668"/>
<polygon fill="#000000" stroke="#000000" points="69459.7136,-980.3588 69469.638,-976.6499 69459.5668,-973.3603 69459.7136,-980.3588"/>
</g>
<!-- 63 -->
<g id="node247" class="node">
<title>63</title>
<ellipse fill="none" stroke="#000000" cx="70681.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="70681.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">63</text>
</g>
<!-- USENIX&#45;&gt;63 -->
<g id="edge253" class="edge">
<title>USENIX&#45;&gt;63</title>
<path fill="none" stroke="#000000" d="M37482.5913,-1048.0325C38708.9262,-1047.0279 66047.3527,-1024.3249 69533.022,-994.0672 69970.0625,-990.2735 70500.612,-979.7739 70643.8839,-976.8385"/>
<polygon fill="#000000" stroke="#000000" points="70643.979,-980.3374 70653.9049,-976.6326 70643.8351,-973.3389 70643.979,-980.3374"/>
</g>
<!-- 64 -->
<g id="node251" class="node">
<title>64</title>
<ellipse fill="none" stroke="#000000" cx="71866.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="71866.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">64</text>
</g>
<!-- USENIX&#45;&gt;64 -->
<g id="edge257" class="edge">
<title>USENIX&#45;&gt;64</title>
<path fill="none" stroke="#000000" d="M37482.7441,-1048.0351C38734.4971,-1047.0884 67101.4019,-1025.3201 70717.022,-994.0672 71154.4432,-990.2862 71685.4548,-979.7775 71828.8516,-976.8393"/>
<polygon fill="#000000" stroke="#000000" points="71828.9554,-980.338 71838.8813,-976.6332 71828.8115,-973.3395 71828.9554,-980.338"/>
</g>
<!-- 65 -->
<g id="node255" class="node">
<title>65</title>
<ellipse fill="none" stroke="#000000" cx="73075.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="73075.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">65</text>
</g>
<!-- USENIX&#45;&gt;65 -->
<g id="edge261" class="edge">
<title>USENIX&#45;&gt;65</title>
<path fill="none" stroke="#000000" d="M37482.8209,-1048.0367C38758.5872,-1047.1225 68156.2411,-1025.7405 71902.022,-994.0672 72349.0752,-990.2871 72891.8889,-979.7556 73037.5621,-976.8298"/>
<polygon fill="#000000" stroke="#000000" points="73037.8173,-980.3255 73047.7447,-976.6247 73037.6762,-973.3269 73037.8173,-980.3255"/>
</g>
<!-- 66 -->
<g id="node259" class="node">
<title>66</title>
<ellipse fill="none" stroke="#000000" cx="74240.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="74240.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">66</text>
</g>
<!-- USENIX&#45;&gt;66 -->
<g id="edge265" class="edge">
<title>USENIX&#45;&gt;66</title>
<path fill="none" stroke="#000000" d="M37482.8517,-1048.0407C38782.0601,-1047.2311 69232.3891,-1027.9204 73111.022,-994.0672 73539.923,-990.3237 74060.3945,-979.8305 74202.6007,-976.8599"/>
<polygon fill="#000000" stroke="#000000" points="74203.0121,-980.3521 74212.9365,-976.6433 74202.8654,-973.3537 74203.0121,-980.3521"/>
</g>
<!-- 67 -->
<g id="node263" class="node">
<title>67</title>
<ellipse fill="none" stroke="#000000" cx="75417.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="75417.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">67</text>
</g>
<!-- USENIX&#45;&gt;67 -->
<g id="edge269" class="edge">
<title>USENIX&#45;&gt;67</title>
<path fill="none" stroke="#000000" d="M37482.757,-1048.0425C38802.3529,-1047.2739 70269.2123,-1028.6074 74276.022,-994.0672 74709.9153,-990.3269 75236.5393,-979.8114 75379.6338,-976.8514"/>
<polygon fill="#000000" stroke="#000000" points="75379.7234,-980.3504 75389.6486,-976.6436 75379.5781,-973.3519 75379.7234,-980.3504"/>
</g>
<!-- 68 -->
<g id="node267" class="node">
<title>68</title>
<ellipse fill="none" stroke="#000000" cx="76604.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="76604.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">68</text>
</g>
<!-- USENIX&#45;&gt;68 -->
<g id="edge273" class="edge">
<title>USENIX&#45;&gt;68</title>
<path fill="none" stroke="#000000" d="M37482.6073,-1048.0443C38821.5851,-1047.3178 71316.6353,-1029.3471 75453.022,-994.0672 75891.2048,-990.3299 76423.1406,-979.7901 76566.7869,-976.842"/>
<polygon fill="#000000" stroke="#000000" points="76566.9083,-980.3403 76576.8341,-976.6352 76566.7641,-973.3418 76566.9083,-980.3403"/>
</g>
<!-- 69 -->
<g id="node271" class="node">
<title>69</title>
<ellipse fill="none" stroke="#000000" cx="77751.022" cy="-976.0672" rx="27" ry="18"/>
<text text-anchor="middle" x="77751.022" y="-971.8672" font-family="Times,serif" font-size="14.00" fill="#000000">69</text>
</g>
<!-- USENIX&#45;&gt;69 -->
<g id="edge277" class="edge">
<title>USENIX&#45;&gt;69</title>
<path fill="none" stroke="#000000" d="M37482.6557,-1048.0477C38843.84,-1047.4189 72373.1526,-1031.5692 76640.022,-994.0672 77061.6164,-990.3618 77573.1183,-979.8637 77713.7286,-976.872"/>
<polygon fill="#000000" stroke="#000000" points="77714.0318,-980.3664 77723.9548,-976.6537 77713.8824,-973.368 77714.0318,-980.3664"/>
</g>
<!-- Computer Systems Research in the Post&#45;Vi
rtualization EraEd Bugnion, École Polyt
echnique Fédérale de Lausanne (EPFL) -->
<g id="node3" class="node">
<title>Computer Systems Research in the Post&#45;Vi
rtualization EraEd Bugnion, École Polyt
echnique Fédérale de Lausanne (EPFL)</title>
<ellipse fill="none" stroke="#000000" cx="182.022" cy="-461.0336" rx="182.044" ry="35.2113"/>
<text text-anchor="middle" x="182.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Computer Systems Research in the Post&#45;Vi</text>
<text text-anchor="middle" x="182.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rtualization EraEd Bugnion, École Polyt</text>
<text text-anchor="middle" x="182.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">echnique Fédérale de Lausanne (EPFL)</text>
</g>
<!-- 0&#45;&gt;Computer Systems Research in the Post&#45;Vi
rtualization EraEd Bugnion, École Polyt
echnique Fédérale de Lausanne (EPFL) -->
<g id="edge2" class="edge">
<title>0&#45;&gt;Computer Systems Research in the Post&#45;Vi
rtualization EraEd Bugnion, École Polyt
echnique Fédérale de Lausanne (EPFL)</title>
<path fill="none" stroke="#000000" d="M734.9061,-975.7149C656.2164,-974.1772 429.8019,-965.9514 373.022,-922.0672 238.068,-817.7638 197.7228,-601.2302 186.2849,-506.7663"/>
<polygon fill="#000000" stroke="#000000" points="189.743,-506.2013 185.117,-496.6697 182.7894,-507.0057 189.743,-506.2013"/>
</g>
<!-- Ed Bugnion, École Polytechnique Fédér
ale de Lausanne (EPFL)Prof. Edouard Bugn
ion joined EPFL in 2012, where his focus
 is on datacenter systems. He is also th
e academic co&#45;director of the Swiss Data
 Science Center and currently serves as 
the Vice&#45; President for Information Syst
ems at EPFL.Together with his colleagues
, Bugnion received the ACM Software Syst
em Award for VMware in 2009. His paper o
n “Disco” was entered into the ACM S
IGOPS Hall of Fame Award in 2008. He has
 received Best Paper Awards from both SO
SP and OSDI.Together with Jason Nieh and
 Dan Tsafrir, he recently published his 
first textbook on “hardware and softwa
re support for virtualization.” -->
<g id="node4" class="node">
<title>Ed Bugnion, École Polytechnique Fédér
ale de Lausanne (EPFL)Prof. Edouard Bugn
ion joined EPFL in 2012, where his focus
 is on datacenter systems. He is also th
e academic co&#45;director of the Swiss Data
 Science Center and currently serves as 
the Vice&#45; President for Information Syst
ems at EPFL.Together with his colleagues
, Bugnion received the ACM Software Syst
em Award for VMware in 2009. His paper o
n “Disco” was entered into the ACM S
IGOPS Hall of Fame Award in 2008. He has
 received Best Paper Awards from both SO
SP and OSDI.Together with Jason Nieh and
 Dan Tsafrir, he recently published his 
first textbook on “hardware and softwa
re support for virtualization.”</title>
<ellipse fill="none" stroke="#000000" cx="569.022" cy="-461.0336" rx="187.4077" ry="173.8966"/>
<text text-anchor="middle" x="569.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Ed Bugnion, École Polytechnique Fédér</text>
<text text-anchor="middle" x="569.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ale de Lausanne (EPFL)Prof. Edouard Bugn</text>
<text text-anchor="middle" x="569.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ion joined EPFL in 2012, where his focus</text>
<text text-anchor="middle" x="569.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> is on datacenter systems. He is also th</text>
<text text-anchor="middle" x="569.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e academic co&#45;director of the Swiss Data</text>
<text text-anchor="middle" x="569.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Science Center and currently serves as </text>
<text text-anchor="middle" x="569.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the Vice&#45; President for Information Syst</text>
<text text-anchor="middle" x="569.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ems at EPFL.Together with his colleagues</text>
<text text-anchor="middle" x="569.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, Bugnion received the ACM Software Syst</text>
<text text-anchor="middle" x="569.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">em Award for VMware in 2009. His paper o</text>
<text text-anchor="middle" x="569.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n “Disco” was entered into the ACM S</text>
<text text-anchor="middle" x="569.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">IGOPS Hall of Fame Award in 2008. He has</text>
<text text-anchor="middle" x="569.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> received Best Paper Awards from both SO</text>
<text text-anchor="middle" x="569.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SP and OSDI.Together with Jason Nieh and</text>
<text text-anchor="middle" x="569.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Dan Tsafrir, he recently published his </text>
<text text-anchor="middle" x="569.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">first textbook on “hardware and softwa</text>
<text text-anchor="middle" x="569.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re support for virtualization.”</text>
</g>
<!-- 0&#45;&gt;Ed Bugnion, École Polytechnique Fédér
ale de Lausanne (EPFL)Prof. Edouard Bugn
ion joined EPFL in 2012, where his focus
 is on datacenter systems. He is also th
e academic co&#45;director of the Swiss Data
 Science Center and currently serves as 
the Vice&#45; President for Information Syst
ems at EPFL.Together with his colleagues
, Bugnion received the ACM Software Syst
em Award for VMware in 2009. His paper o
n “Disco” was entered into the ACM S
IGOPS Hall of Fame Award in 2008. He has
 received Best Paper Awards from both SO
SP and OSDI.Together with Jason Nieh and
 Dan Tsafrir, he recently published his 
first textbook on “hardware and softwa
re support for virtualization.” -->
<g id="edge3" class="edge">
<title>0&#45;&gt;Ed Bugnion, École Polytechnique Fédér
ale de Lausanne (EPFL)Prof. Edouard Bugn
ion joined EPFL in 2012, where his focus
 is on datacenter systems. He is also th
e academic co&#45;director of the Swiss Data
 Science Center and currently serves as 
the Vice&#45; President for Information Syst
ems at EPFL.Together with his colleagues
, Bugnion received the ACM Software Syst
em Award for VMware in 2009. His paper o
n “Disco” was entered into the ACM S
IGOPS Hall of Fame Award in 2008. He has
 received Best Paper Awards from both SO
SP and OSDI.Together with Jason Nieh and
 Dan Tsafrir, he recently published his 
first textbook on “hardware and softwa
re support for virtualization.”</title>
<path fill="none" stroke="#000000" d="M755.3785,-958.3386C736.3375,-907.5264 679.9988,-757.1828 634.2094,-634.9907"/>
<polygon fill="#000000" stroke="#000000" points="637.4396,-633.6361 630.653,-625.5002 630.8847,-636.0925 637.4396,-633.6361"/>
</g>
<!-- The evolution of computing technology ha
s led to the centralization into mega&#45;co
mputing resources, the disruption of ent
ire industries through software services
, substantial concerns around security, 
privacy, and surveillance, and enabled t
he recent explosion of data science and 
deep learning. &#160;&#160;In all cases, computer 
systems (and computer systems research) 
provides a technical foundation to reaso
n about challenges and trends.This talk 
will rely on examples from past and curr
ent research and put them in the context
 of the challenges of the day. &#160;It will 
revisit virtualization from a historical
 perspective and extend to my recent foc
us on microsecond&#45;scale computing. -->
<g id="node5" class="node">
<title>The evolution of computing technology ha
s led to the centralization into mega&#45;co
mputing resources, the disruption of ent
ire industries through software services
, substantial concerns around security, 
privacy, and surveillance, and enabled t
he recent explosion of data science and 
deep learning. &#160;&#160;In all cases, computer 
systems (and computer systems research) 
provides a technical foundation to reaso
n about challenges and trends.This talk 
will rely on examples from past and curr
ent research and put them in the context
 of the challenges of the day. &#160;It will 
revisit virtualization from a historical
 perspective and extend to my recent foc
us on microsecond&#45;scale computing.</title>
<ellipse fill="none" stroke="#000000" cx="955.022" cy="-461.0336" rx="180.2861" ry="173.8966"/>
<text text-anchor="middle" x="955.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The evolution of computing technology ha</text>
<text text-anchor="middle" x="955.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s led to the centralization into mega&#45;co</text>
<text text-anchor="middle" x="955.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mputing resources, the disruption of ent</text>
<text text-anchor="middle" x="955.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ire industries through software services</text>
<text text-anchor="middle" x="955.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, substantial concerns around security, </text>
<text text-anchor="middle" x="955.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">privacy, and surveillance, and enabled t</text>
<text text-anchor="middle" x="955.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">he recent explosion of data science and </text>
<text text-anchor="middle" x="955.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">deep learning. &#160;&#160;In all cases, computer </text>
<text text-anchor="middle" x="955.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">systems (and computer systems research) </text>
<text text-anchor="middle" x="955.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">provides a technical foundation to reaso</text>
<text text-anchor="middle" x="955.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n about challenges and trends.This talk </text>
<text text-anchor="middle" x="955.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">will rely on examples from past and curr</text>
<text text-anchor="middle" x="955.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ent research and put them in the context</text>
<text text-anchor="middle" x="955.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of the challenges of the day. &#160;It will </text>
<text text-anchor="middle" x="955.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">revisit virtualization from a historical</text>
<text text-anchor="middle" x="955.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> perspective and extend to my recent foc</text>
<text text-anchor="middle" x="955.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">us on microsecond&#45;scale computing.</text>
</g>
<!-- 0&#45;&gt;The evolution of computing technology ha
s led to the centralization into mega&#45;co
mputing resources, the disruption of ent
ire industries through software services
, substantial concerns around security, 
privacy, and surveillance, and enabled t
he recent explosion of data science and 
deep learning. &#160;&#160;In all cases, computer 
systems (and computer systems research) 
provides a technical foundation to reaso
n about challenges and trends.This talk 
will rely on examples from past and curr
ent research and put them in the context
 of the challenges of the day. &#160;It will 
revisit virtualization from a historical
 perspective and extend to my recent foc
us on microsecond&#45;scale computing. -->
<g id="edge4" class="edge">
<title>0&#45;&gt;The evolution of computing technology ha
s led to the centralization into mega&#45;co
mputing resources, the disruption of ent
ire industries through software services
, substantial concerns around security, 
privacy, and surveillance, and enabled t
he recent explosion of data science and 
deep learning. &#160;&#160;In all cases, computer 
systems (and computer systems research) 
provides a technical foundation to reaso
n about challenges and trends.This talk 
will rely on examples from past and curr
ent research and put them in the context
 of the challenges of the day. &#160;It will 
revisit virtualization from a historical
 perspective and extend to my recent foc
us on microsecond&#45;scale computing.</title>
<path fill="none" stroke="#000000" d="M768.6655,-958.3386C787.7388,-907.4402 844.2364,-756.6724 890.0675,-634.3691"/>
<polygon fill="#000000" stroke="#000000" points="893.3953,-635.4629 893.6269,-624.8706 886.8404,-633.0065 893.3953,-635.4629"/>
</g>
<!-- Ed Bugnion, École Polytechnique Fédér
ale de Lausanne (EPFL) -->
<g id="node7" class="node">
<title>Ed Bugnion, École Polytechnique Fédér
ale de Lausanne (EPFL)</title>
<ellipse fill="none" stroke="#000000" cx="1733.022" cy="-461.0336" rx="170.4967" ry="25.4118"/>
<text text-anchor="middle" x="1733.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Ed Bugnion, École Polytechnique Fédér</text>
<text text-anchor="middle" x="1733.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ale de Lausanne (EPFL)</text>
</g>
<!-- 1&#45;&gt;Ed Bugnion, École Polytechnique Fédér
ale de Lausanne (EPFL) -->
<g id="edge6" class="edge">
<title>1&#45;&gt;Ed Bugnion, École Polytechnique Fédér
ale de Lausanne (EPFL)</title>
<path fill="none" stroke="#000000" d="M2165.931,-974.1625C2103.2336,-969.2464 1950.5534,-954.204 1912.022,-922.0672 1777.6724,-810.0144 1743.7916,-584.2798 1735.5582,-496.8047"/>
<polygon fill="#000000" stroke="#000000" points="1739.0231,-496.2522 1734.6563,-486.5991 1732.0502,-496.8684 1739.0231,-496.2522"/>
</g>
<!-- Prof. Edouard Bugnion joined EPFL in 201
2, where his focus is on datacenter syst
ems. He is also the academic co&#45;director
 of the Swiss Data Science Center and cu
rrently serves as the Vice&#45; President fo
r Information Systems at EPFL.Together w
ith his colleagues, Bugnion received the
 ACM Software System Award for VMware in
 2009. His paper on “Disco” was ente
red into the ACM SIGOPS Hall of Fame Awa
rd in 2008. He has received Best Paper A
wards from both SOSP and OSDI.Together w
ith Jason Nieh and Dan Tsafrir, he recen
tly published his first textbook on “h
ardware and software support for virtual
ization.” -->
<g id="node8" class="node">
<title>Prof. Edouard Bugnion joined EPFL in 201
2, where his focus is on datacenter syst
ems. He is also the academic co&#45;director
 of the Swiss Data Science Center and cu
rrently serves as the Vice&#45; President fo
r Information Systems at EPFL.Together w
ith his colleagues, Bugnion received the
 ACM Software System Award for VMware in
 2009. His paper on “Disco” was ente
red into the ACM SIGOPS Hall of Fame Awa
rd in 2008. He has received Best Paper A
wards from both SOSP and OSDI.Together w
ith Jason Nieh and Dan Tsafrir, he recen
tly published his first textbook on “h
ardware and software support for virtual
ization.”</title>
<ellipse fill="none" stroke="#000000" cx="1349.022" cy="-461.0336" rx="195.0621" ry="164.0976"/>
<text text-anchor="middle" x="1349.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Prof. Edouard Bugnion joined EPFL in 201</text>
<text text-anchor="middle" x="1349.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">2, where his focus is on datacenter syst</text>
<text text-anchor="middle" x="1349.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ems. He is also the academic co&#45;director</text>
<text text-anchor="middle" x="1349.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of the Swiss Data Science Center and cu</text>
<text text-anchor="middle" x="1349.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rrently serves as the Vice&#45; President fo</text>
<text text-anchor="middle" x="1349.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r Information Systems at EPFL.Together w</text>
<text text-anchor="middle" x="1349.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ith his colleagues, Bugnion received the</text>
<text text-anchor="middle" x="1349.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> ACM Software System Award for VMware in</text>
<text text-anchor="middle" x="1349.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> 2009. His paper on “Disco” was ente</text>
<text text-anchor="middle" x="1349.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">red into the ACM SIGOPS Hall of Fame Awa</text>
<text text-anchor="middle" x="1349.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rd in 2008. He has received Best Paper A</text>
<text text-anchor="middle" x="1349.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">wards from both SOSP and OSDI.Together w</text>
<text text-anchor="middle" x="1349.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ith Jason Nieh and Dan Tsafrir, he recen</text>
<text text-anchor="middle" x="1349.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tly published his first textbook on “h</text>
<text text-anchor="middle" x="1349.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ardware and software support for virtual</text>
<text text-anchor="middle" x="1349.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ization.”</text>
</g>
<!-- 1&#45;&gt;Prof. Edouard Bugnion joined EPFL in 201
2, where his focus is on datacenter syst
ems. He is also the academic co&#45;director
 of the Swiss Data Science Center and cu
rrently serves as the Vice&#45; President fo
r Information Systems at EPFL.Together w
ith his colleagues, Bugnion received the
 ACM Software System Award for VMware in
 2009. His paper on “Disco” was ente
red into the ACM SIGOPS Hall of Fame Awa
rd in 2008. He has received Best Paper A
wards from both SOSP and OSDI.Together w
ith Jason Nieh and Dan Tsafrir, he recen
tly published his first textbook on “h
ardware and software support for virtual
ization.” -->
<g id="edge7" class="edge">
<title>1&#45;&gt;Prof. Edouard Bugnion joined EPFL in 201
2, where his focus is on datacenter syst
ems. He is also the academic co&#45;director
 of the Swiss Data Science Center and cu
rrently serves as the Vice&#45; President fo
r Information Systems at EPFL.Together w
ith his colleagues, Bugnion received the
 ACM Software System Award for VMware in
 2009. His paper on “Disco” was ente
red into the ACM SIGOPS Hall of Fame Awa
rd in 2008. He has received Best Paper A
wards from both SOSP and OSDI.Together w
ith Jason Nieh and Dan Tsafrir, he recen
tly published his first textbook on “h
ardware and software support for virtual
ization.”</title>
<path fill="none" stroke="#000000" d="M2166.0399,-975.3899C2050.9344,-972.2869 1604.5405,-958.0074 1554.022,-922.0672 1459.6374,-854.9198 1408.0629,-734.1308 1380.2553,-633.0322"/>
<polygon fill="#000000" stroke="#000000" points="1383.6177,-632.0583 1377.6377,-623.3124 1376.8585,-633.8786 1383.6177,-632.0583"/>
</g>
<g id="node9" class="node">
<title></title>
<ellipse fill="none" stroke="#000000" cx="2726.022" cy="-461.0336" rx="27" ry="18"/>
</g>
<!-- 1&#45;&gt; -->
<g id="edge8" class="edge">
<title>1&#45;&gt;</title>
<path fill="none" stroke="#000000" d="M2220.105,-975.1082C2319.0661,-971.3399 2657.0473,-956.0566 2690.022,-922.0672 2749.8518,-860.3965 2734.7988,-579.5417 2728.2586,-489.1494"/>
<polygon fill="#000000" stroke="#000000" points="2731.7431,-488.8096 2727.5088,-479.0977 2724.7625,-489.3303 2731.7431,-488.8096"/>
</g>
<!-- 2&#45;&gt; -->
<g id="edge12" class="edge">
<title>2&#45;&gt;</title>
<path fill="none" stroke="#000000" d="M2635.4708,-966.6284C2653.7044,-957.9479 2677.8765,-943.2018 2690.022,-922.0672 2772.9487,-777.7652 2745.177,-564.8473 2731.6113,-489.0676"/>
<polygon fill="#000000" stroke="#000000" points="2734.9918,-488.1011 2729.7277,-478.9066 2728.1091,-489.3771 2734.9918,-488.1011"/>
</g>
<!-- Lock&#45;in&#45;Pop: Securing Privileged Operati
ng System Kernels by Keeping on the Beat
en Path -->
<g id="node11" class="node">
<title>Lock&#45;in&#45;Pop: Securing Privileged Operati
ng System Kernels by Keeping on the Beat
en Path</title>
<ellipse fill="none" stroke="#000000" cx="2499.022" cy="-461.0336" rx="182.0923" ry="35.2113"/>
<text text-anchor="middle" x="2499.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Lock&#45;in&#45;Pop: Securing Privileged Operati</text>
<text text-anchor="middle" x="2499.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng System Kernels by Keeping on the Beat</text>
<text text-anchor="middle" x="2499.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">en Path</text>
</g>
<!-- 2&#45;&gt;Lock&#45;in&#45;Pop: Securing Privileged Operati
ng System Kernels by Keeping on the Beat
en Path -->
<g id="edge10" class="edge">
<title>2&#45;&gt;Lock&#45;in&#45;Pop: Securing Privileged Operati
ng System Kernels by Keeping on the Beat
en Path</title>
<path fill="none" stroke="#000000" d="M2608.0665,-958.0389C2592.1917,-885.6845 2532.8184,-615.0718 2509.0002,-506.5125"/>
<polygon fill="#000000" stroke="#000000" points="2512.3707,-505.5424 2506.8089,-496.5248 2505.5333,-507.0426 2512.3707,-505.5424"/>
</g>
<!-- Yiwen Li, Brendan Dolan&#45;Gavitt, Sam Webe
r, and Justin Cappos, New York Universit
y -->
<g id="node12" class="node">
<title>Yiwen Li, Brendan Dolan&#45;Gavitt, Sam Webe
r, and Justin Cappos, New York Universit
y</title>
<ellipse fill="none" stroke="#000000" cx="2110.022" cy="-461.0336" rx="188.5497" ry="35.2113"/>
<text text-anchor="middle" x="2110.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Yiwen Li, Brendan Dolan&#45;Gavitt, Sam Webe</text>
<text text-anchor="middle" x="2110.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r, and Justin Cappos, New York Universit</text>
<text text-anchor="middle" x="2110.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y</text>
</g>
<!-- 2&#45;&gt;Yiwen Li, Brendan Dolan&#45;Gavitt, Sam Webe
r, and Justin Cappos, New York Universit
y -->
<g id="edge11" class="edge">
<title>2&#45;&gt;Yiwen Li, Brendan Dolan&#45;Gavitt, Sam Webe
r, and Justin Cappos, New York Universit
y</title>
<path fill="none" stroke="#000000" d="M2584.7914,-974.4935C2518.4688,-970.1594 2350.8622,-956.0405 2308.022,-922.0672 2173.6522,-815.509 2128.8529,-600.1887 2115.3263,-506.4055"/>
<polygon fill="#000000" stroke="#000000" points="2118.7767,-505.8061 2113.9338,-496.3829 2111.8433,-506.7695 2118.7767,-505.8061"/>
</g>
<!-- Fast and Precise Retrieval of Forward an
d Back Porting Information for Linux Dev
ice Drivers -->
<g id="node14" class="node">
<title>Fast and Precise Retrieval of Forward an
d Back Porting Information for Linux Dev
ice Drivers</title>
<ellipse fill="none" stroke="#000000" cx="4321.022" cy="-461.0336" rx="179.6426" ry="35.2113"/>
<text text-anchor="middle" x="4321.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Fast and Precise Retrieval of Forward an</text>
<text text-anchor="middle" x="4321.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d Back Porting Information for Linux Dev</text>
<text text-anchor="middle" x="4321.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ice Drivers</text>
</g>
<!-- 3&#45;&gt;Fast and Precise Retrieval of Forward an
d Back Porting Information for Linux Dev
ice Drivers -->
<g id="edge14" class="edge">
<title>3&#45;&gt;Fast and Precise Retrieval of Forward an
d Back Porting Information for Linux Dev
ice Drivers</title>
<path fill="none" stroke="#000000" d="M4850.9344,-975.5014C4775.0335,-973.4013 4562.3499,-963.8374 4509.022,-922.0672 4375.0526,-817.1331 4335.9518,-600.9389 4325.0363,-506.6654"/>
<polygon fill="#000000" stroke="#000000" points="4328.5002,-506.1451 4323.9241,-496.5895 4321.5425,-506.9132 4328.5002,-506.1451"/>
</g>
<!-- Julia Lawall, Derek Palinski, Lukas Gnir
ke, and Gilles Muller, Sorbonne Universi
tés/UPMC/Inria/LIP6 -->
<g id="node15" class="node">
<title>Julia Lawall, Derek Palinski, Lukas Gnir
ke, and Gilles Muller, Sorbonne Universi
tés/UPMC/Inria/LIP6</title>
<ellipse fill="none" stroke="#000000" cx="4693.022" cy="-461.0336" rx="174.5207" ry="35.2113"/>
<text text-anchor="middle" x="4693.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Julia Lawall, Derek Palinski, Lukas Gnir</text>
<text text-anchor="middle" x="4693.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ke, and Gilles Muller, Sorbonne Universi</text>
<text text-anchor="middle" x="4693.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tés/UPMC/Inria/LIP6</text>
</g>
<!-- 3&#45;&gt;Julia Lawall, Derek Palinski, Lukas Gnir
ke, and Gilles Muller, Sorbonne Universi
tés/UPMC/Inria/LIP6 -->
<g id="edge15" class="edge">
<title>3&#45;&gt;Julia Lawall, Derek Palinski, Lukas Gnir
ke, and Gilles Muller, Sorbonne Universi
tés/UPMC/Inria/LIP6</title>
<path fill="none" stroke="#000000" d="M4871.6539,-958.3386C4845.8074,-886.383 4748.2657,-614.8303 4709.2735,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="4712.4713,-504.8263 4705.7968,-496.5982 4705.8834,-507.1927 4712.4713,-504.8263"/>
</g>
<!-- Porting Linux device drivers to target m
ore recent and older Linux kernel versio
ns to compensate for the everchanging ke
rnel interface is a continual problem fo
r Linux device driver developers. Acquir
ing information about interface changes 
is a necessary, but tedious and error pr
one, part of this task. In this paper, w
e propose two tools, Prequel and gcc&#45;red
uce, to help the developer collect the n
eeded information. Prequel provides lang
uage support for querying git commit his
tories, while gcc&#45;reduce translates erro
r messages produced by compiling a drive
r with a target kernel into appropriate 
Prequel queries. We have used our approa
ch in porting 33 device driver files ove
r up to 3 years of Linux kernel history,
 amounting to hundreds of thousands of c
ommits. In these experiments, for 3/4 of
 the porting issues, our approach highli
ghted commits that enabled solving the p
orting task. For many porting issues, ou
r approach retrieves relevant commits in
 30 seconds or less. -->
<g id="node16" class="node">
<title>Porting Linux device drivers to target m
ore recent and older Linux kernel versio
ns to compensate for the everchanging ke
rnel interface is a continual problem fo
r Linux device driver developers. Acquir
ing information about interface changes 
is a necessary, but tedious and error pr
one, part of this task. In this paper, w
e propose two tools, Prequel and gcc&#45;red
uce, to help the developer collect the n
eeded information. Prequel provides lang
uage support for querying git commit his
tories, while gcc&#45;reduce translates erro
r messages produced by compiling a drive
r with a target kernel into appropriate 
Prequel queries. We have used our approa
ch in porting 33 device driver files ove
r up to 3 years of Linux kernel history,
 amounting to hundreds of thousands of c
ommits. In these experiments, for 3/4 of
 the porting issues, our approach highli
ghted commits that enabled solving the p
orting task. For many porting issues, ou
r approach retrieves relevant commits in
 30 seconds or less.</title>
<ellipse fill="none" stroke="#000000" cx="5064.022" cy="-461.0336" rx="178.4191" ry="253.2885"/>
<text text-anchor="middle" x="5064.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Porting Linux device drivers to target m</text>
<text text-anchor="middle" x="5064.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ore recent and older Linux kernel versio</text>
<text text-anchor="middle" x="5064.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns to compensate for the everchanging ke</text>
<text text-anchor="middle" x="5064.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rnel interface is a continual problem fo</text>
<text text-anchor="middle" x="5064.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r Linux device driver developers. Acquir</text>
<text text-anchor="middle" x="5064.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing information about interface changes </text>
<text text-anchor="middle" x="5064.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">is a necessary, but tedious and error pr</text>
<text text-anchor="middle" x="5064.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">one, part of this task. In this paper, w</text>
<text text-anchor="middle" x="5064.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e propose two tools, Prequel and gcc&#45;red</text>
<text text-anchor="middle" x="5064.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uce, to help the developer collect the n</text>
<text text-anchor="middle" x="5064.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eeded information. Prequel provides lang</text>
<text text-anchor="middle" x="5064.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uage support for querying git commit his</text>
<text text-anchor="middle" x="5064.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tories, while gcc&#45;reduce translates erro</text>
<text text-anchor="middle" x="5064.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r messages produced by compiling a drive</text>
<text text-anchor="middle" x="5064.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r with a target kernel into appropriate </text>
<text text-anchor="middle" x="5064.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Prequel queries. We have used our approa</text>
<text text-anchor="middle" x="5064.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ch in porting 33 device driver files ove</text>
<text text-anchor="middle" x="5064.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r up to 3 years of Linux kernel history,</text>
<text text-anchor="middle" x="5064.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> amounting to hundreds of thousands of c</text>
<text text-anchor="middle" x="5064.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ommits. In these experiments, for 3/4 of</text>
<text text-anchor="middle" x="5064.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> the porting issues, our approach highli</text>
<text text-anchor="middle" x="5064.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ghted commits that enabled solving the p</text>
<text text-anchor="middle" x="5064.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">orting task. For many porting issues, ou</text>
<text text-anchor="middle" x="5064.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r approach retrieves relevant commits in</text>
<text text-anchor="middle" x="5064.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> 30 seconds or less.</text>
</g>
<!-- 3&#45;&gt;Porting Linux device drivers to target m
ore recent and older Linux kernel versio
ns to compensate for the everchanging ke
rnel interface is a continual problem fo
r Linux device driver developers. Acquir
ing information about interface changes 
is a necessary, but tedious and error pr
one, part of this task. In this paper, w
e propose two tools, Prequel and gcc&#45;red
uce, to help the developer collect the n
eeded information. Prequel provides lang
uage support for querying git commit his
tories, while gcc&#45;reduce translates erro
r messages produced by compiling a drive
r with a target kernel into appropriate 
Prequel queries. We have used our approa
ch in porting 33 device driver files ove
r up to 3 years of Linux kernel history,
 amounting to hundreds of thousands of c
ommits. In these experiments, for 3/4 of
 the porting issues, our approach highli
ghted commits that enabled solving the p
orting task. For many porting issues, ou
r approach retrieves relevant commits in
 30 seconds or less. -->
<g id="edge16" class="edge">
<title>3&#45;&gt;Porting Linux device drivers to target m
ore recent and older Linux kernel versio
ns to compensate for the everchanging ke
rnel interface is a continual problem fo
r Linux device driver developers. Acquir
ing information about interface changes 
is a necessary, but tedious and error pr
one, part of this task. In this paper, w
e propose two tools, Prequel and gcc&#45;red
uce, to help the developer collect the n
eeded information. Prequel provides lang
uage support for querying git commit his
tories, while gcc&#45;reduce translates erro
r messages produced by compiling a drive
r with a target kernel into appropriate 
Prequel queries. We have used our approa
ch in porting 33 device driver files ove
r up to 3 years of Linux kernel history,
 amounting to hundreds of thousands of c
ommits. In these experiments, for 3/4 of
 the porting issues, our approach highli
ghted commits that enabled solving the p
orting task. For many porting issues, ou
r approach retrieves relevant commits in
 30 seconds or less.</title>
<path fill="none" stroke="#000000" d="M4884.4245,-958.3386C4899.8025,-915.7571 4940.4237,-803.277 4979.1506,-696.0425"/>
<polygon fill="#000000" stroke="#000000" points="4982.5462,-696.9438 4982.6511,-686.3495 4975.9624,-694.5661 4982.5462,-696.9438"/>
</g>
<!-- Optimizing the TLB Shootdown Algorithm w
ith Page Access Tracking -->
<g id="node18" class="node">
<title>Optimizing the TLB Shootdown Algorithm w
ith Page Access Tracking</title>
<ellipse fill="none" stroke="#000000" cx="5453.022" cy="-461.0336" rx="192.2132" ry="25.4118"/>
<text text-anchor="middle" x="5453.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Optimizing the TLB Shootdown Algorithm w</text>
<text text-anchor="middle" x="5453.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ith Page Access Tracking</text>
</g>
<!-- 4&#45;&gt;Optimizing the TLB Shootdown Algorithm w
ith Page Access Tracking -->
<g id="edge18" class="edge">
<title>4&#45;&gt;Optimizing the TLB Shootdown Algorithm w
ith Page Access Tracking</title>
<path fill="none" stroke="#000000" d="M5925.8603,-974.3695C5860.5474,-969.7912 5697.0035,-955.2285 5655.022,-922.0672 5515.1598,-811.5898 5469.9378,-584.5072 5457.3316,-496.7477"/>
<polygon fill="#000000" stroke="#000000" points="5460.7866,-496.1805 5455.9518,-486.7531 5453.8524,-497.1379 5460.7866,-496.1805"/>
</g>
<!-- Nadav Amit, VMware Research -->
<g id="node19" class="node">
<title>Nadav Amit, VMware Research</title>
<ellipse fill="none" stroke="#000000" cx="5787.022" cy="-461.0336" rx="123.3189" ry="18"/>
<text text-anchor="middle" x="5787.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Nadav Amit, VMware Research</text>
</g>
<!-- 4&#45;&gt;Nadav Amit, VMware Research -->
<g id="edge19" class="edge">
<title>4&#45;&gt;Nadav Amit, VMware Research</title>
<path fill="none" stroke="#000000" d="M5941.0193,-959.7292C5933.8432,-949.3573 5924.9901,-935.4176 5919.022,-922.0672 5849.0694,-765.5867 5806.2592,-562.622 5792.1766,-489.1399"/>
<polygon fill="#000000" stroke="#000000" points="5795.6052,-488.4339 5790.3074,-479.2587 5788.7271,-489.735 5795.6052,-488.4339"/>
</g>
<!-- The operating system is tasked with main
taining the coherency of per&#45;core TLBs, 
necessitating costly synchronization ope
rations, notably to invalidate stale map
pings. As core&#45;counts increase, the over
head of TLB synchronization likewise inc
reases and hinders scalability, whereas 
existing software optimizations that att
empt to alleviate the problem (like batc
hing) are lacking.We address this proble
m by revising the TLB synchronization su
bsystem. We introduce several techniques
 that detect cases whereby soon&#45;to&#45;be in
validated mappings are cached by only on
e TLB or not cached at all, allowing us 
to entirely avoid the cost of synchroniz
ation. In contrast to existing optimizat
ions, our approach leverages hardware pa
ge access tracking. We implement our tec
hniques in Linux and find that they redu
ce the number of TLB invalidations by up
 to 98% on average and thus improve perf
ormance by up to 78%. Evaluations show t
hat while our techniques may introduce o
verheads of up to 9% when memory mapping
s are never removed, these overheads can
 be avoided by simple hardware enhanceme
nts. -->
<g id="node20" class="node">
<title>The operating system is tasked with main
taining the coherency of per&#45;core TLBs, 
necessitating costly synchronization ope
rations, notably to invalidate stale map
pings. As core&#45;counts increase, the over
head of TLB synchronization likewise inc
reases and hinders scalability, whereas 
existing software optimizations that att
empt to alleviate the problem (like batc
hing) are lacking.We address this proble
m by revising the TLB synchronization su
bsystem. We introduce several techniques
 that detect cases whereby soon&#45;to&#45;be in
validated mappings are cached by only on
e TLB or not cached at all, allowing us 
to entirely avoid the cost of synchroniz
ation. In contrast to existing optimizat
ions, our approach leverages hardware pa
ge access tracking. We implement our tec
hniques in Linux and find that they redu
ce the number of TLB invalidations by up
 to 98% on average and thus improve perf
ormance by up to 78%. Evaluations show t
hat while our techniques may introduce o
verheads of up to 9% when memory mapping
s are never removed, these overheads can
 be avoided by simple hardware enhanceme
nts.</title>
<ellipse fill="none" stroke="#000000" cx="6120.022" cy="-461.0336" rx="191.872" ry="282.6855"/>
<text text-anchor="middle" x="6120.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The operating system is tasked with main</text>
<text text-anchor="middle" x="6120.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">taining the coherency of per&#45;core TLBs, </text>
<text text-anchor="middle" x="6120.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">necessitating costly synchronization ope</text>
<text text-anchor="middle" x="6120.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rations, notably to invalidate stale map</text>
<text text-anchor="middle" x="6120.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pings. As core&#45;counts increase, the over</text>
<text text-anchor="middle" x="6120.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">head of TLB synchronization likewise inc</text>
<text text-anchor="middle" x="6120.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">reases and hinders scalability, whereas </text>
<text text-anchor="middle" x="6120.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">existing software optimizations that att</text>
<text text-anchor="middle" x="6120.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">empt to alleviate the problem (like batc</text>
<text text-anchor="middle" x="6120.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hing) are lacking.We address this proble</text>
<text text-anchor="middle" x="6120.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m by revising the TLB synchronization su</text>
<text text-anchor="middle" x="6120.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">bsystem. We introduce several techniques</text>
<text text-anchor="middle" x="6120.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> that detect cases whereby soon&#45;to&#45;be in</text>
<text text-anchor="middle" x="6120.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">validated mappings are cached by only on</text>
<text text-anchor="middle" x="6120.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e TLB or not cached at all, allowing us </text>
<text text-anchor="middle" x="6120.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to entirely avoid the cost of synchroniz</text>
<text text-anchor="middle" x="6120.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ation. In contrast to existing optimizat</text>
<text text-anchor="middle" x="6120.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ions, our approach leverages hardware pa</text>
<text text-anchor="middle" x="6120.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ge access tracking. We implement our tec</text>
<text text-anchor="middle" x="6120.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hniques in Linux and find that they redu</text>
<text text-anchor="middle" x="6120.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ce the number of TLB invalidations by up</text>
<text text-anchor="middle" x="6120.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> to 98% on average and thus improve perf</text>
<text text-anchor="middle" x="6120.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ormance by up to 78%. Evaluations show t</text>
<text text-anchor="middle" x="6120.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hat while our techniques may introduce o</text>
<text text-anchor="middle" x="6120.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">verheads of up to 9% when memory mapping</text>
<text text-anchor="middle" x="6120.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s are never removed, these overheads can</text>
<text text-anchor="middle" x="6120.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> be avoided by simple hardware enhanceme</text>
<text text-anchor="middle" x="6120.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nts.</text>
</g>
<!-- 4&#45;&gt;The operating system is tasked with main
taining the coherency of per&#45;core TLBs, 
necessitating costly synchronization ope
rations, notably to invalidate stale map
pings. As core&#45;counts increase, the over
head of TLB synchronization likewise inc
reases and hinders scalability, whereas 
existing software optimizations that att
empt to alleviate the problem (like batc
hing) are lacking.We address this proble
m by revising the TLB synchronization su
bsystem. We introduce several techniques
 that detect cases whereby soon&#45;to&#45;be in
validated mappings are cached by only on
e TLB or not cached at all, allowing us 
to entirely avoid the cost of synchroniz
ation. In contrast to existing optimizat
ions, our approach leverages hardware pa
ge access tracking. We implement our tec
hniques in Linux and find that they redu
ce the number of TLB invalidations by up
 to 98% on average and thus improve perf
ormance by up to 78%. Evaluations show t
hat while our techniques may introduce o
verheads of up to 9% when memory mapping
s are never removed, these overheads can
 be avoided by simple hardware enhanceme
nts. -->
<g id="edge20" class="edge">
<title>4&#45;&gt;The operating system is tasked with main
taining the coherency of per&#45;core TLBs, 
necessitating costly synchronization ope
rations, notably to invalidate stale map
pings. As core&#45;counts increase, the over
head of TLB synchronization likewise inc
reases and hinders scalability, whereas 
existing software optimizations that att
empt to alleviate the problem (like batc
hing) are lacking.We address this proble
m by revising the TLB synchronization su
bsystem. We introduce several techniques
 that detect cases whereby soon&#45;to&#45;be in
validated mappings are cached by only on
e TLB or not cached at all, allowing us 
to entirely avoid the cost of synchroniz
ation. In contrast to existing optimizat
ions, our approach leverages hardware pa
ge access tracking. We implement our tec
hniques in Linux and find that they redu
ce the number of TLB invalidations by up
 to 98% on average and thus improve perf
ormance by up to 78%. Evaluations show t
hat while our techniques may introduce o
verheads of up to 9% when memory mapping
s are never removed, these overheads can
 be avoided by simple hardware enhanceme
nts.</title>
<path fill="none" stroke="#000000" d="M5958.7705,-958.3386C5971.2871,-919.7372 6002.4293,-823.6934 6034.0454,-726.1883"/>
<polygon fill="#000000" stroke="#000000" points="6037.4496,-727.0368 6037.2047,-716.4448 6030.7909,-724.8777 6037.4496,-727.0368"/>
</g>
<!-- Falcon: Scaling IO Performance in Multi&#45;
SSD Volumes -->
<g id="node22" class="node">
<title>Falcon: Scaling IO Performance in Multi&#45;
SSD Volumes</title>
<ellipse fill="none" stroke="#000000" cx="6507.022" cy="-461.0336" rx="177.1832" ry="25.4118"/>
<text text-anchor="middle" x="6507.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Falcon: Scaling IO Performance in Multi&#45;</text>
<text text-anchor="middle" x="6507.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SSD Volumes</text>
</g>
<!-- 5&#45;&gt;Falcon: Scaling IO Performance in Multi&#45;
SSD Volumes -->
<g id="edge22" class="edge">
<title>5&#45;&gt;Falcon: Scaling IO Performance in Multi&#45;
SSD Volumes</title>
<path fill="none" stroke="#000000" d="M7071.9497,-974.0433C6985.9788,-967.4015 6723.0451,-945.3576 6693.022,-922.0672 6553.7679,-814.0411 6518.3242,-585.0168 6509.6819,-496.7552"/>
<polygon fill="#000000" stroke="#000000" points="6513.1589,-496.3435 6508.7557,-486.707 6506.1885,-496.9861 6513.1589,-496.3435"/>
</g>
<!-- Pradeep Kumar and H. Howie Huang, The Ge
orge Washington University -->
<g id="node23" class="node">
<title>Pradeep Kumar and H. Howie Huang, The Ge
orge Washington University</title>
<ellipse fill="none" stroke="#000000" cx="6896.022" cy="-461.0336" rx="193.8937" ry="25.4118"/>
<text text-anchor="middle" x="6896.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Pradeep Kumar and H. Howie Huang, The Ge</text>
<text text-anchor="middle" x="6896.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">orge Washington University</text>
</g>
<!-- 5&#45;&gt;Pradeep Kumar and H. Howie Huang, The Ge
orge Washington University -->
<g id="edge23" class="edge">
<title>5&#45;&gt;Pradeep Kumar and H. Howie Huang, The Ge
orge Washington University</title>
<path fill="none" stroke="#000000" d="M7092.1515,-958.636C7063.0286,-884.7479 6949.4512,-596.5894 6909.7852,-495.9524"/>
<polygon fill="#000000" stroke="#000000" points="6912.9975,-494.5574 6906.0743,-486.5375 6906.4851,-497.1243 6912.9975,-494.5574"/>
</g>
<!-- With the high throughput offered by soli
d&#45;state drives (SSDs), multi&#45;SSD volumes
 have become an attractive storage solut
ion for big data applications. Unfortuna
tely, the IO stack in current operating 
systems imposes a number of volume&#45;level
 limitations, such as per&#45;volume based I
O processing in the block layer, single 
flush thread per volume for buffer cache
 management, locks for parallel IOs on a
 file, all of which lower the performanc
e that could otherwise be achieved on mu
lti&#45; SSD volumes. To address this proble
m, we propose a new design of per&#45;drive 
IO processing that separates two key fun
ctionalities of IO batching and IO servi
ng in the IO stack. Specifically, we des
ign and develop Falcon that consists of 
two major components: Falcon IO Manageme
nt Layer that batches the incoming IOs a
t the volume level, and Falcon Block Lay
er that parallelizes IO serving on the S
SD level in a new block layer. Compared 
to the current practice, Falcon signific
antly speeds up direct random file read 
and write on an 8&#45;SSD volume by 1.77× a
nd 1.59× respectively, and also shows s
trong scalability across different numbe
rs of drives and various storage control
lers. In addition, Falcon improves the p
erformance of a variety of applications 
by 1.69×. -->
<g id="node24" class="node">
<title>With the high throughput offered by soli
d&#45;state drives (SSDs), multi&#45;SSD volumes
 have become an attractive storage solut
ion for big data applications. Unfortuna
tely, the IO stack in current operating 
systems imposes a number of volume&#45;level
 limitations, such as per&#45;volume based I
O processing in the block layer, single 
flush thread per volume for buffer cache
 management, locks for parallel IOs on a
 file, all of which lower the performanc
e that could otherwise be achieved on mu
lti&#45; SSD volumes. To address this proble
m, we propose a new design of per&#45;drive 
IO processing that separates two key fun
ctionalities of IO batching and IO servi
ng in the IO stack. Specifically, we des
ign and develop Falcon that consists of 
two major components: Falcon IO Manageme
nt Layer that batches the incoming IOs a
t the volume level, and Falcon Block Lay
er that parallelizes IO serving on the S
SD level in a new block layer. Compared 
to the current practice, Falcon signific
antly speeds up direct random file read 
and write on an 8&#45;SSD volume by 1.77× a
nd 1.59× respectively, and also shows s
trong scalability across different numbe
rs of drives and various storage control
lers. In addition, Falcon improves the p
erformance of a variety of applications 
by 1.69×.</title>
<ellipse fill="none" stroke="#000000" cx="7302.022" cy="-461.0336" rx="193.6686" ry="322.3814"/>
<text text-anchor="middle" x="7302.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">With the high throughput offered by soli</text>
<text text-anchor="middle" x="7302.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d&#45;state drives (SSDs), multi&#45;SSD volumes</text>
<text text-anchor="middle" x="7302.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> have become an attractive storage solut</text>
<text text-anchor="middle" x="7302.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ion for big data applications. Unfortuna</text>
<text text-anchor="middle" x="7302.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tely, the IO stack in current operating </text>
<text text-anchor="middle" x="7302.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">systems imposes a number of volume&#45;level</text>
<text text-anchor="middle" x="7302.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> limitations, such as per&#45;volume based I</text>
<text text-anchor="middle" x="7302.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">O processing in the block layer, single </text>
<text text-anchor="middle" x="7302.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">flush thread per volume for buffer cache</text>
<text text-anchor="middle" x="7302.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> management, locks for parallel IOs on a</text>
<text text-anchor="middle" x="7302.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> file, all of which lower the performanc</text>
<text text-anchor="middle" x="7302.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e that could otherwise be achieved on mu</text>
<text text-anchor="middle" x="7302.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lti&#45; SSD volumes. To address this proble</text>
<text text-anchor="middle" x="7302.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m, we propose a new design of per&#45;drive </text>
<text text-anchor="middle" x="7302.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">IO processing that separates two key fun</text>
<text text-anchor="middle" x="7302.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ctionalities of IO batching and IO servi</text>
<text text-anchor="middle" x="7302.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng in the IO stack. Specifically, we des</text>
<text text-anchor="middle" x="7302.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ign and develop Falcon that consists of </text>
<text text-anchor="middle" x="7302.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">two major components: Falcon IO Manageme</text>
<text text-anchor="middle" x="7302.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nt Layer that batches the incoming IOs a</text>
<text text-anchor="middle" x="7302.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t the volume level, and Falcon Block Lay</text>
<text text-anchor="middle" x="7302.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er that parallelizes IO serving on the S</text>
<text text-anchor="middle" x="7302.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SD level in a new block layer. Compared </text>
<text text-anchor="middle" x="7302.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to the current practice, Falcon signific</text>
<text text-anchor="middle" x="7302.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">antly speeds up direct random file read </text>
<text text-anchor="middle" x="7302.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and write on an 8&#45;SSD volume by 1.77× a</text>
<text text-anchor="middle" x="7302.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd 1.59× respectively, and also shows s</text>
<text text-anchor="middle" x="7302.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">trong scalability across different numbe</text>
<text text-anchor="middle" x="7302.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rs of drives and various storage control</text>
<text text-anchor="middle" x="7302.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lers. In addition, Falcon improves the p</text>
<text text-anchor="middle" x="7302.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erformance of a variety of applications </text>
<text text-anchor="middle" x="7302.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">by 1.69×.</text>
</g>
<!-- 5&#45;&gt;With the high throughput offered by soli
d&#45;state drives (SSDs), multi&#45;SSD volumes
 have become an attractive storage solut
ion for big data applications. Unfortuna
tely, the IO stack in current operating 
systems imposes a number of volume&#45;level
 limitations, such as per&#45;volume based I
O processing in the block layer, single 
flush thread per volume for buffer cache
 management, locks for parallel IOs on a
 file, all of which lower the performanc
e that could otherwise be achieved on mu
lti&#45; SSD volumes. To address this proble
m, we propose a new design of per&#45;drive 
IO processing that separates two key fun
ctionalities of IO batching and IO servi
ng in the IO stack. Specifically, we des
ign and develop Falcon that consists of 
two major components: Falcon IO Manageme
nt Layer that batches the incoming IOs a
t the volume level, and Falcon Block Lay
er that parallelizes IO serving on the S
SD level in a new block layer. Compared 
to the current practice, Falcon signific
antly speeds up direct random file read 
and write on an 8&#45;SSD volume by 1.77× a
nd 1.59× respectively, and also shows s
trong scalability across different numbe
rs of drives and various storage control
lers. In addition, Falcon improves the p
erformance of a variety of applications 
by 1.69×. -->
<g id="edge24" class="edge">
<title>5&#45;&gt;With the high throughput offered by soli
d&#45;state drives (SSDs), multi&#45;SSD volumes
 have become an attractive storage solut
ion for big data applications. Unfortuna
tely, the IO stack in current operating 
systems imposes a number of volume&#45;level
 limitations, such as per&#45;volume based I
O processing in the block layer, single 
flush thread per volume for buffer cache
 management, locks for parallel IOs on a
 file, all of which lower the performanc
e that could otherwise be achieved on mu
lti&#45; SSD volumes. To address this proble
m, we propose a new design of per&#45;drive 
IO processing that separates two key fun
ctionalities of IO batching and IO servi
ng in the IO stack. Specifically, we des
ign and develop Falcon that consists of 
two major components: Falcon IO Manageme
nt Layer that batches the incoming IOs a
t the volume level, and Falcon Block Lay
er that parallelizes IO serving on the S
SD level in a new block layer. Compared 
to the current practice, Falcon signific
antly speeds up direct random file read 
and write on an 8&#45;SSD volume by 1.77× a
nd 1.59× respectively, and also shows s
trong scalability across different numbe
rs of drives and various storage control
lers. In addition, Falcon improves the p
erformance of a variety of applications 
by 1.69×.</title>
<path fill="none" stroke="#000000" d="M7105.8925,-958.636C7120.3053,-922.069 7155.403,-833.0222 7191.9898,-740.1975"/>
<polygon fill="#000000" stroke="#000000" points="7195.353,-741.2093 7195.7638,-730.6224 7188.8406,-738.6424 7195.353,-741.2093"/>
</g>
<!-- deTector: a Topology&#45;aware Monitoring Sy
stem for Data Center Networks -->
<g id="node26" class="node">
<title>deTector: a Topology&#45;aware Monitoring Sy
stem for Data Center Networks</title>
<ellipse fill="none" stroke="#000000" cx="7697.022" cy="-461.0336" rx="182.9002" ry="25.4118"/>
<text text-anchor="middle" x="7697.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">deTector: a Topology&#45;aware Monitoring Sy</text>
<text text-anchor="middle" x="7697.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stem for Data Center Networks</text>
</g>
<!-- 6&#45;&gt;deTector: a Topology&#45;aware Monitoring Sy
stem for Data Center Networks -->
<g id="edge26" class="edge">
<title>6&#45;&gt;deTector: a Topology&#45;aware Monitoring Sy
stem for Data Center Networks</title>
<path fill="none" stroke="#000000" d="M8252.7715,-975.729C8173.6904,-974.2301 7946.1444,-966.1 7889.022,-922.0672 7748.7984,-813.9759 7710.1143,-584.9904 7700.2004,-496.7472"/>
<polygon fill="#000000" stroke="#000000" points="7703.6698,-496.2736 7699.1291,-486.7011 7696.7093,-497.0159 7703.6698,-496.2736"/>
</g>
<!-- Yanghua Peng, The University of Hong Kon
g; Ji Yang, Xi&#39;an Jiaotong University; C
huan Wu, The University of Hong Kong; Ch
uanxiong Guo, Microsoft Research; Chengc
hen Hu, Xi&#39;an Jiaotong University; Zongp
eng Li, University of Calgary -->
<g id="node27" class="node">
<title>Yanghua Peng, The University of Hong Kon
g; Ji Yang, Xi&#39;an Jiaotong University; C
huan Wu, The University of Hong Kong; Ch
uanxiong Guo, Microsoft Research; Chengc
hen Hu, Xi&#39;an Jiaotong University; Zongp
eng Li, University of Calgary</title>
<ellipse fill="none" stroke="#000000" cx="8086.022" cy="-461.0336" rx="187.7777" ry="65.1077"/>
<text text-anchor="middle" x="8086.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Yanghua Peng, The University of Hong Kon</text>
<text text-anchor="middle" x="8086.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g; Ji Yang, Xi&#39;an Jiaotong University; C</text>
<text text-anchor="middle" x="8086.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">huan Wu, The University of Hong Kong; Ch</text>
<text text-anchor="middle" x="8086.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uanxiong Guo, Microsoft Research; Chengc</text>
<text text-anchor="middle" x="8086.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hen Hu, Xi&#39;an Jiaotong University; Zongp</text>
<text text-anchor="middle" x="8086.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eng Li, University of Calgary</text>
</g>
<!-- 6&#45;&gt;Yanghua Peng, The University of Hong Kon
g; Ji Yang, Xi&#39;an Jiaotong University; C
huan Wu, The University of Hong Kong; Ch
uanxiong Guo, Microsoft Research; Chengc
hen Hu, Xi&#39;an Jiaotong University; Zongp
eng Li, University of Calgary -->
<g id="edge27" class="edge">
<title>6&#45;&gt;Yanghua Peng, The University of Hong Kon
g; Ji Yang, Xi&#39;an Jiaotong University; C
huan Wu, The University of Hong Kong; Ch
uanxiong Guo, Microsoft Research; Chengc
hen Hu, Xi&#39;an Jiaotong University; Zongp
eng Li, University of Calgary</title>
<path fill="none" stroke="#000000" d="M8273.3441,-958.3386C8248.4339,-892.2069 8160.0184,-657.4803 8114.1267,-535.6463"/>
<polygon fill="#000000" stroke="#000000" points="8117.2943,-534.1264 8110.4939,-526.002 8110.7436,-536.5939 8117.2943,-534.1264"/>
</g>
<!-- Troubleshooting network performance issu
es is a challenging task especially in l
arge&#45;scale data center networks. This pa
per presents deTector, a network monitor
ing system that is able to detect and lo
calize network failures (manifested main
ly by packet losses) accurately in near 
real time while minimizing the monitorin
g overhead. deTector achieves this goal 
by tightly coupling detection and locali
zation and carefully selecting probe pat
hs so that packet losses can be localize
d only according to end&#45;to&#45;end observati
ons without the help of additional tools
 (e.g., tracert). In particular, we quan
tify the desirable properties of the mat
rix of probe paths, i.e., coverage and i
dentifiability, and leverage an efficien
t greedy algorithm with a good approxima
tion ratio and fast speed to select prob
e paths. We also propose a loss localiza
tion method according to loss patterns i
n a data center network. Our algorithm a
nalysis, experimental evaluation on a Fa
ttree testbed and supplementary large&#45;sc
ale simulation validate the scalability,
 feasibility and effectiveness of deTect
or. -->
<g id="node28" class="node">
<title>Troubleshooting network performance issu
es is a challenging task especially in l
arge&#45;scale data center networks. This pa
per presents deTector, a network monitor
ing system that is able to detect and lo
calize network failures (manifested main
ly by packet losses) accurately in near 
real time while minimizing the monitorin
g overhead. deTector achieves this goal 
by tightly coupling detection and locali
zation and carefully selecting probe pat
hs so that packet losses can be localize
d only according to end&#45;to&#45;end observati
ons without the help of additional tools
 (e.g., tracert). In particular, we quan
tify the desirable properties of the mat
rix of probe paths, i.e., coverage and i
dentifiability, and leverage an efficien
t greedy algorithm with a good approxima
tion ratio and fast speed to select prob
e paths. We also propose a loss localiza
tion method according to loss patterns i
n a data center network. Our algorithm a
nalysis, experimental evaluation on a Fa
ttree testbed and supplementary large&#45;sc
ale simulation validate the scalability,
 feasibility and effectiveness of deTect
or.</title>
<ellipse fill="none" stroke="#000000" cx="8473.022" cy="-461.0336" rx="181.8868" ry="282.6855"/>
<text text-anchor="middle" x="8473.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Troubleshooting network performance issu</text>
<text text-anchor="middle" x="8473.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es is a challenging task especially in l</text>
<text text-anchor="middle" x="8473.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">arge&#45;scale data center networks. This pa</text>
<text text-anchor="middle" x="8473.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">per presents deTector, a network monitor</text>
<text text-anchor="middle" x="8473.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing system that is able to detect and lo</text>
<text text-anchor="middle" x="8473.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">calize network failures (manifested main</text>
<text text-anchor="middle" x="8473.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ly by packet losses) accurately in near </text>
<text text-anchor="middle" x="8473.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">real time while minimizing the monitorin</text>
<text text-anchor="middle" x="8473.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g overhead. deTector achieves this goal </text>
<text text-anchor="middle" x="8473.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">by tightly coupling detection and locali</text>
<text text-anchor="middle" x="8473.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">zation and carefully selecting probe pat</text>
<text text-anchor="middle" x="8473.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hs so that packet losses can be localize</text>
<text text-anchor="middle" x="8473.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d only according to end&#45;to&#45;end observati</text>
<text text-anchor="middle" x="8473.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ons without the help of additional tools</text>
<text text-anchor="middle" x="8473.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> (e.g., tracert). In particular, we quan</text>
<text text-anchor="middle" x="8473.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tify the desirable properties of the mat</text>
<text text-anchor="middle" x="8473.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rix of probe paths, i.e., coverage and i</text>
<text text-anchor="middle" x="8473.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">dentifiability, and leverage an efficien</text>
<text text-anchor="middle" x="8473.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t greedy algorithm with a good approxima</text>
<text text-anchor="middle" x="8473.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion ratio and fast speed to select prob</text>
<text text-anchor="middle" x="8473.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e paths. We also propose a loss localiza</text>
<text text-anchor="middle" x="8473.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion method according to loss patterns i</text>
<text text-anchor="middle" x="8473.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n a data center network. Our algorithm a</text>
<text text-anchor="middle" x="8473.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nalysis, experimental evaluation on a Fa</text>
<text text-anchor="middle" x="8473.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ttree testbed and supplementary large&#45;sc</text>
<text text-anchor="middle" x="8473.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ale simulation validate the scalability,</text>
<text text-anchor="middle" x="8473.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> feasibility and effectiveness of deTect</text>
<text text-anchor="middle" x="8473.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">or.</text>
</g>
<!-- 6&#45;&gt;Troubleshooting network performance issu
es is a challenging task especially in l
arge&#45;scale data center networks. This pa
per presents deTector, a network monitor
ing system that is able to detect and lo
calize network failures (manifested main
ly by packet losses) accurately in near 
real time while minimizing the monitorin
g overhead. deTector achieves this goal 
by tightly coupling detection and locali
zation and carefully selecting probe pat
hs so that packet losses can be localize
d only according to end&#45;to&#45;end observati
ons without the help of additional tools
 (e.g., tracert). In particular, we quan
tify the desirable properties of the mat
rix of probe paths, i.e., coverage and i
dentifiability, and leverage an efficien
t greedy algorithm with a good approxima
tion ratio and fast speed to select prob
e paths. We also propose a loss localiza
tion method according to loss patterns i
n a data center network. Our algorithm a
nalysis, experimental evaluation on a Fa
ttree testbed and supplementary large&#45;sc
ale simulation validate the scalability,
 feasibility and effectiveness of deTect
or. -->
<g id="edge28" class="edge">
<title>6&#45;&gt;Troubleshooting network performance issu
es is a challenging task especially in l
arge&#45;scale data center networks. This pa
per presents deTector, a network monitor
ing system that is able to detect and lo
calize network failures (manifested main
ly by packet losses) accurately in near 
real time while minimizing the monitorin
g overhead. deTector achieves this goal 
by tightly coupling detection and locali
zation and carefully selecting probe pat
hs so that packet losses can be localize
d only according to end&#45;to&#45;end observati
ons without the help of additional tools
 (e.g., tracert). In particular, we quan
tify the desirable properties of the mat
rix of probe paths, i.e., coverage and i
dentifiability, and leverage an efficien
t greedy algorithm with a good approxima
tion ratio and fast speed to select prob
e paths. We also propose a loss localiza
tion method according to loss patterns i
n a data center network. Our algorithm a
nalysis, experimental evaluation on a Fa
ttree testbed and supplementary large&#45;sc
ale simulation validate the scalability,
 feasibility and effectiveness of deTect
or.</title>
<path fill="none" stroke="#000000" d="M8286.6655,-958.3386C8301.6902,-918.2442 8339.9377,-816.178 8377.9007,-714.8712"/>
<polygon fill="#000000" stroke="#000000" points="8381.223,-715.9797 8381.4546,-705.3874 8374.6681,-713.5233 8381.223,-715.9797"/>
</g>
<!-- Pricing Intra&#45;Datacenter Networks with O
ver&#45;Committed Bandwidth Guarantee -->
<g id="node30" class="node">
<title>Pricing Intra&#45;Datacenter Networks with O
ver&#45;Committed Bandwidth Guarantee</title>
<ellipse fill="none" stroke="#000000" cx="8851.022" cy="-461.0336" rx="177.7977" ry="25.4118"/>
<text text-anchor="middle" x="8851.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Pricing Intra&#45;Datacenter Networks with O</text>
<text text-anchor="middle" x="8851.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ver&#45;Committed Bandwidth Guarantee</text>
</g>
<!-- 7&#45;&gt;Pricing Intra&#45;Datacenter Networks with O
ver&#45;Committed Bandwidth Guarantee -->
<g id="edge30" class="edge">
<title>7&#45;&gt;Pricing Intra&#45;Datacenter Networks with O
ver&#45;Committed Bandwidth Guarantee</title>
<path fill="none" stroke="#000000" d="M9401.7521,-975.7541C9322.6176,-974.3241 9094.9395,-966.3646 9038.022,-922.0672 8898.8331,-813.7405 8862.7143,-584.8952 8853.7962,-496.7183"/>
<polygon fill="#000000" stroke="#000000" points="8857.2725,-496.3022 8852.8384,-486.6799 8850.3041,-496.9672 8857.2725,-496.3022"/>
</g>
<!-- Jian Guo, Fangming Liu, and Tao Wang, Ke
y Laboratory of Services Computing Techn
ology and System, Ministry of Education,
 School of Computer Science and Technolo
gy, Huazhong University of Science and T
echnology; John C.S. Lui, The Chinese Un
iversity of Hong Kong -->
<g id="node31" class="node">
<title>Jian Guo, Fangming Liu, and Tao Wang, Ke
y Laboratory of Services Computing Techn
ology and System, Ministry of Education,
 School of Computer Science and Technolo
gy, Huazhong University of Science and T
echnology; John C.S. Lui, The Chinese Un
iversity of Hong Kong</title>
<ellipse fill="none" stroke="#000000" cx="9233.022" cy="-461.0336" rx="185.981" ry="74.9067"/>
<text text-anchor="middle" x="9233.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Jian Guo, Fangming Liu, and Tao Wang, Ke</text>
<text text-anchor="middle" x="9233.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y Laboratory of Services Computing Techn</text>
<text text-anchor="middle" x="9233.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ology and System, Ministry of Education,</text>
<text text-anchor="middle" x="9233.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> School of Computer Science and Technolo</text>
<text text-anchor="middle" x="9233.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gy, Huazhong University of Science and T</text>
<text text-anchor="middle" x="9233.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">echnology; John C.S. Lui, The Chinese Un</text>
<text text-anchor="middle" x="9233.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iversity of Hong Kong</text>
</g>
<!-- 7&#45;&gt;Jian Guo, Fangming Liu, and Tao Wang, Ke
y Laboratory of Services Computing Techn
ology and System, Ministry of Education,
 School of Computer Science and Technolo
gy, Huazhong University of Science and T
echnology; John C.S. Lui, The Chinese Un
iversity of Hong Kong -->
<g id="edge31" class="edge">
<title>7&#45;&gt;Jian Guo, Fangming Liu, and Tao Wang, Ke
y Laboratory of Services Computing Techn
ology and System, Ministry of Education,
 School of Computer Science and Technolo
gy, Huazhong University of Science and T
echnology; John C.S. Lui, The Chinese Un
iversity of Hong Kong</title>
<path fill="none" stroke="#000000" d="M9422.2752,-958.3386C9397.7391,-893.8645 9312.2189,-669.1411 9264.9821,-545.0159"/>
<polygon fill="#000000" stroke="#000000" points="9268.1979,-543.6254 9261.3699,-535.5241 9261.6556,-546.1151 9268.1979,-543.6254"/>
</g>
<!-- Current IaaS clouds provide performance 
guarantee on CPU and memory but no quant
itative network performance for VM insta
nces. Our measurements from three produc
tion IaaS clouds show that for the VMs w
ith same CPU and memory, or similar pric
ing, the difference in bandwidth perform
ance can be as much as 16×, which revea
ls a severe price&#45;performance anomaly du
e to a lack of pricing for bandwidth gua
rantee. Considering the low network util
ization in cloud&#45;scale datacenters, we a
ddress this by presenting SoftBW, a syst
em that enables pricing bandwidth with o
ver commitment on bandwidth guarantee. S
oftBW leverages usage&#45;based charging to 
guarantee price&#45;performance consistency 
among tenants, and implements a fulfillm
ent based scheduling to provide bandwidt
h/fairness guarantee under bandwidth ove
r commitment. Both testbed experiments a
nd large&#45;scale simulation results valida
te SoftBW’s ability of providing effic
ient bandwidth guarantee, and show that 
by using bandwidth over commitment, Soft
BW increases 3.9× network utilization w
hile incurring less than 5% guarantee fa
ilure. -->
<g id="node32" class="node">
<title>Current IaaS clouds provide performance 
guarantee on CPU and memory but no quant
itative network performance for VM insta
nces. Our measurements from three produc
tion IaaS clouds show that for the VMs w
ith same CPU and memory, or similar pric
ing, the difference in bandwidth perform
ance can be as much as 16×, which revea
ls a severe price&#45;performance anomaly du
e to a lack of pricing for bandwidth gua
rantee. Considering the low network util
ization in cloud&#45;scale datacenters, we a
ddress this by presenting SoftBW, a syst
em that enables pricing bandwidth with o
ver commitment on bandwidth guarantee. S
oftBW leverages usage&#45;based charging to 
guarantee price&#45;performance consistency 
among tenants, and implements a fulfillm
ent based scheduling to provide bandwidt
h/fairness guarantee under bandwidth ove
r commitment. Both testbed experiments a
nd large&#45;scale simulation results valida
te SoftBW’s ability of providing effic
ient bandwidth guarantee, and show that 
by using bandwidth over commitment, Soft
BW increases 3.9× network utilization w
hile incurring less than 5% guarantee fa
ilure.</title>
<ellipse fill="none" stroke="#000000" cx="9625.022" cy="-461.0336" rx="188.1864" ry="282.6855"/>
<text text-anchor="middle" x="9625.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Current IaaS clouds provide performance </text>
<text text-anchor="middle" x="9625.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">guarantee on CPU and memory but no quant</text>
<text text-anchor="middle" x="9625.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">itative network performance for VM insta</text>
<text text-anchor="middle" x="9625.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nces. Our measurements from three produc</text>
<text text-anchor="middle" x="9625.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion IaaS clouds show that for the VMs w</text>
<text text-anchor="middle" x="9625.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ith same CPU and memory, or similar pric</text>
<text text-anchor="middle" x="9625.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing, the difference in bandwidth perform</text>
<text text-anchor="middle" x="9625.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ance can be as much as 16×, which revea</text>
<text text-anchor="middle" x="9625.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ls a severe price&#45;performance anomaly du</text>
<text text-anchor="middle" x="9625.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e to a lack of pricing for bandwidth gua</text>
<text text-anchor="middle" x="9625.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rantee. Considering the low network util</text>
<text text-anchor="middle" x="9625.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ization in cloud&#45;scale datacenters, we a</text>
<text text-anchor="middle" x="9625.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ddress this by presenting SoftBW, a syst</text>
<text text-anchor="middle" x="9625.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">em that enables pricing bandwidth with o</text>
<text text-anchor="middle" x="9625.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ver commitment on bandwidth guarantee. S</text>
<text text-anchor="middle" x="9625.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oftBW leverages usage&#45;based charging to </text>
<text text-anchor="middle" x="9625.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">guarantee price&#45;performance consistency </text>
<text text-anchor="middle" x="9625.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">among tenants, and implements a fulfillm</text>
<text text-anchor="middle" x="9625.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ent based scheduling to provide bandwidt</text>
<text text-anchor="middle" x="9625.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h/fairness guarantee under bandwidth ove</text>
<text text-anchor="middle" x="9625.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r commitment. Both testbed experiments a</text>
<text text-anchor="middle" x="9625.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd large&#45;scale simulation results valida</text>
<text text-anchor="middle" x="9625.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">te SoftBW’s ability of providing effic</text>
<text text-anchor="middle" x="9625.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ient bandwidth guarantee, and show that </text>
<text text-anchor="middle" x="9625.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">by using bandwidth over commitment, Soft</text>
<text text-anchor="middle" x="9625.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">BW increases 3.9× network utilization w</text>
<text text-anchor="middle" x="9625.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hile incurring less than 5% guarantee fa</text>
<text text-anchor="middle" x="9625.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ilure.</text>
</g>
<!-- 7&#45;&gt;Current IaaS clouds provide performance 
guarantee on CPU and memory but no quant
itative network performance for VM insta
nces. Our measurements from three produc
tion IaaS clouds show that for the VMs w
ith same CPU and memory, or similar pric
ing, the difference in bandwidth perform
ance can be as much as 16×, which revea
ls a severe price&#45;performance anomaly du
e to a lack of pricing for bandwidth gua
rantee. Considering the low network util
ization in cloud&#45;scale datacenters, we a
ddress this by presenting SoftBW, a syst
em that enables pricing bandwidth with o
ver commitment on bandwidth guarantee. S
oftBW leverages usage&#45;based charging to 
guarantee price&#45;performance consistency 
among tenants, and implements a fulfillm
ent based scheduling to provide bandwidt
h/fairness guarantee under bandwidth ove
r commitment. Both testbed experiments a
nd large&#45;scale simulation results valida
te SoftBW’s ability of providing effic
ient bandwidth guarantee, and show that 
by using bandwidth over commitment, Soft
BW increases 3.9× network utilization w
hile incurring less than 5% guarantee fa
ilure. -->
<g id="edge32" class="edge">
<title>7&#45;&gt;Current IaaS clouds provide performance 
guarantee on CPU and memory but no quant
itative network performance for VM insta
nces. Our measurements from three produc
tion IaaS clouds show that for the VMs w
ith same CPU and memory, or similar pric
ing, the difference in bandwidth perform
ance can be as much as 16×, which revea
ls a severe price&#45;performance anomaly du
e to a lack of pricing for bandwidth gua
rantee. Considering the low network util
ization in cloud&#45;scale datacenters, we a
ddress this by presenting SoftBW, a syst
em that enables pricing bandwidth with o
ver commitment on bandwidth guarantee. S
oftBW leverages usage&#45;based charging to 
guarantee price&#45;performance consistency 
among tenants, and implements a fulfillm
ent based scheduling to provide bandwidt
h/fairness guarantee under bandwidth ove
r commitment. Both testbed experiments a
nd large&#45;scale simulation results valida
te SoftBW’s ability of providing effic
ient bandwidth guarantee, and show that 
by using bandwidth over commitment, Soft
BW increases 3.9× network utilization w
hile incurring less than 5% guarantee fa
ilure.</title>
<path fill="none" stroke="#000000" d="M9435.7688,-958.3386C9450.9617,-918.4157 9489.5372,-817.0502 9527.9273,-716.1714"/>
<polygon fill="#000000" stroke="#000000" points="9531.2359,-717.3179 9531.5215,-706.7269 9524.6936,-714.8281 9531.2359,-717.3179"/>
</g>
<!-- Unobtrusive Deferred Update Stabilizatio
n for Efficient Geo&#45;Replication -->
<g id="node34" class="node">
<title>Unobtrusive Deferred Update Stabilizatio
n for Efficient Geo&#45;Replication</title>
<ellipse fill="none" stroke="#000000" cx="10008.022" cy="-461.0336" rx="176.5521" ry="25.4118"/>
<text text-anchor="middle" x="10008.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Unobtrusive Deferred Update Stabilizatio</text>
<text text-anchor="middle" x="10008.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n for Efficient Geo&#45;Replication</text>
</g>
<!-- 8&#45;&gt;Unobtrusive Deferred Update Stabilizatio
n for Efficient Geo&#45;Replication -->
<g id="edge34" class="edge">
<title>8&#45;&gt;Unobtrusive Deferred Update Stabilizatio
n for Efficient Geo&#45;Replication</title>
<path fill="none" stroke="#000000" d="M10559.9316,-973.9164C10475.8045,-967.0226 10222.9501,-944.6084 10194.022,-922.0672 10055.0016,-813.7405 10019.4187,-584.8952 10010.7106,-496.7183"/>
<polygon fill="#000000" stroke="#000000" points="10014.1881,-496.3127 10009.7768,-486.6799 10007.2182,-496.9611 10014.1881,-496.3127"/>
</g>
<!-- Chathuri Gunawardhana, Manuel Bravo, and
 Luis Rodrigues, University of Lisbon -->
<g id="node35" class="node">
<title>Chathuri Gunawardhana, Manuel Bravo, and
 Luis Rodrigues, University of Lisbon</title>
<ellipse fill="none" stroke="#000000" cx="10392.022" cy="-461.0336" rx="189.4029" ry="25.4118"/>
<text text-anchor="middle" x="10392.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Chathuri Gunawardhana, Manuel Bravo, and</text>
<text text-anchor="middle" x="10392.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Luis Rodrigues, University of Lisbon</text>
</g>
<!-- 8&#45;&gt;Chathuri Gunawardhana, Manuel Bravo, and
 Luis Rodrigues, University of Lisbon -->
<g id="edge35" class="edge">
<title>8&#45;&gt;Chathuri Gunawardhana, Manuel Bravo, and
 Luis Rodrigues, University of Lisbon</title>
<path fill="none" stroke="#000000" d="M10580.3096,-958.3386C10552.1488,-883.9602 10443.2426,-596.3173 10405.2155,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="10408.4722,-494.5971 10401.658,-486.4843 10401.9257,-497.0757 10408.4722,-494.5971"/>
</g>
<!-- In this paper, we propose a novel approa
ch to manage the throughput vs visibilit
y latency tradeoff that emerges when enf
orcing causal consistency in geo&#45;replica
ted systems. Our approach consists in al
lowing full concurrency when processing 
local updates and using a deferred local
 serialisation procedure before shipping
 updates to remote datacenters. This str
ategy allows to implement inexpensive me
chanisms to ensure system consistency re
quirements while avoiding intrusive effe
cts on update operations, a major perfor
mance limitation of previous systems. We
 have implemented our approach as a vari
ant of Riak KV. Our evaluation shows tha
t we outperform sequencer&#45;based approach
es by almost an order of magnitude in th
e maximum achievable throughput. Further
more, unlike previous sequencer&#45;free sol
utions, our approach reaches nearly opti
mal remote update visibility latencies w
ithout limiting throughput. -->
<g id="node36" class="node">
<title>In this paper, we propose a novel approa
ch to manage the throughput vs visibilit
y latency tradeoff that emerges when enf
orcing causal consistency in geo&#45;replica
ted systems. Our approach consists in al
lowing full concurrency when processing 
local updates and using a deferred local
 serialisation procedure before shipping
 updates to remote datacenters. This str
ategy allows to implement inexpensive me
chanisms to ensure system consistency re
quirements while avoiding intrusive effe
cts on update operations, a major perfor
mance limitation of previous systems. We
 have implemented our approach as a vari
ant of Riak KV. Our evaluation shows tha
t we outperform sequencer&#45;based approach
es by almost an order of magnitude in th
e maximum achievable throughput. Further
more, unlike previous sequencer&#45;free sol
utions, our approach reaches nearly opti
mal remote update visibility latencies w
ithout limiting throughput.</title>
<ellipse fill="none" stroke="#000000" cx="10783.022" cy="-461.0336" rx="183.2676" ry="233.1906"/>
<text text-anchor="middle" x="10783.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">In this paper, we propose a novel approa</text>
<text text-anchor="middle" x="10783.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ch to manage the throughput vs visibilit</text>
<text text-anchor="middle" x="10783.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y latency tradeoff that emerges when enf</text>
<text text-anchor="middle" x="10783.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">orcing causal consistency in geo&#45;replica</text>
<text text-anchor="middle" x="10783.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ted systems. Our approach consists in al</text>
<text text-anchor="middle" x="10783.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lowing full concurrency when processing </text>
<text text-anchor="middle" x="10783.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">local updates and using a deferred local</text>
<text text-anchor="middle" x="10783.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> serialisation procedure before shipping</text>
<text text-anchor="middle" x="10783.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> updates to remote datacenters. This str</text>
<text text-anchor="middle" x="10783.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ategy allows to implement inexpensive me</text>
<text text-anchor="middle" x="10783.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">chanisms to ensure system consistency re</text>
<text text-anchor="middle" x="10783.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">quirements while avoiding intrusive effe</text>
<text text-anchor="middle" x="10783.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cts on update operations, a major perfor</text>
<text text-anchor="middle" x="10783.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mance limitation of previous systems. We</text>
<text text-anchor="middle" x="10783.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> have implemented our approach as a vari</text>
<text text-anchor="middle" x="10783.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ant of Riak KV. Our evaluation shows tha</text>
<text text-anchor="middle" x="10783.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t we outperform sequencer&#45;based approach</text>
<text text-anchor="middle" x="10783.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es by almost an order of magnitude in th</text>
<text text-anchor="middle" x="10783.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e maximum achievable throughput. Further</text>
<text text-anchor="middle" x="10783.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">more, unlike previous sequencer&#45;free sol</text>
<text text-anchor="middle" x="10783.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">utions, our approach reaches nearly opti</text>
<text text-anchor="middle" x="10783.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mal remote update visibility latencies w</text>
<text text-anchor="middle" x="10783.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ithout limiting throughput.</text>
</g>
<!-- 8&#45;&gt;In this paper, we propose a novel approa
ch to manage the throughput vs visibilit
y latency tradeoff that emerges when enf
orcing causal consistency in geo&#45;replica
ted systems. Our approach consists in al
lowing full concurrency when processing 
local updates and using a deferred local
 serialisation procedure before shipping
 updates to remote datacenters. This str
ategy allows to implement inexpensive me
chanisms to ensure system consistency re
quirements while avoiding intrusive effe
cts on update operations, a major perfor
mance limitation of previous systems. We
 have implemented our approach as a vari
ant of Riak KV. Our evaluation shows tha
t we outperform sequencer&#45;based approach
es by almost an order of magnitude in th
e maximum achievable throughput. Further
more, unlike previous sequencer&#45;free sol
utions, our approach reaches nearly opti
mal remote update visibility latencies w
ithout limiting throughput. -->
<g id="edge36" class="edge">
<title>8&#45;&gt;In this paper, we propose a novel approa
ch to manage the throughput vs visibilit
y latency tradeoff that emerges when enf
orcing causal consistency in geo&#45;replica
ted systems. Our approach consists in al
lowing full concurrency when processing 
local updates and using a deferred local
 serialisation procedure before shipping
 updates to remote datacenters. This str
ategy allows to implement inexpensive me
chanisms to ensure system consistency re
quirements while avoiding intrusive effe
cts on update operations, a major perfor
mance limitation of previous systems. We
 have implemented our approach as a vari
ant of Riak KV. Our evaluation shows tha
t we outperform sequencer&#45;based approach
es by almost an order of magnitude in th
e maximum achievable throughput. Further
more, unlike previous sequencer&#45;free sol
utions, our approach reaches nearly opti
mal remote update visibility latencies w
ithout limiting throughput.</title>
<path fill="none" stroke="#000000" d="M10593.7688,-958.3386C10610.759,-913.6929 10656.9912,-792.2075 10699.505,-680.493"/>
<polygon fill="#000000" stroke="#000000" points="10702.7953,-681.6874 10703.081,-671.0964 10696.2531,-679.1976 10702.7953,-681.6874"/>
</g>
<!-- Don&#39;t cry over spilled records: Memory e
lasticity of data&#45;parallel applications 
and its application to cluster schedulin
g -->
<g id="node38" class="node">
<title>Don&#39;t cry over spilled records: Memory e
lasticity of data&#45;parallel applications 
and its application to cluster schedulin
g</title>
<ellipse fill="none" stroke="#000000" cx="11159.022" cy="-461.0336" rx="174.9851" ry="45.011"/>
<text text-anchor="middle" x="11159.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Don&#39;t cry over spilled records: Memory e</text>
<text text-anchor="middle" x="11159.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lasticity of data&#45;parallel applications </text>
<text text-anchor="middle" x="11159.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and its application to cluster schedulin</text>
<text text-anchor="middle" x="11159.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g</text>
</g>
<!-- 9&#45;&gt;Don&#39;t cry over spilled records: Memory e
lasticity of data&#45;parallel applications 
and its application to cluster schedulin
g -->
<g id="edge38" class="edge">
<title>9&#45;&gt;Don&#39;t cry over spilled records: Memory e
lasticity of data&#45;parallel applications 
and its application to cluster schedulin
g</title>
<path fill="none" stroke="#000000" d="M11706.995,-973.9189C11623.0654,-967.0325 11370.8108,-944.6379 11342.022,-922.0672 11213.0778,-820.9737 11174.7165,-615.4815 11163.5178,-516.6177"/>
<polygon fill="#000000" stroke="#000000" points="11166.9821,-516.0977 11162.4281,-506.5316 11160.0226,-516.8497 11166.9821,-516.0977"/>
</g>
<!-- Călin Iorgulescu and Florin Dinu, EPFL;
 Aunn Raza, NUST Pakistan; Wajih Ul Hass
an, UIUC; Willy Zwaenepoel, EPFL -->
<g id="node39" class="node">
<title>Călin Iorgulescu and Florin Dinu, EPFL;
 Aunn Raza, NUST Pakistan; Wajih Ul Hass
an, UIUC; Willy Zwaenepoel, EPFL</title>
<ellipse fill="none" stroke="#000000" cx="11538.022" cy="-461.0336" rx="186.9023" ry="35.2113"/>
<text text-anchor="middle" x="11538.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Călin Iorgulescu and Florin Dinu, EPFL;</text>
<text text-anchor="middle" x="11538.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Aunn Raza, NUST Pakistan; Wajih Ul Hass</text>
<text text-anchor="middle" x="11538.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">an, UIUC; Willy Zwaenepoel, EPFL</text>
</g>
<!-- 9&#45;&gt;Călin Iorgulescu and Florin Dinu, EPFL;
 Aunn Raza, NUST Pakistan; Wajih Ul Hass
an, UIUC; Willy Zwaenepoel, EPFL -->
<g id="edge39" class="edge">
<title>9&#45;&gt;Călin Iorgulescu and Florin Dinu, EPFL;
 Aunn Raza, NUST Pakistan; Wajih Ul Hass
an, UIUC; Willy Zwaenepoel, EPFL</title>
<path fill="none" stroke="#000000" d="M11727.2752,-958.3386C11699.8644,-886.3106 11596.3423,-614.2832 11555.1152,-505.9498"/>
<polygon fill="#000000" stroke="#000000" points="11558.3843,-504.6995 11551.5564,-496.5982 11551.842,-507.1892 11558.3843,-504.6995"/>
</g>
<!-- Understanding the performance of data&#45;pa
rallel workloads when resource&#45;constrain
ed has significant practical importance 
but unfortunately has received only limi
ted attention. This paper identifies, qu
antifies and demonstrates memory elastic
ity, an intrinsic property of data&#45;paral
lel tasks. Memory elasticity allows task
s to run with significantly less memory 
than they would ideally need while only 
paying a moderate performance penalty. F
or example, we find that given as little
 as 10% of ideal memory, PageRank and Nu
tchIndexing Hadoop reducers become only 
1.2x/1.75x and 1.08x slower. We show tha
t memory elasticity is prevalent in the 
Hadoop, Spark, Tez and Flink frameworks.
 We also show that memory elasticity is 
predictable in nature by building simple
 models for Hadoop and extending them to
 Tez and Spark.To demonstrate the potent
ial benefits of leveraging memory elasti
city, this paper further explores its ap
plication to cluster scheduling. In this
 setting, we observe that the resource v
s. time trade&#45;off enabled by memory elas
ticity becomes a task queuing time vs. t
ask runtime trade&#45;off. Tasks may complet
e faster when scheduled with less memory
 because their waiting time is reduced. 
We show that a scheduler can turn this t
ask&#45;level tradeoff into improved job com
pletion time and cluster&#45;wide memory uti
lization. We have integrated memory elas
ticity into Apache YARN. We show gains o
f up to 60% in average job completion ti
me on a 50&#45;node Hadoop cluster. Extensiv
e simulations show similar improvements 
over a large number of scenarios. -->
<g id="node40" class="node">
<title>Understanding the performance of data&#45;pa
rallel workloads when resource&#45;constrain
ed has significant practical importance 
but unfortunately has received only limi
ted attention. This paper identifies, qu
antifies and demonstrates memory elastic
ity, an intrinsic property of data&#45;paral
lel tasks. Memory elasticity allows task
s to run with significantly less memory 
than they would ideally need while only 
paying a moderate performance penalty. F
or example, we find that given as little
 as 10% of ideal memory, PageRank and Nu
tchIndexing Hadoop reducers become only 
1.2x/1.75x and 1.08x slower. We show tha
t memory elasticity is prevalent in the 
Hadoop, Spark, Tez and Flink frameworks.
 We also show that memory elasticity is 
predictable in nature by building simple
 models for Hadoop and extending them to
 Tez and Spark.To demonstrate the potent
ial benefits of leveraging memory elasti
city, this paper further explores its ap
plication to cluster scheduling. In this
 setting, we observe that the resource v
s. time trade&#45;off enabled by memory elas
ticity becomes a task queuing time vs. t
ask runtime trade&#45;off. Tasks may complet
e faster when scheduled with less memory
 because their waiting time is reduced. 
We show that a scheduler can turn this t
ask&#45;level tradeoff into improved job com
pletion time and cluster&#45;wide memory uti
lization. We have integrated memory elas
ticity into Apache YARN. We show gains o
f up to 60% in average job completion ti
me on a 50&#45;node Hadoop cluster. Extensiv
e simulations show similar improvements 
over a large number of scenarios.</title>
<ellipse fill="none" stroke="#000000" cx="11929.022" cy="-461.0336" rx="186.1868" ry="391.9745"/>
<text text-anchor="middle" x="11929.022" y="-722.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Understanding the performance of data&#45;pa</text>
<text text-anchor="middle" x="11929.022" y="-708.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rallel workloads when resource&#45;constrain</text>
<text text-anchor="middle" x="11929.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed has significant practical importance </text>
<text text-anchor="middle" x="11929.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">but unfortunately has received only limi</text>
<text text-anchor="middle" x="11929.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ted attention. This paper identifies, qu</text>
<text text-anchor="middle" x="11929.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">antifies and demonstrates memory elastic</text>
<text text-anchor="middle" x="11929.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ity, an intrinsic property of data&#45;paral</text>
<text text-anchor="middle" x="11929.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lel tasks. Memory elasticity allows task</text>
<text text-anchor="middle" x="11929.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s to run with significantly less memory </text>
<text text-anchor="middle" x="11929.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">than they would ideally need while only </text>
<text text-anchor="middle" x="11929.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">paying a moderate performance penalty. F</text>
<text text-anchor="middle" x="11929.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">or example, we find that given as little</text>
<text text-anchor="middle" x="11929.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> as 10% of ideal memory, PageRank and Nu</text>
<text text-anchor="middle" x="11929.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tchIndexing Hadoop reducers become only </text>
<text text-anchor="middle" x="11929.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">1.2x/1.75x and 1.08x slower. We show tha</text>
<text text-anchor="middle" x="11929.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t memory elasticity is prevalent in the </text>
<text text-anchor="middle" x="11929.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Hadoop, Spark, Tez and Flink frameworks.</text>
<text text-anchor="middle" x="11929.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> We also show that memory elasticity is </text>
<text text-anchor="middle" x="11929.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">predictable in nature by building simple</text>
<text text-anchor="middle" x="11929.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> models for Hadoop and extending them to</text>
<text text-anchor="middle" x="11929.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Tez and Spark.To demonstrate the potent</text>
<text text-anchor="middle" x="11929.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ial benefits of leveraging memory elasti</text>
<text text-anchor="middle" x="11929.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">city, this paper further explores its ap</text>
<text text-anchor="middle" x="11929.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">plication to cluster scheduling. In this</text>
<text text-anchor="middle" x="11929.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> setting, we observe that the resource v</text>
<text text-anchor="middle" x="11929.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s. time trade&#45;off enabled by memory elas</text>
<text text-anchor="middle" x="11929.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ticity becomes a task queuing time vs. t</text>
<text text-anchor="middle" x="11929.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ask runtime trade&#45;off. Tasks may complet</text>
<text text-anchor="middle" x="11929.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e faster when scheduled with less memory</text>
<text text-anchor="middle" x="11929.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> because their waiting time is reduced. </text>
<text text-anchor="middle" x="11929.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">We show that a scheduler can turn this t</text>
<text text-anchor="middle" x="11929.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ask&#45;level tradeoff into improved job com</text>
<text text-anchor="middle" x="11929.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pletion time and cluster&#45;wide memory uti</text>
<text text-anchor="middle" x="11929.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lization. We have integrated memory elas</text>
<text text-anchor="middle" x="11929.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ticity into Apache YARN. We show gains o</text>
<text text-anchor="middle" x="11929.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f up to 60% in average job completion ti</text>
<text text-anchor="middle" x="11929.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000">me on a 50&#45;node Hadoop cluster. Extensiv</text>
<text text-anchor="middle" x="11929.022" y="-204.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e simulations show similar improvements </text>
<text text-anchor="middle" x="11929.022" y="-190.8336" font-family="Times,serif" font-size="14.00" fill="#000000">over a large number of scenarios.</text>
</g>
<!-- 9&#45;&gt;Understanding the performance of data&#45;pa
rallel workloads when resource&#45;constrain
ed has significant practical importance 
but unfortunately has received only limi
ted attention. This paper identifies, qu
antifies and demonstrates memory elastic
ity, an intrinsic property of data&#45;paral
lel tasks. Memory elasticity allows task
s to run with significantly less memory 
than they would ideally need while only 
paying a moderate performance penalty. F
or example, we find that given as little
 as 10% of ideal memory, PageRank and Nu
tchIndexing Hadoop reducers become only 
1.2x/1.75x and 1.08x slower. We show tha
t memory elasticity is prevalent in the 
Hadoop, Spark, Tez and Flink frameworks.
 We also show that memory elasticity is 
predictable in nature by building simple
 models for Hadoop and extending them to
 Tez and Spark.To demonstrate the potent
ial benefits of leveraging memory elasti
city, this paper further explores its ap
plication to cluster scheduling. In this
 setting, we observe that the resource v
s. time trade&#45;off enabled by memory elas
ticity becomes a task queuing time vs. t
ask runtime trade&#45;off. Tasks may complet
e faster when scheduled with less memory
 because their waiting time is reduced. 
We show that a scheduler can turn this t
ask&#45;level tradeoff into improved job com
pletion time and cluster&#45;wide memory uti
lization. We have integrated memory elas
ticity into Apache YARN. We show gains o
f up to 60% in average job completion ti
me on a 50&#45;node Hadoop cluster. Extensiv
e simulations show similar improvements 
over a large number of scenarios. -->
<g id="edge40" class="edge">
<title>9&#45;&gt;Understanding the performance of data&#45;pa
rallel workloads when resource&#45;constrain
ed has significant practical importance 
but unfortunately has received only limi
ted attention. This paper identifies, qu
antifies and demonstrates memory elastic
ity, an intrinsic property of data&#45;paral
lel tasks. Memory elasticity allows task
s to run with significantly less memory 
than they would ideally need while only 
paying a moderate performance penalty. F
or example, we find that given as little
 as 10% of ideal memory, PageRank and Nu
tchIndexing Hadoop reducers become only 
1.2x/1.75x and 1.08x slower. We show tha
t memory elasticity is prevalent in the 
Hadoop, Spark, Tez and Flink frameworks.
 We also show that memory elasticity is 
predictable in nature by building simple
 models for Hadoop and extending them to
 Tez and Spark.To demonstrate the potent
ial benefits of leveraging memory elasti
city, this paper further explores its ap
plication to cluster scheduling. In this
 setting, we observe that the resource v
s. time trade&#45;off enabled by memory elas
ticity becomes a task queuing time vs. t
ask runtime trade&#45;off. Tasks may complet
e faster when scheduled with less memory
 because their waiting time is reduced. 
We show that a scheduler can turn this t
ask&#45;level tradeoff into improved job com
pletion time and cluster&#45;wide memory uti
lization. We have integrated memory elas
ticity into Apache YARN. We show gains o
f up to 60% in average job completion ti
me on a 50&#45;node Hadoop cluster. Extensiv
e simulations show similar improvements 
over a large number of scenarios.</title>
<path fill="none" stroke="#000000" d="M11740.7343,-958.3386C11752.7686,-926.5538 11779.5485,-855.8227 11809.2412,-777.3984"/>
<polygon fill="#000000" stroke="#000000" points="11812.6082,-778.3898 11812.8759,-767.7984 11806.0618,-775.9112 11812.6082,-778.3898"/>
</g>
<!-- Popularity Prediction of Facebook Videos
 for Higher Quality Streaming -->
<g id="node42" class="node">
<title>Popularity Prediction of Facebook Videos
 for Higher Quality Streaming</title>
<ellipse fill="none" stroke="#000000" cx="12311.022" cy="-461.0336" rx="177.3283" ry="25.4118"/>
<text text-anchor="middle" x="12311.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Popularity Prediction of Facebook Videos</text>
<text text-anchor="middle" x="12311.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> for Higher Quality Streaming</text>
</g>
<!-- 10&#45;&gt;Popularity Prediction of Facebook Videos
 for Higher Quality Streaming -->
<g id="edge42" class="edge">
<title>10&#45;&gt;Popularity Prediction of Facebook Videos
 for Higher Quality Streaming</title>
<path fill="none" stroke="#000000" d="M12866.0232,-973.9535C12781.5564,-967.1267 12526.2126,-944.7891 12497.022,-922.0672 12357.9463,-813.8115 12322.3963,-584.9239 12313.7038,-496.727"/>
<polygon fill="#000000" stroke="#000000" points="12317.1812,-496.3199 12312.7718,-486.6863 12310.2112,-496.967 12317.1812,-496.3199"/>
</g>
<!-- Linpeng Tang, Princeton University; Qi H
uang and Amit Puntambekar, Facebook; Ymi
r Vigfusson, Emory University &amp; Reykjavi
k University; Wyatt Lloyd, University of
 Southern California &amp; Facebook; Kai Li,
 Princeton University -->
<g id="node43" class="node">
<title>Linpeng Tang, Princeton University; Qi H
uang and Amit Puntambekar, Facebook; Ymi
r Vigfusson, Emory University &amp; Reykjavi
k University; Wyatt Lloyd, University of
 Southern California &amp; Facebook; Kai Li,
 Princeton University</title>
<ellipse fill="none" stroke="#000000" cx="12696.022" cy="-461.0336" rx="189.6475" ry="65.1077"/>
<text text-anchor="middle" x="12696.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Linpeng Tang, Princeton University; Qi H</text>
<text text-anchor="middle" x="12696.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uang and Amit Puntambekar, Facebook; Ymi</text>
<text text-anchor="middle" x="12696.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r Vigfusson, Emory University &amp; Reykjavi</text>
<text text-anchor="middle" x="12696.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">k University; Wyatt Lloyd, University of</text>
<text text-anchor="middle" x="12696.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Southern California &amp; Facebook; Kai Li,</text>
<text text-anchor="middle" x="12696.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Princeton University</text>
</g>
<!-- 10&#45;&gt;Linpeng Tang, Princeton University; Qi H
uang and Amit Puntambekar, Facebook; Ymi
r Vigfusson, Emory University &amp; Reykjavi
k University; Wyatt Lloyd, University of
 Southern California &amp; Facebook; Kai Li,
 Princeton University -->
<g id="edge43" class="edge">
<title>10&#45;&gt;Linpeng Tang, Princeton University; Qi H
uang and Amit Puntambekar, Facebook; Ymi
r Vigfusson, Emory University &amp; Reykjavi
k University; Wyatt Lloyd, University of
 Southern California &amp; Facebook; Kai Li,
 Princeton University</title>
<path fill="none" stroke="#000000" d="M12886.2408,-958.3386C12860.9125,-892.1208 12770.9288,-656.8687 12724.3795,-535.171"/>
<polygon fill="#000000" stroke="#000000" points="12727.537,-533.6289 12720.6953,-525.5392 12720.9989,-536.1297 12727.537,-533.6289"/>
</g>
<!-- Streaming video algorithms dynamically s
elect between different versions of a vi
deo to deliver the highest quality versi
on that can be viewed without buffering 
over the client’s connection. To impro
ve the quality for viewers, the backing 
video service can generate more and/or b
etter versions, but at a significant com
putational overhead. Processing all vide
os uploaded to Facebook in the most inte
nsive way would require a prohibitively 
large cluster. Facebook’s video popula
rity distribution is highly skewed, howe
ver, with analysis on sampled videos sho
wing 1% of them accounting for 83% of th
e total watch time by users. Thus, if we
 can predict the future popularity of vi
deos, we can focus the intensive process
ing on those videos that improve the qua
lity of the most watch time.To address t
his challenge, we designed CHESS, the fi
rst popularity prediction algorithm that
 is both scalable and accurate. CHESS is
 scalable because, unlike the state&#45;ofth
e&#45; art approaches, it requires only cons
tant space per video, enabling it to han
dle Facebook’s video workload. CHESS i
s accurate because it delivers superior 
predictions using a combination of histo
rical access patterns with social signal
s in a unified online learning framework
. We have built a video prediction servi
ce, CHESSVPS, using our new algorithm th
at can handle Facebook’s workload with
 only four machines. We find that re&#45;enc
oding popular videos predicted by CHESSV
PS enables a higher percentage of total 
user watch time to benefit from intensiv
e encoding, with less overhead than a re
cent production heuristic, e.g., 80% of 
watch time with one&#45;third as much overhe
ad. -->
<g id="node44" class="node">
<title>Streaming video algorithms dynamically s
elect between different versions of a vi
deo to deliver the highest quality versi
on that can be viewed without buffering 
over the client’s connection. To impro
ve the quality for viewers, the backing 
video service can generate more and/or b
etter versions, but at a significant com
putational overhead. Processing all vide
os uploaded to Facebook in the most inte
nsive way would require a prohibitively 
large cluster. Facebook’s video popula
rity distribution is highly skewed, howe
ver, with analysis on sampled videos sho
wing 1% of them accounting for 83% of th
e total watch time by users. Thus, if we
 can predict the future popularity of vi
deos, we can focus the intensive process
ing on those videos that improve the qua
lity of the most watch time.To address t
his challenge, we designed CHESS, the fi
rst popularity prediction algorithm that
 is both scalable and accurate. CHESS is
 scalable because, unlike the state&#45;ofth
e&#45; art approaches, it requires only cons
tant space per video, enabling it to han
dle Facebook’s video workload. CHESS i
s accurate because it delivers superior 
predictions using a combination of histo
rical access patterns with social signal
s in a unified online learning framework
. We have built a video prediction servi
ce, CHESSVPS, using our new algorithm th
at can handle Facebook’s workload with
 only four machines. We find that re&#45;enc
oding popular videos predicted by CHESSV
PS enables a higher percentage of total 
user watch time to benefit from intensiv
e encoding, with less overhead than a re
cent production heuristic, e.g., 80% of 
watch time with one&#45;third as much overhe
ad.</title>
<ellipse fill="none" stroke="#000000" cx="13091.022" cy="-461.0336" rx="187.0208" ry="421.3713"/>
<text text-anchor="middle" x="13091.022" y="-743.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Streaming video algorithms dynamically s</text>
<text text-anchor="middle" x="13091.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000">elect between different versions of a vi</text>
<text text-anchor="middle" x="13091.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">deo to deliver the highest quality versi</text>
<text text-anchor="middle" x="13091.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on that can be viewed without buffering </text>
<text text-anchor="middle" x="13091.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">over the client’s connection. To impro</text>
<text text-anchor="middle" x="13091.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ve the quality for viewers, the backing </text>
<text text-anchor="middle" x="13091.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">video service can generate more and/or b</text>
<text text-anchor="middle" x="13091.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">etter versions, but at a significant com</text>
<text text-anchor="middle" x="13091.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">putational overhead. Processing all vide</text>
<text text-anchor="middle" x="13091.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">os uploaded to Facebook in the most inte</text>
<text text-anchor="middle" x="13091.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nsive way would require a prohibitively </text>
<text text-anchor="middle" x="13091.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">large cluster. Facebook’s video popula</text>
<text text-anchor="middle" x="13091.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rity distribution is highly skewed, howe</text>
<text text-anchor="middle" x="13091.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ver, with analysis on sampled videos sho</text>
<text text-anchor="middle" x="13091.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">wing 1% of them accounting for 83% of th</text>
<text text-anchor="middle" x="13091.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e total watch time by users. Thus, if we</text>
<text text-anchor="middle" x="13091.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> can predict the future popularity of vi</text>
<text text-anchor="middle" x="13091.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">deos, we can focus the intensive process</text>
<text text-anchor="middle" x="13091.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing on those videos that improve the qua</text>
<text text-anchor="middle" x="13091.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lity of the most watch time.To address t</text>
<text text-anchor="middle" x="13091.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">his challenge, we designed CHESS, the fi</text>
<text text-anchor="middle" x="13091.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rst popularity prediction algorithm that</text>
<text text-anchor="middle" x="13091.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> is both scalable and accurate. CHESS is</text>
<text text-anchor="middle" x="13091.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> scalable because, unlike the state&#45;ofth</text>
<text text-anchor="middle" x="13091.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e&#45; art approaches, it requires only cons</text>
<text text-anchor="middle" x="13091.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tant space per video, enabling it to han</text>
<text text-anchor="middle" x="13091.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">dle Facebook’s video workload. CHESS i</text>
<text text-anchor="middle" x="13091.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s accurate because it delivers superior </text>
<text text-anchor="middle" x="13091.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">predictions using a combination of histo</text>
<text text-anchor="middle" x="13091.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rical access patterns with social signal</text>
<text text-anchor="middle" x="13091.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s in a unified online learning framework</text>
<text text-anchor="middle" x="13091.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. We have built a video prediction servi</text>
<text text-anchor="middle" x="13091.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ce, CHESSVPS, using our new algorithm th</text>
<text text-anchor="middle" x="13091.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at can handle Facebook’s workload with</text>
<text text-anchor="middle" x="13091.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> only four machines. We find that re&#45;enc</text>
<text text-anchor="middle" x="13091.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oding popular videos predicted by CHESSV</text>
<text text-anchor="middle" x="13091.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">PS enables a higher percentage of total </text>
<text text-anchor="middle" x="13091.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">user watch time to benefit from intensiv</text>
<text text-anchor="middle" x="13091.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e encoding, with less overhead than a re</text>
<text text-anchor="middle" x="13091.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cent production heuristic, e.g., 80% of </text>
<text text-anchor="middle" x="13091.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000">watch time with one&#45;third as much overhe</text>
<text text-anchor="middle" x="13091.022" y="-169.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ad.</text>
</g>
<!-- 10&#45;&gt;Streaming video algorithms dynamically s
elect between different versions of a vi
deo to deliver the highest quality versi
on that can be viewed without buffering 
over the client’s connection. To impro
ve the quality for viewers, the backing 
video service can generate more and/or b
etter versions, but at a significant com
putational overhead. Processing all vide
os uploaded to Facebook in the most inte
nsive way would require a prohibitively 
large cluster. Facebook’s video popula
rity distribution is highly skewed, howe
ver, with analysis on sampled videos sho
wing 1% of them accounting for 83% of th
e total watch time by users. Thus, if we
 can predict the future popularity of vi
deos, we can focus the intensive process
ing on those videos that improve the qua
lity of the most watch time.To address t
his challenge, we designed CHESS, the fi
rst popularity prediction algorithm that
 is both scalable and accurate. CHESS is
 scalable because, unlike the state&#45;ofth
e&#45; art approaches, it requires only cons
tant space per video, enabling it to han
dle Facebook’s video workload. CHESS i
s accurate because it delivers superior 
predictions using a combination of histo
rical access patterns with social signal
s in a unified online learning framework
. We have built a video prediction servi
ce, CHESSVPS, using our new algorithm th
at can handle Facebook’s workload with
 only four machines. We find that re&#45;enc
oding popular videos predicted by CHESSV
PS enables a higher percentage of total 
user watch time to benefit from intensiv
e encoding, with less overhead than a re
cent production heuristic, e.g., 80% of 
watch time with one&#45;third as much overhe
ad. -->
<g id="edge44" class="edge">
<title>10&#45;&gt;Streaming video algorithms dynamically s
elect between different versions of a vi
deo to deliver the highest quality versi
on that can be viewed without buffering 
over the client’s connection. To impro
ve the quality for viewers, the backing 
video service can generate more and/or b
etter versions, but at a significant com
putational overhead. Processing all vide
os uploaded to Facebook in the most inte
nsive way would require a prohibitively 
large cluster. Facebook’s video popula
rity distribution is highly skewed, howe
ver, with analysis on sampled videos sho
wing 1% of them accounting for 83% of th
e total watch time by users. Thus, if we
 can predict the future popularity of vi
deos, we can focus the intensive process
ing on those videos that improve the qua
lity of the most watch time.To address t
his challenge, we designed CHESS, the fi
rst popularity prediction algorithm that
 is both scalable and accurate. CHESS is
 scalable because, unlike the state&#45;ofth
e&#45; art approaches, it requires only cons
tant space per video, enabling it to han
dle Facebook’s video workload. CHESS i
s accurate because it delivers superior 
predictions using a combination of histo
rical access patterns with social signal
s in a unified online learning framework
. We have built a video prediction servi
ce, CHESSVPS, using our new algorithm th
at can handle Facebook’s workload with
 only four machines. We find that re&#45;enc
oding popular videos predicted by CHESSV
PS enables a higher percentage of total 
user watch time to benefit from intensiv
e encoding, with less overhead than a re
cent production heuristic, e.g., 80% of 
watch time with one&#45;third as much overhe
ad.</title>
<path fill="none" stroke="#000000" d="M12899.8376,-958.3386C12911.4453,-928.145 12936.5638,-862.8071 12964.8941,-789.1151"/>
<polygon fill="#000000" stroke="#000000" points="12968.2244,-790.2059 12968.5459,-779.6159 12961.6906,-787.694 12968.2244,-790.2059"/>
</g>
<!-- 11&#45;&gt; -->
<g id="edge47" class="edge">
<title>11&#45;&gt;</title>
<path fill="none" stroke="#000000" d="M3113.0756,-974.1445C3030.6632,-968.0041 2786.1152,-947.7532 2762.022,-922.0672 2703.2388,-859.3981 2717.5882,-579.2144 2723.8697,-489.069"/>
<polygon fill="#000000" stroke="#000000" points="2727.3642,-489.2703 2724.5903,-479.0451 2720.3822,-488.7683 2727.3642,-489.2703"/>
</g>
<!-- Squeezing out All the Value of Loaded Da
ta: An Out&#45;of&#45;core Graph Processing Syst
em with Reduced Disk I/O -->
<g id="node46" class="node">
<title>Squeezing out All the Value of Loaded Da
ta: An Out&#45;of&#45;core Graph Processing Syst
em with Reduced Disk I/O</title>
<ellipse fill="none" stroke="#000000" cx="2950.022" cy="-461.0336" rx="178.6318" ry="35.2113"/>
<text text-anchor="middle" x="2950.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Squeezing out All the Value of Loaded Da</text>
<text text-anchor="middle" x="2950.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ta: An Out&#45;of&#45;core Graph Processing Syst</text>
<text text-anchor="middle" x="2950.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">em with Reduced Disk I/O</text>
</g>
<!-- 11&#45;&gt;Squeezing out All the Value of Loaded Da
ta: An Out&#45;of&#45;core Graph Processing Syst
em with Reduced Disk I/O -->
<g id="edge46" class="edge">
<title>11&#45;&gt;Squeezing out All the Value of Loaded Da
ta: An Out&#45;of&#45;core Graph Processing Syst
em with Reduced Disk I/O</title>
<path fill="none" stroke="#000000" d="M3133.4818,-958.3386C3106.9368,-886.383 3006.7588,-614.8303 2966.7127,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="2969.8869,-504.7688 2963.1421,-496.5982 2963.3195,-507.1916 2969.8869,-504.7688"/>
</g>
<!-- The current primary concern of out&#45;of&#45;co
re graph processing systems is improving
 disk I/O locality, which leads to certa
in restrictions on their programming and
 execution models. Although improving th
e locality, these constraints also restr
ict the expressiveness. As a result, onl
y sub&#45;optimal algorithms are supported f
or many kinds of applications. When comp
ared with the optimal algorithms, these 
supported algorithms typically incur seq
uential, but much larger, amount of disk
 I/O.In this paper, we explore a fundame
ntally different tradeoff: less total am
ount of I/O rather than better locality.
 We show that out&#45;of&#45;core graph processi
ng systems uniquely provide the opportun
ities to lift the restrictions of the pr
ogramming and execution model (e.g., pro
cess each loaded block at most once, nei
ghborhood constraint) in a feasible mann
er, which enable efficient algorithms th
at require drastically less number of it
erations. To demonstrate the ideas, we b
uild CLIP, a novel out&#45;ofcore graph proc
essing system designed with the principl
e of “squeezing out all the value of l
oaded data”. With the more expressive 
programming model and more flexible exec
ution, CLIP enables more efficient algor
ithms that require much less amount of t
otal disk I/O. Our experiments show that
 the algorithms that can be only impleme
nted in CLIP are much faster than the or
iginal disk&#45;locality&#45;optimized algorithm
s in many real&#45;world cases (up to tens o
r even thousands of times speedup). -->
<g id="node47" class="node">
<title>The current primary concern of out&#45;of&#45;co
re graph processing systems is improving
 disk I/O locality, which leads to certa
in restrictions on their programming and
 execution models. Although improving th
e locality, these constraints also restr
ict the expressiveness. As a result, onl
y sub&#45;optimal algorithms are supported f
or many kinds of applications. When comp
ared with the optimal algorithms, these 
supported algorithms typically incur seq
uential, but much larger, amount of disk
 I/O.In this paper, we explore a fundame
ntally different tradeoff: less total am
ount of I/O rather than better locality.
 We show that out&#45;of&#45;core graph processi
ng systems uniquely provide the opportun
ities to lift the restrictions of the pr
ogramming and execution model (e.g., pro
cess each loaded block at most once, nei
ghborhood constraint) in a feasible mann
er, which enable efficient algorithms th
at require drastically less number of it
erations. To demonstrate the ideas, we b
uild CLIP, a novel out&#45;ofcore graph proc
essing system designed with the principl
e of “squeezing out all the value of l
oaded data”. With the more expressive 
programming model and more flexible exec
ution, CLIP enables more efficient algor
ithms that require much less amount of t
otal disk I/O. Our experiments show that
 the algorithms that can be only impleme
nted in CLIP are much faster than the or
iginal disk&#45;locality&#45;optimized algorithm
s in many real&#45;world cases (up to tens o
r even thousands of times speedup).</title>
<ellipse fill="none" stroke="#000000" cx="3331.022" cy="-461.0336" rx="184.5547" ry="371.8763"/>
<text text-anchor="middle" x="3331.022" y="-708.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The current primary concern of out&#45;of&#45;co</text>
<text text-anchor="middle" x="3331.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re graph processing systems is improving</text>
<text text-anchor="middle" x="3331.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> disk I/O locality, which leads to certa</text>
<text text-anchor="middle" x="3331.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">in restrictions on their programming and</text>
<text text-anchor="middle" x="3331.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> execution models. Although improving th</text>
<text text-anchor="middle" x="3331.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e locality, these constraints also restr</text>
<text text-anchor="middle" x="3331.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ict the expressiveness. As a result, onl</text>
<text text-anchor="middle" x="3331.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y sub&#45;optimal algorithms are supported f</text>
<text text-anchor="middle" x="3331.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">or many kinds of applications. When comp</text>
<text text-anchor="middle" x="3331.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ared with the optimal algorithms, these </text>
<text text-anchor="middle" x="3331.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">supported algorithms typically incur seq</text>
<text text-anchor="middle" x="3331.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uential, but much larger, amount of disk</text>
<text text-anchor="middle" x="3331.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> I/O.In this paper, we explore a fundame</text>
<text text-anchor="middle" x="3331.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntally different tradeoff: less total am</text>
<text text-anchor="middle" x="3331.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ount of I/O rather than better locality.</text>
<text text-anchor="middle" x="3331.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> We show that out&#45;of&#45;core graph processi</text>
<text text-anchor="middle" x="3331.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng systems uniquely provide the opportun</text>
<text text-anchor="middle" x="3331.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ities to lift the restrictions of the pr</text>
<text text-anchor="middle" x="3331.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ogramming and execution model (e.g., pro</text>
<text text-anchor="middle" x="3331.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cess each loaded block at most once, nei</text>
<text text-anchor="middle" x="3331.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ghborhood constraint) in a feasible mann</text>
<text text-anchor="middle" x="3331.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er, which enable efficient algorithms th</text>
<text text-anchor="middle" x="3331.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at require drastically less number of it</text>
<text text-anchor="middle" x="3331.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erations. To demonstrate the ideas, we b</text>
<text text-anchor="middle" x="3331.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uild CLIP, a novel out&#45;ofcore graph proc</text>
<text text-anchor="middle" x="3331.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">essing system designed with the principl</text>
<text text-anchor="middle" x="3331.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e of “squeezing out all the value of l</text>
<text text-anchor="middle" x="3331.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oaded data”. With the more expressive </text>
<text text-anchor="middle" x="3331.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">programming model and more flexible exec</text>
<text text-anchor="middle" x="3331.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ution, CLIP enables more efficient algor</text>
<text text-anchor="middle" x="3331.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ithms that require much less amount of t</text>
<text text-anchor="middle" x="3331.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">otal disk I/O. Our experiments show that</text>
<text text-anchor="middle" x="3331.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> the algorithms that can be only impleme</text>
<text text-anchor="middle" x="3331.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nted in CLIP are much faster than the or</text>
<text text-anchor="middle" x="3331.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iginal disk&#45;locality&#45;optimized algorithm</text>
<text text-anchor="middle" x="3331.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s in many real&#45;world cases (up to tens o</text>
<text text-anchor="middle" x="3331.022" y="-204.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r even thousands of times speedup).</text>
</g>
<!-- 11&#45;&gt;The current primary concern of out&#45;of&#45;co
re graph processing systems is improving
 disk I/O locality, which leads to certa
in restrictions on their programming and
 execution models. Although improving th
e locality, these constraints also restr
ict the expressiveness. As a result, onl
y sub&#45;optimal algorithms are supported f
or many kinds of applications. When comp
ared with the optimal algorithms, these 
supported algorithms typically incur seq
uential, but much larger, amount of disk
 I/O.In this paper, we explore a fundame
ntally different tradeoff: less total am
ount of I/O rather than better locality.
 We show that out&#45;of&#45;core graph processi
ng systems uniquely provide the opportun
ities to lift the restrictions of the pr
ogramming and execution model (e.g., pro
cess each loaded block at most once, nei
ghborhood constraint) in a feasible mann
er, which enable efficient algorithms th
at require drastically less number of it
erations. To demonstrate the ideas, we b
uild CLIP, a novel out&#45;ofcore graph proc
essing system designed with the principl
e of “squeezing out all the value of l
oaded data”. With the more expressive 
programming model and more flexible exec
ution, CLIP enables more efficient algor
ithms that require much less amount of t
otal disk I/O. Our experiments show that
 the algorithms that can be only impleme
nted in CLIP are much faster than the or
iginal disk&#45;locality&#45;optimized algorithm
s in many real&#45;world cases (up to tens o
r even thousands of times speedup). -->
<g id="edge48" class="edge">
<title>11&#45;&gt;The current primary concern of out&#45;of&#45;co
re graph processing systems is improving
 disk I/O locality, which leads to certa
in restrictions on their programming and
 execution models. Although improving th
e locality, these constraints also restr
ict the expressiveness. As a result, onl
y sub&#45;optimal algorithms are supported f
or many kinds of applications. When comp
ared with the optimal algorithms, these 
supported algorithms typically incur seq
uential, but much larger, amount of disk
 I/O.In this paper, we explore a fundame
ntally different tradeoff: less total am
ount of I/O rather than better locality.
 We show that out&#45;of&#45;core graph processi
ng systems uniquely provide the opportun
ities to lift the restrictions of the pr
ogramming and execution model (e.g., pro
cess each loaded block at most once, nei
ghborhood constraint) in a feasible mann
er, which enable efficient algorithms th
at require drastically less number of it
erations. To demonstrate the ideas, we b
uild CLIP, a novel out&#45;ofcore graph proc
essing system designed with the principl
e of “squeezing out all the value of l
oaded data”. With the more expressive 
programming model and more flexible exec
ution, CLIP enables more efficient algor
ithms that require much less amount of t
otal disk I/O. Our experiments show that
 the algorithms that can be only impleme
nted in CLIP are much faster than the or
iginal disk&#45;locality&#45;optimized algorithm
s in many real&#45;world cases (up to tens o
r even thousands of times speedup).</title>
<path fill="none" stroke="#000000" d="M3146.5966,-958.3386C3158.8186,-925.3821 3186.5681,-850.5551 3216.9256,-768.6958"/>
<polygon fill="#000000" stroke="#000000" points="3220.2508,-769.795 3220.4464,-759.202 3213.6876,-767.361 3220.2508,-769.795"/>
</g>
<!-- Ending the Anomaly: Achieving Low Latenc
y and Airtime Fairness in WiFi -->
<g id="node49" class="node">
<title>Ending the Anomaly: Achieving Low Latenc
y and Airtime Fairness in WiFi</title>
<ellipse fill="none" stroke="#000000" cx="13485.022" cy="-461.0336" rx="189.4004" ry="25.4118"/>
<text text-anchor="middle" x="13485.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Ending the Anomaly: Achieving Low Latenc</text>
<text text-anchor="middle" x="13485.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y and Airtime Fairness in WiFi</text>
</g>
<!-- 12&#45;&gt;Ending the Anomaly: Achieving Low Latenc
y and Airtime Fairness in WiFi -->
<g id="edge50" class="edge">
<title>12&#45;&gt;Ending the Anomaly: Achieving Low Latenc
y and Airtime Fairness in WiFi</title>
<path fill="none" stroke="#000000" d="M14024.9727,-975.452C13949.1734,-973.2209 13736.7331,-963.3435 13683.022,-922.0672 13541.9812,-813.6792 13499.966,-584.8704 13488.7376,-496.7108"/>
<polygon fill="#000000" stroke="#000000" points="13492.1987,-496.1783 13487.5163,-486.6744 13485.25,-497.024 13492.1987,-496.1783"/>
</g>
<!-- Toke Høiland&#45;Jørgensen, Karlstad Unive
rsity; Michał Kazior, Tieto Poland; Dav
e Täht, TekLibre; Per Hurtig and Anna B
runstrom, Karlstad University -->
<g id="node50" class="node">
<title>Toke Høiland&#45;Jørgensen, Karlstad Unive
rsity; Michał Kazior, Tieto Poland; Dav
e Täht, TekLibre; Per Hurtig and Anna B
runstrom, Karlstad University</title>
<ellipse fill="none" stroke="#000000" cx="13865.022" cy="-461.0336" rx="173.3914" ry="45.011"/>
<text text-anchor="middle" x="13865.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Toke Høiland&#45;Jørgensen, Karlstad Unive</text>
<text text-anchor="middle" x="13865.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rsity; Michał Kazior, Tieto Poland; Dav</text>
<text text-anchor="middle" x="13865.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e Täht, TekLibre; Per Hurtig and Anna B</text>
<text text-anchor="middle" x="13865.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">runstrom, Karlstad University</text>
</g>
<!-- 12&#45;&gt;Toke Høiland&#45;Jørgensen, Karlstad Unive
rsity; Michał Kazior, Tieto Poland; Dav
e Täht, TekLibre; Per Hurtig and Anna B
runstrom, Karlstad University -->
<g id="edge51" class="edge">
<title>12&#45;&gt;Toke Høiland&#45;Jørgensen, Karlstad Unive
rsity; Michał Kazior, Tieto Poland; Dav
e Täht, TekLibre; Per Hurtig and Anna B
runstrom, Karlstad University</title>
<path fill="none" stroke="#000000" d="M14045.585,-958.3386C14020.1866,-888.3865 13926.2973,-629.7974 13884.8762,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="13888.0939,-514.3226 13881.3912,-506.1175 13881.5142,-516.7116 13888.0939,-514.3226"/>
</g>
<!-- With more devices connected, delays and 
jitter at the WiFi hop become more preva
lent, and correct functioning during net
work congestion becomes more important. 
However, two important performance issue
s prevent modern WiFi from reaching its 
potential: increased latency under load 
caused by excessive queueing (i.e. buffe
rbloat) and the 802.11 performance anoma
ly.To remedy these issues, we present a 
novel two&#45;part solution. We design a new
 queueing scheme that eliminates bufferb
loat in the wireless setting. Leveraging
 this queueing scheme, we then design an
 airtime fairness scheduler that operate
s at the access point and doesn’t requ
ire any changes to clients.We evaluate o
ur solution using both a theoretical mod
el and experiments in a testbed environm
ent, formulating a suitable analytical m
odel in the process. We show that our so
lution achieves an order of magnitude re
duction in latency under load, large imp
rovements in multi&#45;station throughput, a
nd nearly perfect airtime fairness for b
oth TCP and downstream UDP traffic. Furt
her experiments with application traffic
 confirm that the solution provides sign
ificant performance gains for real&#45;world
 traffic.We develop a production quality
 implementation of our solution in the L
inux kernel, the platform powering most 
access points outside of the managed ent
erprise setting. The implementation has 
been accepted into the mainline kernel d
istribution, making it available for dep
loyment on billions of devices running L
inux today. -->
<g id="node51" class="node">
<title>With more devices connected, delays and 
jitter at the WiFi hop become more preva
lent, and correct functioning during net
work congestion becomes more important. 
However, two important performance issue
s prevent modern WiFi from reaching its 
potential: increased latency under load 
caused by excessive queueing (i.e. buffe
rbloat) and the 802.11 performance anoma
ly.To remedy these issues, we present a 
novel two&#45;part solution. We design a new
 queueing scheme that eliminates bufferb
loat in the wireless setting. Leveraging
 this queueing scheme, we then design an
 airtime fairness scheduler that operate
s at the access point and doesn’t requ
ire any changes to clients.We evaluate o
ur solution using both a theoretical mod
el and experiments in a testbed environm
ent, formulating a suitable analytical m
odel in the process. We show that our so
lution achieves an order of magnitude re
duction in latency under load, large imp
rovements in multi&#45;station throughput, a
nd nearly perfect airtime fairness for b
oth TCP and downstream UDP traffic. Furt
her experiments with application traffic
 confirm that the solution provides sign
ificant performance gains for real&#45;world
 traffic.We develop a production quality
 implementation of our solution in the L
inux kernel, the platform powering most 
access points outside of the managed ent
erprise setting. The implementation has 
been accepted into the mainline kernel d
istribution, making it available for dep
loyment on billions of devices running L
inux today.</title>
<ellipse fill="none" stroke="#000000" cx="14239.022" cy="-461.0336" rx="182.7262" ry="381.6754"/>
<text text-anchor="middle" x="14239.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">With more devices connected, delays and </text>
<text text-anchor="middle" x="14239.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">jitter at the WiFi hop become more preva</text>
<text text-anchor="middle" x="14239.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lent, and correct functioning during net</text>
<text text-anchor="middle" x="14239.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">work congestion becomes more important. </text>
<text text-anchor="middle" x="14239.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">However, two important performance issue</text>
<text text-anchor="middle" x="14239.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s prevent modern WiFi from reaching its </text>
<text text-anchor="middle" x="14239.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">potential: increased latency under load </text>
<text text-anchor="middle" x="14239.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">caused by excessive queueing (i.e. buffe</text>
<text text-anchor="middle" x="14239.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rbloat) and the 802.11 performance anoma</text>
<text text-anchor="middle" x="14239.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ly.To remedy these issues, we present a </text>
<text text-anchor="middle" x="14239.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">novel two&#45;part solution. We design a new</text>
<text text-anchor="middle" x="14239.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> queueing scheme that eliminates bufferb</text>
<text text-anchor="middle" x="14239.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">loat in the wireless setting. Leveraging</text>
<text text-anchor="middle" x="14239.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> this queueing scheme, we then design an</text>
<text text-anchor="middle" x="14239.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> airtime fairness scheduler that operate</text>
<text text-anchor="middle" x="14239.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s at the access point and doesn’t requ</text>
<text text-anchor="middle" x="14239.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ire any changes to clients.We evaluate o</text>
<text text-anchor="middle" x="14239.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ur solution using both a theoretical mod</text>
<text text-anchor="middle" x="14239.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">el and experiments in a testbed environm</text>
<text text-anchor="middle" x="14239.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ent, formulating a suitable analytical m</text>
<text text-anchor="middle" x="14239.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">odel in the process. We show that our so</text>
<text text-anchor="middle" x="14239.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lution achieves an order of magnitude re</text>
<text text-anchor="middle" x="14239.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">duction in latency under load, large imp</text>
<text text-anchor="middle" x="14239.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rovements in multi&#45;station throughput, a</text>
<text text-anchor="middle" x="14239.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd nearly perfect airtime fairness for b</text>
<text text-anchor="middle" x="14239.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oth TCP and downstream UDP traffic. Furt</text>
<text text-anchor="middle" x="14239.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">her experiments with application traffic</text>
<text text-anchor="middle" x="14239.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> confirm that the solution provides sign</text>
<text text-anchor="middle" x="14239.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ificant performance gains for real&#45;world</text>
<text text-anchor="middle" x="14239.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> traffic.We develop a production quality</text>
<text text-anchor="middle" x="14239.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> implementation of our solution in the L</text>
<text text-anchor="middle" x="14239.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">inux kernel, the platform powering most </text>
<text text-anchor="middle" x="14239.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">access points outside of the managed ent</text>
<text text-anchor="middle" x="14239.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erprise setting. The implementation has </text>
<text text-anchor="middle" x="14239.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">been accepted into the mainline kernel d</text>
<text text-anchor="middle" x="14239.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">istribution, making it available for dep</text>
<text text-anchor="middle" x="14239.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">loyment on billions of devices running L</text>
<text text-anchor="middle" x="14239.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">inux today.</text>
</g>
<!-- 12&#45;&gt;With more devices connected, delays and 
jitter at the WiFi hop become more preva
lent, and correct functioning during net
work congestion becomes more important. 
However, two important performance issue
s prevent modern WiFi from reaching its 
potential: increased latency under load 
caused by excessive queueing (i.e. buffe
rbloat) and the 802.11 performance anoma
ly.To remedy these issues, we present a 
novel two&#45;part solution. We design a new
 queueing scheme that eliminates bufferb
loat in the wireless setting. Leveraging
 this queueing scheme, we then design an
 airtime fairness scheduler that operate
s at the access point and doesn’t requ
ire any changes to clients.We evaluate o
ur solution using both a theoretical mod
el and experiments in a testbed environm
ent, formulating a suitable analytical m
odel in the process. We show that our so
lution achieves an order of magnitude re
duction in latency under load, large imp
rovements in multi&#45;station throughput, a
nd nearly perfect airtime fairness for b
oth TCP and downstream UDP traffic. Furt
her experiments with application traffic
 confirm that the solution provides sign
ificant performance gains for real&#45;world
 traffic.We develop a production quality
 implementation of our solution in the L
inux kernel, the platform powering most 
access points outside of the managed ent
erprise setting. The implementation has 
been accepted into the mainline kernel d
istribution, making it available for dep
loyment on billions of devices running L
inux today. -->
<g id="edge52" class="edge">
<title>12&#45;&gt;With more devices connected, delays and 
jitter at the WiFi hop become more preva
lent, and correct functioning during net
work congestion becomes more important. 
However, two important performance issue
s prevent modern WiFi from reaching its 
potential: increased latency under load 
caused by excessive queueing (i.e. buffe
rbloat) and the 802.11 performance anoma
ly.To remedy these issues, we present a 
novel two&#45;part solution. We design a new
 queueing scheme that eliminates bufferb
loat in the wireless setting. Leveraging
 this queueing scheme, we then design an
 airtime fairness scheduler that operate
s at the access point and doesn’t requ
ire any changes to clients.We evaluate o
ur solution using both a theoretical mod
el and experiments in a testbed environm
ent, formulating a suitable analytical m
odel in the process. We show that our so
lution achieves an order of magnitude re
duction in latency under load, large imp
rovements in multi&#45;station throughput, a
nd nearly perfect airtime fairness for b
oth TCP and downstream UDP traffic. Furt
her experiments with application traffic
 confirm that the solution provides sign
ificant performance gains for real&#45;world
 traffic.We develop a production quality
 implementation of our solution in the L
inux kernel, the platform powering most 
access points outside of the managed ent
erprise setting. The implementation has 
been accepted into the mainline kernel d
istribution, making it available for dep
loyment on billions of devices running L
inux today.</title>
<path fill="none" stroke="#000000" d="M14058.459,-958.3386C14070.1075,-926.2563 14096.1626,-854.4955 14124.9554,-775.1946"/>
<polygon fill="#000000" stroke="#000000" points="14128.3565,-776.0827 14128.4796,-765.4886 14121.7768,-773.6936 14128.3565,-776.0827"/>
</g>
<!-- Persona: A High&#45;Performance Bioinformati
cs Framework -->
<g id="node53" class="node">
<title>Persona: A High&#45;Performance Bioinformati
cs Framework</title>
<ellipse fill="none" stroke="#000000" cx="14624.022" cy="-461.0336" rx="183.9085" ry="25.4118"/>
<text text-anchor="middle" x="14624.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Persona: A High&#45;Performance Bioinformati</text>
<text text-anchor="middle" x="14624.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cs Framework</text>
</g>
<!-- 13&#45;&gt;Persona: A High&#45;Performance Bioinformati
cs Framework -->
<g id="edge54" class="edge">
<title>13&#45;&gt;Persona: A High&#45;Performance Bioinformati
cs Framework</title>
<path fill="none" stroke="#000000" d="M15188.1974,-973.9701C15103.6462,-967.1497 14846.5472,-944.7274 14817.022,-922.0672 14676.4617,-814.1896 14637.3418,-585.0769 14627.2653,-496.7735"/>
<polygon fill="#000000" stroke="#000000" points="14630.733,-496.2849 14626.1756,-486.7204 14623.7737,-497.0394 14630.733,-496.2849"/>
</g>
<!-- Stuart Byma and Sam Whitlock, EPFL; Laur
a Flueratoru, University Politehnica of 
Bucharest; Ethan Tseng, CMU; Christos Ko
zyrakis, Stanford University; Edouard Bu
gnion and James Larus, EPFL -->
<g id="node54" class="node">
<title>Stuart Byma and Sam Whitlock, EPFL; Laur
a Flueratoru, University Politehnica of 
Bucharest; Ethan Tseng, CMU; Christos Ko
zyrakis, Stanford University; Edouard Bu
gnion and James Larus, EPFL</title>
<ellipse fill="none" stroke="#000000" cx="15015.022" cy="-461.0336" rx="189.0618" ry="55.3091"/>
<text text-anchor="middle" x="15015.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Stuart Byma and Sam Whitlock, EPFL; Laur</text>
<text text-anchor="middle" x="15015.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a Flueratoru, University Politehnica of </text>
<text text-anchor="middle" x="15015.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Bucharest; Ethan Tseng, CMU; Christos Ko</text>
<text text-anchor="middle" x="15015.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">zyrakis, Stanford University; Edouard Bu</text>
<text text-anchor="middle" x="15015.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gnion and James Larus, EPFL</text>
</g>
<!-- 13&#45;&gt;Stuart Byma and Sam Whitlock, EPFL; Laur
a Flueratoru, University Politehnica of 
Bucharest; Ethan Tseng, CMU; Christos Ko
zyrakis, Stanford University; Edouard Bu
gnion and James Larus, EPFL -->
<g id="edge55" class="edge">
<title>13&#45;&gt;Stuart Byma and Sam Whitlock, EPFL; Laur
a Flueratoru, University Politehnica of 
Bucharest; Ethan Tseng, CMU; Christos Ko
zyrakis, Stanford University; Edouard Bu
gnion and James Larus, EPFL</title>
<path fill="none" stroke="#000000" d="M15208.253,-958.636C15182.011,-891.0584 15086.1681,-644.2468 15040.0908,-525.5901"/>
<polygon fill="#000000" stroke="#000000" points="15043.3418,-524.2929 15036.4592,-516.2381 15036.8165,-526.8269 15043.3418,-524.2929"/>
</g>
<!-- Next&#45;generation genome sequencing techno
logy has reached a point at which it is 
becoming cost&#45;effective to sequence all 
patients. Biobanks and researchers are f
aced with an oncoming deluge of genomic 
data, whose processing requires new and 
scalable bioinformatics architectures an
d systems. Processing raw genetic sequen
ce data is computationally expensive and
 datasets are large. Current software sy
stems can require many hours to process 
a single genome and generally run only o
n a single computer. Common file formats
 are monolithic and row&#45;oriented, a barr
ier to distributed computation.To addres
s these challenges, we built Persona, a 
cluster&#45;scale, high&#45;throughput bioinform
atics framework. Persona currently suppo
rts paired&#45;read alignment, sorting, and 
duplicate marking using well&#45;known algor
ithms and techniques. Persona can signif
icantly reduce end&#45;to&#45;end processing tim
es for bioinformatics computations. A ne
w Aggregate Genomic Data (AGD) format un
ifies sample data and analysis results, 
while enabling efficient distributed com
putation and I/O.In a case study on sequ
ence alignment, Persona sustains 1.353 g
igabases aligned per second with 101 bas
e pair reads on a 32&#45;node cluster and ca
n align a full genome in ~16.7 seconds u
sing the SNAP algorithm. Our results dem
onstrate that: (1) alignment computation
 with Persona scales linearly across ser
vers with no measurable completion&#45;time 
imbalance and negligible framework overh
eads; (2) on a single server, sorting wi
th Persona and AGD is up to 2.3× faster
 than commonly used tools, while duplica
te marking is 3× faster; (3) with AGD, 
a 7 node COTS network storage system can
 service up to 60 alignment compute node
s; (4) server cost dominates for a balan
ced system running Persona, while long&#45;t
erm data storage dwarfs the cost of comp
utation. -->
<g id="node55" class="node">
<title>Next&#45;generation genome sequencing techno
logy has reached a point at which it is 
becoming cost&#45;effective to sequence all 
patients. Biobanks and researchers are f
aced with an oncoming deluge of genomic 
data, whose processing requires new and 
scalable bioinformatics architectures an
d systems. Processing raw genetic sequen
ce data is computationally expensive and
 datasets are large. Current software sy
stems can require many hours to process 
a single genome and generally run only o
n a single computer. Common file formats
 are monolithic and row&#45;oriented, a barr
ier to distributed computation.To addres
s these challenges, we built Persona, a 
cluster&#45;scale, high&#45;throughput bioinform
atics framework. Persona currently suppo
rts paired&#45;read alignment, sorting, and 
duplicate marking using well&#45;known algor
ithms and techniques. Persona can signif
icantly reduce end&#45;to&#45;end processing tim
es for bioinformatics computations. A ne
w Aggregate Genomic Data (AGD) format un
ifies sample data and analysis results, 
while enabling efficient distributed com
putation and I/O.In a case study on sequ
ence alignment, Persona sustains 1.353 g
igabases aligned per second with 101 bas
e pair reads on a 32&#45;node cluster and ca
n align a full genome in ~16.7 seconds u
sing the SNAP algorithm. Our results dem
onstrate that: (1) alignment computation
 with Persona scales linearly across ser
vers with no measurable completion&#45;time 
imbalance and negligible framework overh
eads; (2) on a single server, sorting wi
th Persona and AGD is up to 2.3× faster
 than commonly used tools, while duplica
te marking is 3× faster; (3) with AGD, 
a 7 node COTS network storage system can
 service up to 60 alignment compute node
s; (4) server cost dominates for a balan
ced system running Persona, while long&#45;t
erm data storage dwarfs the cost of comp
utation.</title>
<ellipse fill="none" stroke="#000000" cx="15415.022" cy="-461.0336" rx="193.0984" ry="461.0672"/>
<text text-anchor="middle" x="15415.022" y="-771.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Next&#45;generation genome sequencing techno</text>
<text text-anchor="middle" x="15415.022" y="-757.8336" font-family="Times,serif" font-size="14.00" fill="#000000">logy has reached a point at which it is </text>
<text text-anchor="middle" x="15415.022" y="-743.8336" font-family="Times,serif" font-size="14.00" fill="#000000">becoming cost&#45;effective to sequence all </text>
<text text-anchor="middle" x="15415.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000">patients. Biobanks and researchers are f</text>
<text text-anchor="middle" x="15415.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aced with an oncoming deluge of genomic </text>
<text text-anchor="middle" x="15415.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">data, whose processing requires new and </text>
<text text-anchor="middle" x="15415.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">scalable bioinformatics architectures an</text>
<text text-anchor="middle" x="15415.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d systems. Processing raw genetic sequen</text>
<text text-anchor="middle" x="15415.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ce data is computationally expensive and</text>
<text text-anchor="middle" x="15415.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> datasets are large. Current software sy</text>
<text text-anchor="middle" x="15415.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stems can require many hours to process </text>
<text text-anchor="middle" x="15415.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a single genome and generally run only o</text>
<text text-anchor="middle" x="15415.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n a single computer. Common file formats</text>
<text text-anchor="middle" x="15415.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> are monolithic and row&#45;oriented, a barr</text>
<text text-anchor="middle" x="15415.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ier to distributed computation.To addres</text>
<text text-anchor="middle" x="15415.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s these challenges, we built Persona, a </text>
<text text-anchor="middle" x="15415.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cluster&#45;scale, high&#45;throughput bioinform</text>
<text text-anchor="middle" x="15415.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">atics framework. Persona currently suppo</text>
<text text-anchor="middle" x="15415.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rts paired&#45;read alignment, sorting, and </text>
<text text-anchor="middle" x="15415.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">duplicate marking using well&#45;known algor</text>
<text text-anchor="middle" x="15415.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ithms and techniques. Persona can signif</text>
<text text-anchor="middle" x="15415.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">icantly reduce end&#45;to&#45;end processing tim</text>
<text text-anchor="middle" x="15415.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es for bioinformatics computations. A ne</text>
<text text-anchor="middle" x="15415.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">w Aggregate Genomic Data (AGD) format un</text>
<text text-anchor="middle" x="15415.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ifies sample data and analysis results, </text>
<text text-anchor="middle" x="15415.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">while enabling efficient distributed com</text>
<text text-anchor="middle" x="15415.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">putation and I/O.In a case study on sequ</text>
<text text-anchor="middle" x="15415.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ence alignment, Persona sustains 1.353 g</text>
<text text-anchor="middle" x="15415.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">igabases aligned per second with 101 bas</text>
<text text-anchor="middle" x="15415.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e pair reads on a 32&#45;node cluster and ca</text>
<text text-anchor="middle" x="15415.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n align a full genome in ~16.7 seconds u</text>
<text text-anchor="middle" x="15415.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sing the SNAP algorithm. Our results dem</text>
<text text-anchor="middle" x="15415.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onstrate that: (1) alignment computation</text>
<text text-anchor="middle" x="15415.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> with Persona scales linearly across ser</text>
<text text-anchor="middle" x="15415.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vers with no measurable completion&#45;time </text>
<text text-anchor="middle" x="15415.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">imbalance and negligible framework overh</text>
<text text-anchor="middle" x="15415.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eads; (2) on a single server, sorting wi</text>
<text text-anchor="middle" x="15415.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">th Persona and AGD is up to 2.3× faster</text>
<text text-anchor="middle" x="15415.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> than commonly used tools, while duplica</text>
<text text-anchor="middle" x="15415.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">te marking is 3× faster; (3) with AGD, </text>
<text text-anchor="middle" x="15415.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a 7 node COTS network storage system can</text>
<text text-anchor="middle" x="15415.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> service up to 60 alignment compute node</text>
<text text-anchor="middle" x="15415.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s; (4) server cost dominates for a balan</text>
<text text-anchor="middle" x="15415.022" y="-169.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ced system running Persona, while long&#45;t</text>
<text text-anchor="middle" x="15415.022" y="-155.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erm data storage dwarfs the cost of comp</text>
<text text-anchor="middle" x="15415.022" y="-141.8336" font-family="Times,serif" font-size="14.00" fill="#000000">utation.</text>
</g>
<!-- 13&#45;&gt;Next&#45;generation genome sequencing techno
logy has reached a point at which it is 
becoming cost&#45;effective to sequence all 
patients. Biobanks and researchers are f
aced with an oncoming deluge of genomic 
data, whose processing requires new and 
scalable bioinformatics architectures an
d systems. Processing raw genetic sequen
ce data is computationally expensive and
 datasets are large. Current software sy
stems can require many hours to process 
a single genome and generally run only o
n a single computer. Common file formats
 are monolithic and row&#45;oriented, a barr
ier to distributed computation.To addres
s these challenges, we built Persona, a 
cluster&#45;scale, high&#45;throughput bioinform
atics framework. Persona currently suppo
rts paired&#45;read alignment, sorting, and 
duplicate marking using well&#45;known algor
ithms and techniques. Persona can signif
icantly reduce end&#45;to&#45;end processing tim
es for bioinformatics computations. A ne
w Aggregate Genomic Data (AGD) format un
ifies sample data and analysis results, 
while enabling efficient distributed com
putation and I/O.In a case study on sequ
ence alignment, Persona sustains 1.353 g
igabases aligned per second with 101 bas
e pair reads on a 32&#45;node cluster and ca
n align a full genome in ~16.7 seconds u
sing the SNAP algorithm. Our results dem
onstrate that: (1) alignment computation
 with Persona scales linearly across ser
vers with no measurable completion&#45;time 
imbalance and negligible framework overh
eads; (2) on a single server, sorting wi
th Persona and AGD is up to 2.3× faster
 than commonly used tools, while duplica
te marking is 3× faster; (3) with AGD, 
a 7 node COTS network storage system can
 service up to 60 alignment compute node
s; (4) server cost dominates for a balan
ced system running Persona, while long&#45;t
erm data storage dwarfs the cost of comp
utation. -->
<g id="edge56" class="edge">
<title>13&#45;&gt;Next&#45;generation genome sequencing techno
logy has reached a point at which it is 
becoming cost&#45;effective to sequence all 
patients. Biobanks and researchers are f
aced with an oncoming deluge of genomic 
data, whose processing requires new and 
scalable bioinformatics architectures an
d systems. Processing raw genetic sequen
ce data is computationally expensive and
 datasets are large. Current software sy
stems can require many hours to process 
a single genome and generally run only o
n a single computer. Common file formats
 are monolithic and row&#45;oriented, a barr
ier to distributed computation.To addres
s these challenges, we built Persona, a 
cluster&#45;scale, high&#45;throughput bioinform
atics framework. Persona currently suppo
rts paired&#45;read alignment, sorting, and 
duplicate marking using well&#45;known algor
ithms and techniques. Persona can signif
icantly reduce end&#45;to&#45;end processing tim
es for bioinformatics computations. A ne
w Aggregate Genomic Data (AGD) format un
ifies sample data and analysis results, 
while enabling efficient distributed com
putation and I/O.In a case study on sequ
ence alignment, Persona sustains 1.353 g
igabases aligned per second with 101 bas
e pair reads on a 32&#45;node cluster and ca
n align a full genome in ~16.7 seconds u
sing the SNAP algorithm. Our results dem
onstrate that: (1) alignment computation
 with Persona scales linearly across ser
vers with no measurable completion&#45;time 
imbalance and negligible framework overh
eads; (2) on a single server, sorting wi
th Persona and AGD is up to 2.3× faster
 than commonly used tools, while duplica
te marking is 3× faster; (3) with AGD, 
a 7 node COTS network storage system can
 service up to 60 alignment compute node
s; (4) server cost dominates for a balan
ced system running Persona, while long&#45;t
erm data storage dwarfs the cost of comp
utation.</title>
<path fill="none" stroke="#000000" d="M15221.791,-958.636C15232.4136,-931.281 15254.4409,-874.557 15279.9554,-808.8528"/>
<polygon fill="#000000" stroke="#000000" points="15283.2206,-810.113 15283.5779,-799.5242 15276.6953,-807.579 15283.2206,-810.113"/>
</g>
<!-- SPIN: Seamless Operating System Integrat
ion of Peer&#45;to&#45;Peer DMA Between SSDs and
 GPUs -->
<g id="node57" class="node">
<title>SPIN: Seamless Operating System Integrat
ion of Peer&#45;to&#45;Peer DMA Between SSDs and
 GPUs</title>
<ellipse fill="none" stroke="#000000" cx="15816.022" cy="-461.0336" rx="189.6764" ry="35.2113"/>
<text text-anchor="middle" x="15816.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SPIN: Seamless Operating System Integrat</text>
<text text-anchor="middle" x="15816.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ion of Peer&#45;to&#45;Peer DMA Between SSDs and</text>
<text text-anchor="middle" x="15816.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> GPUs</text>
</g>
<!-- 14&#45;&gt;SPIN: Seamless Operating System Integrat
ion of Peer&#45;to&#45;Peer DMA Between SSDs and
 GPUs -->
<g id="edge58" class="edge">
<title>14&#45;&gt;SPIN: Seamless Operating System Integrat
ion of Peer&#45;to&#45;Peer DMA Between SSDs and
 GPUs</title>
<path fill="none" stroke="#000000" d="M16386.1388,-973.9631C16301.4017,-967.1214 16043.7279,-944.642 16014.022,-922.0672 15877.3147,-818.1777 15833.7436,-600.9492 15820.9318,-506.506"/>
<polygon fill="#000000" stroke="#000000" points="15824.3798,-505.8789 15819.6173,-496.4148 15817.4384,-506.7832 15824.3798,-505.8789"/>
</g>
<!-- Shai Bergman and Tanya Brokhman, Techni
on; Tzachi Cohen, unaffiliated; Mark Si
lberstein, Technion -->
<g id="node58" class="node">
<title>Shai Bergman and Tanya Brokhman, Techni
on; Tzachi Cohen, unaffiliated; Mark Si
lberstein, Technion</title>
<ellipse fill="none" stroke="#000000" cx="16210.022" cy="-461.0336" rx="186.7475" ry="35.2113"/>
<text text-anchor="middle" x="16210.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Shai Bergman and Tanya Brokhman, Techni</text>
<text text-anchor="middle" x="16210.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on; Tzachi Cohen, unaffiliated; Mark Si</text>
<text text-anchor="middle" x="16210.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lberstein, Technion</text>
</g>
<!-- 14&#45;&gt;Shai Bergman and Tanya Brokhman, Techni
on; Tzachi Cohen, unaffiliated; Mark Si
lberstein, Technion -->
<g id="edge59" class="edge">
<title>14&#45;&gt;Shai Bergman and Tanya Brokhman, Techni
on; Tzachi Cohen, unaffiliated; Mark Si
lberstein, Technion</title>
<path fill="none" stroke="#000000" d="M16406.1515,-958.636C16377.9152,-886.9975 16270.2887,-613.937 16227.6092,-505.6543"/>
<polygon fill="#000000" stroke="#000000" points="16230.8495,-504.3304 16223.9263,-496.3104 16224.3371,-506.8973 16230.8495,-504.3304"/>
</g>
<!-- Recent GPUs enable Peer&#45;to&#45;Peer Direct M
emory Access (P2P) from fast peripheral 
devices like NVMe SSDs to exclude the CP
U from the data path between them for ef
ficiency. Unfortunately, using P2P to ac
cess files is challenging because of the
 subtleties of low&#45;level nonstandard int
erfaces, which bypass the OS file I/O la
yers and may hurt system performance.SPI
N integrates P2P into the standard OS fi
le I/O stack, dynamically activating P2P
 where appropriate, transparently to the
 user. It combines P2P with page cache a
ccesses, re&#45;enables read&#45;ahead for seque
ntial reads, all while maintaining stand
ard POSIX FS consistency, portability ac
ross GPUs and SSDs, and compatibility wi
th virtual block devices such as softwar
e RAID.We evaluate SPIN on NVIDIA and AM
D GPUs using standard file I/O benchmark
s, application traces and end&#45;to&#45;end exp
eriments. SPIN achieves significant perf
ormance speedups across a wide range of 
workloads, exceeding P2P throughput by u
p to an order of magnitude. It also boos
ts the performance of an aerial imagery 
rendering application by 2:6× by dynami
cally adapting to its input&#45;dependent fi
le access pattern, and enables 3:3× hig
her throughput for a GPU&#45;accelerated log
 server. -->
<g id="node59" class="node">
<title>Recent GPUs enable Peer&#45;to&#45;Peer Direct M
emory Access (P2P) from fast peripheral 
devices like NVMe SSDs to exclude the CP
U from the data path between them for ef
ficiency. Unfortunately, using P2P to ac
cess files is challenging because of the
 subtleties of low&#45;level nonstandard int
erfaces, which bypass the OS file I/O la
yers and may hurt system performance.SPI
N integrates P2P into the standard OS fi
le I/O stack, dynamically activating P2P
 where appropriate, transparently to the
 user. It combines P2P with page cache a
ccesses, re&#45;enables read&#45;ahead for seque
ntial reads, all while maintaining stand
ard POSIX FS consistency, portability ac
ross GPUs and SSDs, and compatibility wi
th virtual block devices such as softwar
e RAID.We evaluate SPIN on NVIDIA and AM
D GPUs using standard file I/O benchmark
s, application traces and end&#45;to&#45;end exp
eriments. SPIN achieves significant perf
ormance speedups across a wide range of 
workloads, exceeding P2P throughput by u
p to an order of magnitude. It also boos
ts the performance of an aerial imagery 
rendering application by 2:6× by dynami
cally adapting to its input&#45;dependent fi
le access pattern, and enables 3:3× hig
her throughput for a GPU&#45;accelerated log
 server.</title>
<ellipse fill="none" stroke="#000000" cx="16616.022" cy="-461.0336" rx="201.1753" ry="312.5824"/>
<text text-anchor="middle" x="16616.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Recent GPUs enable Peer&#45;to&#45;Peer Direct M</text>
<text text-anchor="middle" x="16616.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">emory Access (P2P) from fast peripheral </text>
<text text-anchor="middle" x="16616.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">devices like NVMe SSDs to exclude the CP</text>
<text text-anchor="middle" x="16616.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">U from the data path between them for ef</text>
<text text-anchor="middle" x="16616.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ficiency. Unfortunately, using P2P to ac</text>
<text text-anchor="middle" x="16616.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cess files is challenging because of the</text>
<text text-anchor="middle" x="16616.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> subtleties of low&#45;level nonstandard int</text>
<text text-anchor="middle" x="16616.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erfaces, which bypass the OS file I/O la</text>
<text text-anchor="middle" x="16616.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">yers and may hurt system performance.SPI</text>
<text text-anchor="middle" x="16616.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">N integrates P2P into the standard OS fi</text>
<text text-anchor="middle" x="16616.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">le I/O stack, dynamically activating P2P</text>
<text text-anchor="middle" x="16616.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> where appropriate, transparently to the</text>
<text text-anchor="middle" x="16616.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> user. It combines P2P with page cache a</text>
<text text-anchor="middle" x="16616.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ccesses, re&#45;enables read&#45;ahead for seque</text>
<text text-anchor="middle" x="16616.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntial reads, all while maintaining stand</text>
<text text-anchor="middle" x="16616.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ard POSIX FS consistency, portability ac</text>
<text text-anchor="middle" x="16616.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ross GPUs and SSDs, and compatibility wi</text>
<text text-anchor="middle" x="16616.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">th virtual block devices such as softwar</text>
<text text-anchor="middle" x="16616.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e RAID.We evaluate SPIN on NVIDIA and AM</text>
<text text-anchor="middle" x="16616.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">D GPUs using standard file I/O benchmark</text>
<text text-anchor="middle" x="16616.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s, application traces and end&#45;to&#45;end exp</text>
<text text-anchor="middle" x="16616.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eriments. SPIN achieves significant perf</text>
<text text-anchor="middle" x="16616.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ormance speedups across a wide range of </text>
<text text-anchor="middle" x="16616.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">workloads, exceeding P2P throughput by u</text>
<text text-anchor="middle" x="16616.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">p to an order of magnitude. It also boos</text>
<text text-anchor="middle" x="16616.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ts the performance of an aerial imagery </text>
<text text-anchor="middle" x="16616.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rendering application by 2:6× by dynami</text>
<text text-anchor="middle" x="16616.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cally adapting to its input&#45;dependent fi</text>
<text text-anchor="middle" x="16616.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">le access pattern, and enables 3:3× hig</text>
<text text-anchor="middle" x="16616.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">her throughput for a GPU&#45;accelerated log</text>
<text text-anchor="middle" x="16616.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> server.</text>
</g>
<!-- 14&#45;&gt;Recent GPUs enable Peer&#45;to&#45;Peer Direct M
emory Access (P2P) from fast peripheral 
devices like NVMe SSDs to exclude the CP
U from the data path between them for ef
ficiency. Unfortunately, using P2P to ac
cess files is challenging because of the
 subtleties of low&#45;level nonstandard int
erfaces, which bypass the OS file I/O la
yers and may hurt system performance.SPI
N integrates P2P into the standard OS fi
le I/O stack, dynamically activating P2P
 where appropriate, transparently to the
 user. It combines P2P with page cache a
ccesses, re&#45;enables read&#45;ahead for seque
ntial reads, all while maintaining stand
ard POSIX FS consistency, portability ac
ross GPUs and SSDs, and compatibility wi
th virtual block devices such as softwar
e RAID.We evaluate SPIN on NVIDIA and AM
D GPUs using standard file I/O benchmark
s, application traces and end&#45;to&#45;end exp
eriments. SPIN achieves significant perf
ormance speedups across a wide range of 
workloads, exceeding P2P throughput by u
p to an order of magnitude. It also boos
ts the performance of an aerial imagery 
rendering application by 2:6× by dynami
cally adapting to its input&#45;dependent fi
le access pattern, and enables 3:3× hig
her throughput for a GPU&#45;accelerated log
 server. -->
<g id="edge60" class="edge">
<title>14&#45;&gt;Recent GPUs enable Peer&#45;to&#45;Peer Direct M
emory Access (P2P) from fast peripheral 
devices like NVMe SSDs to exclude the CP
U from the data path between them for ef
ficiency. Unfortunately, using P2P to ac
cess files is challenging because of the
 subtleties of low&#45;level nonstandard int
erfaces, which bypass the OS file I/O la
yers and may hurt system performance.SPI
N integrates P2P into the standard OS fi
le I/O stack, dynamically activating P2P
 where appropriate, transparently to the
 user. It combines P2P with page cache a
ccesses, re&#45;enables read&#45;ahead for seque
ntial reads, all while maintaining stand
ard POSIX FS consistency, portability ac
ross GPUs and SSDs, and compatibility wi
th virtual block devices such as softwar
e RAID.We evaluate SPIN on NVIDIA and AM
D GPUs using standard file I/O benchmark
s, application traces and end&#45;to&#45;end exp
eriments. SPIN achieves significant perf
ormance speedups across a wide range of 
workloads, exceeding P2P throughput by u
p to an order of magnitude. It also boos
ts the performance of an aerial imagery 
rendering application by 2:6× by dynami
cally adapting to its input&#45;dependent fi
le access pattern, and enables 3:3× hig
her throughput for a GPU&#45;accelerated log
 server.</title>
<path fill="none" stroke="#000000" d="M16419.8925,-958.636C16434.4539,-921.692 16470.129,-831.1803 16507.122,-737.325"/>
<polygon fill="#000000" stroke="#000000" points="16510.4104,-738.5266 16510.8212,-727.9397 16503.898,-735.9597 16510.4104,-738.5266"/>
</g>
<!-- Poseidon: An Efficient Communication Arc
hitecture for Distributed Deep Learning 
on GPU Clusters -->
<g id="node61" class="node">
<title>Poseidon: An Efficient Communication Arc
hitecture for Distributed Deep Learning 
on GPU Clusters</title>
<ellipse fill="none" stroke="#000000" cx="17019.022" cy="-461.0336" rx="183.998" ry="35.2113"/>
<text text-anchor="middle" x="17019.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Poseidon: An Efficient Communication Arc</text>
<text text-anchor="middle" x="17019.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hitecture for Distributed Deep Learning </text>
<text text-anchor="middle" x="17019.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on GPU Clusters</text>
</g>
<!-- 15&#45;&gt;Poseidon: An Efficient Communication Arc
hitecture for Distributed Deep Learning 
on GPU Clusters -->
<g id="edge62" class="edge">
<title>15&#45;&gt;Poseidon: An Efficient Communication Arc
hitecture for Distributed Deep Learning 
on GPU Clusters</title>
<path fill="none" stroke="#000000" d="M17575.7753,-975.724C17496.7049,-974.2113 17269.185,-966.0473 17212.022,-922.0672 17076.6309,-817.9002 17035.3381,-601.2933 17023.4858,-506.7882"/>
<polygon fill="#000000" stroke="#000000" points="17026.9403,-506.1988 17022.2736,-496.6871 17019.9901,-507.0329 17026.9403,-506.1988"/>
</g>
<!-- Hao Zhang, Carnegie Mellon University; Z
eyu Zheng, Petuum Inc.; Shizhen Xu and W
ei Dai, Carnegie Mellon University; Qiro
ng Ho, Petuum Inc.; Xiaodan Liang, Zhiti
ng Hu, Jinliang Wei, and Pengtao Xie, Ca
rnegie Mellon University; Eric P. Xing, 
Petuum Inc. -->
<g id="node62" class="node">
<title>Hao Zhang, Carnegie Mellon University; Z
eyu Zheng, Petuum Inc.; Shizhen Xu and W
ei Dai, Carnegie Mellon University; Qiro
ng Ho, Petuum Inc.; Xiaodan Liang, Zhiti
ng Hu, Jinliang Wei, and Pengtao Xie, Ca
rnegie Mellon University; Eric P. Xing, 
Petuum Inc.</title>
<ellipse fill="none" stroke="#000000" cx="17407.022" cy="-461.0336" rx="186.0323" ry="74.9067"/>
<text text-anchor="middle" x="17407.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Hao Zhang, Carnegie Mellon University; Z</text>
<text text-anchor="middle" x="17407.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eyu Zheng, Petuum Inc.; Shizhen Xu and W</text>
<text text-anchor="middle" x="17407.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ei Dai, Carnegie Mellon University; Qiro</text>
<text text-anchor="middle" x="17407.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng Ho, Petuum Inc.; Xiaodan Liang, Zhiti</text>
<text text-anchor="middle" x="17407.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng Hu, Jinliang Wei, and Pengtao Xie, Ca</text>
<text text-anchor="middle" x="17407.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rnegie Mellon University; Eric P. Xing, </text>
<text text-anchor="middle" x="17407.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Petuum Inc.</text>
</g>
<!-- 15&#45;&gt;Hao Zhang, Carnegie Mellon University; Z
eyu Zheng, Petuum Inc.; Shizhen Xu and W
ei Dai, Carnegie Mellon University; Qiro
ng Ho, Petuum Inc.; Xiaodan Liang, Zhiti
ng Hu, Jinliang Wei, and Pengtao Xie, Ca
rnegie Mellon University; Eric P. Xing, 
Petuum Inc. -->
<g id="edge63" class="edge">
<title>15&#45;&gt;Hao Zhang, Carnegie Mellon University; Z
eyu Zheng, Petuum Inc.; Shizhen Xu and W
ei Dai, Carnegie Mellon University; Qiro
ng Ho, Petuum Inc.; Xiaodan Liang, Zhiti
ng Hu, Jinliang Wei, and Pengtao Xie, Ca
rnegie Mellon University; Eric P. Xing, 
Petuum Inc.</title>
<path fill="none" stroke="#000000" d="M17596.2752,-958.3386C17571.7391,-893.8645 17486.2189,-669.1411 17438.9821,-545.0159"/>
<polygon fill="#000000" stroke="#000000" points="17442.1979,-543.6254 17435.3699,-535.5241 17435.6556,-546.1151 17442.1979,-543.6254"/>
</g>
<!-- Deep learning models can take weeks to t
rain on a single GPU&#45;equipped machine, n
ecessitating scaling out DL training to 
a GPU&#45;cluster. However, current distribu
ted DL implementations can scale poorly 
due to substantial parameter synchroniza
tion over the network, because the high 
throughput of GPUs allows more data batc
hes to be processed per unit time than C
PUs, leading to more frequent network sy
nchronization. We present Poseidon, an e
fficient communication architecture for 
distributed DL on GPUs. Poseidon exploit
s the layered model structures in DL pro
grams to overlap communication and compu
tation, reducing bursty network communic
ation. Moreover, Poseidon uses a hybrid 
communication scheme that optimizes the 
number of bytes required to synchronize 
each layer, according to layer propertie
s and the number of machines. We show th
at Poseidon is applicable to different D
L frameworks by plugging Poseidon into C
affe and TensorFlow. We show that Poseid
on enables Caffe and TensorFlow to achie
ve 15.5x speed&#45;up on 16 single&#45;GPU machi
nes, even with limited bandwidth (10GbE)
 and the challenging VGG19&#45;22K network f
or image classification. Moreover, Posei
don&#45;enabled TensorFlow achieves 31.5x sp
eed&#45;up with 32 single&#45;GPU machines on In
ception&#45;V3, a 50% improvement over the o
pen&#45;source TensorFlow (20x speed&#45;up). -->
<g id="node63" class="node">
<title>Deep learning models can take weeks to t
rain on a single GPU&#45;equipped machine, n
ecessitating scaling out DL training to 
a GPU&#45;cluster. However, current distribu
ted DL implementations can scale poorly 
due to substantial parameter synchroniza
tion over the network, because the high 
throughput of GPUs allows more data batc
hes to be processed per unit time than C
PUs, leading to more frequent network sy
nchronization. We present Poseidon, an e
fficient communication architecture for 
distributed DL on GPUs. Poseidon exploit
s the layered model structures in DL pro
grams to overlap communication and compu
tation, reducing bursty network communic
ation. Moreover, Poseidon uses a hybrid 
communication scheme that optimizes the 
number of bytes required to synchronize 
each layer, according to layer propertie
s and the number of machines. We show th
at Poseidon is applicable to different D
L frameworks by plugging Poseidon into C
affe and TensorFlow. We show that Poseid
on enables Caffe and TensorFlow to achie
ve 15.5x speed&#45;up on 16 single&#45;GPU machi
nes, even with limited bandwidth (10GbE)
 and the challenging VGG19&#45;22K network f
or image classification. Moreover, Posei
don&#45;enabled TensorFlow achieves 31.5x sp
eed&#45;up with 32 single&#45;GPU machines on In
ception&#45;V3, a 50% improvement over the o
pen&#45;source TensorFlow (20x speed&#45;up).</title>
<ellipse fill="none" stroke="#000000" cx="17799.022" cy="-461.0336" rx="188.167" ry="332.1805"/>
<text text-anchor="middle" x="17799.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Deep learning models can take weeks to t</text>
<text text-anchor="middle" x="17799.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rain on a single GPU&#45;equipped machine, n</text>
<text text-anchor="middle" x="17799.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ecessitating scaling out DL training to </text>
<text text-anchor="middle" x="17799.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a GPU&#45;cluster. However, current distribu</text>
<text text-anchor="middle" x="17799.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ted DL implementations can scale poorly </text>
<text text-anchor="middle" x="17799.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">due to substantial parameter synchroniza</text>
<text text-anchor="middle" x="17799.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion over the network, because the high </text>
<text text-anchor="middle" x="17799.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">throughput of GPUs allows more data batc</text>
<text text-anchor="middle" x="17799.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hes to be processed per unit time than C</text>
<text text-anchor="middle" x="17799.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">PUs, leading to more frequent network sy</text>
<text text-anchor="middle" x="17799.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nchronization. We present Poseidon, an e</text>
<text text-anchor="middle" x="17799.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">fficient communication architecture for </text>
<text text-anchor="middle" x="17799.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">distributed DL on GPUs. Poseidon exploit</text>
<text text-anchor="middle" x="17799.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s the layered model structures in DL pro</text>
<text text-anchor="middle" x="17799.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">grams to overlap communication and compu</text>
<text text-anchor="middle" x="17799.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tation, reducing bursty network communic</text>
<text text-anchor="middle" x="17799.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ation. Moreover, Poseidon uses a hybrid </text>
<text text-anchor="middle" x="17799.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">communication scheme that optimizes the </text>
<text text-anchor="middle" x="17799.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">number of bytes required to synchronize </text>
<text text-anchor="middle" x="17799.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">each layer, according to layer propertie</text>
<text text-anchor="middle" x="17799.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s and the number of machines. We show th</text>
<text text-anchor="middle" x="17799.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at Poseidon is applicable to different D</text>
<text text-anchor="middle" x="17799.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">L frameworks by plugging Poseidon into C</text>
<text text-anchor="middle" x="17799.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">affe and TensorFlow. We show that Poseid</text>
<text text-anchor="middle" x="17799.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on enables Caffe and TensorFlow to achie</text>
<text text-anchor="middle" x="17799.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ve 15.5x speed&#45;up on 16 single&#45;GPU machi</text>
<text text-anchor="middle" x="17799.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nes, even with limited bandwidth (10GbE)</text>
<text text-anchor="middle" x="17799.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and the challenging VGG19&#45;22K network f</text>
<text text-anchor="middle" x="17799.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">or image classification. Moreover, Posei</text>
<text text-anchor="middle" x="17799.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">don&#45;enabled TensorFlow achieves 31.5x sp</text>
<text text-anchor="middle" x="17799.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eed&#45;up with 32 single&#45;GPU machines on In</text>
<text text-anchor="middle" x="17799.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ception&#45;V3, a 50% improvement over the o</text>
<text text-anchor="middle" x="17799.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pen&#45;source TensorFlow (20x speed&#45;up).</text>
</g>
<!-- 15&#45;&gt;Deep learning models can take weeks to t
rain on a single GPU&#45;equipped machine, n
ecessitating scaling out DL training to 
a GPU&#45;cluster. However, current distribu
ted DL implementations can scale poorly 
due to substantial parameter synchroniza
tion over the network, because the high 
throughput of GPUs allows more data batc
hes to be processed per unit time than C
PUs, leading to more frequent network sy
nchronization. We present Poseidon, an e
fficient communication architecture for 
distributed DL on GPUs. Poseidon exploit
s the layered model structures in DL pro
grams to overlap communication and compu
tation, reducing bursty network communic
ation. Moreover, Poseidon uses a hybrid 
communication scheme that optimizes the 
number of bytes required to synchronize 
each layer, according to layer propertie
s and the number of machines. We show th
at Poseidon is applicable to different D
L frameworks by plugging Poseidon into C
affe and TensorFlow. We show that Poseid
on enables Caffe and TensorFlow to achie
ve 15.5x speed&#45;up on 16 single&#45;GPU machi
nes, even with limited bandwidth (10GbE)
 and the challenging VGG19&#45;22K network f
or image classification. Moreover, Posei
don&#45;enabled TensorFlow achieves 31.5x sp
eed&#45;up with 32 single&#45;GPU machines on In
ception&#45;V3, a 50% improvement over the o
pen&#45;source TensorFlow (20x speed&#45;up). -->
<g id="edge64" class="edge">
<title>15&#45;&gt;Deep learning models can take weeks to t
rain on a single GPU&#45;equipped machine, n
ecessitating scaling out DL training to 
a GPU&#45;cluster. However, current distribu
ted DL implementations can scale poorly 
due to substantial parameter synchroniza
tion over the network, because the high 
throughput of GPUs allows more data batc
hes to be processed per unit time than C
PUs, leading to more frequent network sy
nchronization. We present Poseidon, an e
fficient communication architecture for 
distributed DL on GPUs. Poseidon exploit
s the layered model structures in DL pro
grams to overlap communication and compu
tation, reducing bursty network communic
ation. Moreover, Poseidon uses a hybrid 
communication scheme that optimizes the 
number of bytes required to synchronize 
each layer, according to layer propertie
s and the number of machines. We show th
at Poseidon is applicable to different D
L frameworks by plugging Poseidon into C
affe and TensorFlow. We show that Poseid
on enables Caffe and TensorFlow to achie
ve 15.5x speed&#45;up on 16 single&#45;GPU machi
nes, even with limited bandwidth (10GbE)
 and the challenging VGG19&#45;22K network f
or image classification. Moreover, Posei
don&#45;enabled TensorFlow achieves 31.5x sp
eed&#45;up with 32 single&#45;GPU machines on In
ception&#45;V3, a 50% improvement over the o
pen&#45;source TensorFlow (20x speed&#45;up).</title>
<path fill="none" stroke="#000000" d="M17609.7688,-958.3386C17623.4377,-922.4203 17656.0335,-836.7677 17690.3929,-746.4808"/>
<polygon fill="#000000" stroke="#000000" points="17693.761,-747.4708 17694.0466,-736.8798 17687.2187,-744.981 17693.761,-747.4708"/>
</g>
<!-- Garaph: Efficient GPU&#45;accelerated Graph 
Processing on a Single Machine with Bala
nced Replication -->
<g id="node65" class="node">
<title>Garaph: Efficient GPU&#45;accelerated Graph 
Processing on a Single Machine with Bala
nced Replication</title>
<ellipse fill="none" stroke="#000000" cx="18185.022" cy="-461.0336" rx="179.5556" ry="35.2113"/>
<text text-anchor="middle" x="18185.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Garaph: Efficient GPU&#45;accelerated Graph </text>
<text text-anchor="middle" x="18185.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Processing on a Single Machine with Bala</text>
<text text-anchor="middle" x="18185.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nced Replication</text>
</g>
<!-- 16&#45;&gt;Garaph: Efficient GPU&#45;accelerated Graph 
Processing on a Single Machine with Bala
nced Replication -->
<g id="edge66" class="edge">
<title>16&#45;&gt;Garaph: Efficient GPU&#45;accelerated Graph 
Processing on a Single Machine with Bala
nced Replication</title>
<path fill="none" stroke="#000000" d="M18742.0268,-973.9489C18657.5705,-967.1085 18402.2549,-944.7347 18373.022,-922.0672 18238.541,-817.7896 18199.7154,-601.2422 18188.9544,-506.7705"/>
<polygon fill="#000000" stroke="#000000" points="18192.4172,-506.2371 18187.859,-496.673 18185.458,-506.9922 18192.4172,-506.2371"/>
</g>
<!-- Lingxiao Ma, Zhi Yang, and Han Chen, Com
puter Science Department, Peking Univers
ity, Beijing, China; Jilong Xue, Microso
ft Research, Beijing, China; Yafei Dai, 
Institute of Big Data Technologies, Shen
zhen Key Lab for Cloud Computing Technol
ogy &amp; Applications, School of Electronic
s and Computer Engineering (SECE), Pekin
g University, Shenzhen, China -->
<g id="node66" class="node">
<title>Lingxiao Ma, Zhi Yang, and Han Chen, Com
puter Science Department, Peking Univers
ity, Beijing, China; Jilong Xue, Microso
ft Research, Beijing, China; Yafei Dai, 
Institute of Big Data Technologies, Shen
zhen Key Lab for Cloud Computing Technol
ogy &amp; Applications, School of Electronic
s and Computer Engineering (SECE), Pekin
g University, Shenzhen, China</title>
<ellipse fill="none" stroke="#000000" cx="18572.022" cy="-461.0336" rx="189.5509" ry="94.5053"/>
<text text-anchor="middle" x="18572.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Lingxiao Ma, Zhi Yang, and Han Chen, Com</text>
<text text-anchor="middle" x="18572.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">puter Science Department, Peking Univers</text>
<text text-anchor="middle" x="18572.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ity, Beijing, China; Jilong Xue, Microso</text>
<text text-anchor="middle" x="18572.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ft Research, Beijing, China; Yafei Dai, </text>
<text text-anchor="middle" x="18572.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Institute of Big Data Technologies, Shen</text>
<text text-anchor="middle" x="18572.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">zhen Key Lab for Cloud Computing Technol</text>
<text text-anchor="middle" x="18572.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ogy &amp; Applications, School of Electronic</text>
<text text-anchor="middle" x="18572.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s and Computer Engineering (SECE), Pekin</text>
<text text-anchor="middle" x="18572.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g University, Shenzhen, China</text>
</g>
<!-- 16&#45;&gt;Lingxiao Ma, Zhi Yang, and Han Chen, Com
puter Science Department, Peking Univers
ity, Beijing, China; Jilong Xue, Microso
ft Research, Beijing, China; Yafei Dai, 
Institute of Big Data Technologies, Shen
zhen Key Lab for Cloud Computing Technol
ogy &amp; Applications, School of Electronic
s and Computer Engineering (SECE), Pekin
g University, Shenzhen, China -->
<g id="edge67" class="edge">
<title>16&#45;&gt;Lingxiao Ma, Zhi Yang, and Han Chen, Com
puter Science Department, Peking Univers
ity, Beijing, China; Jilong Xue, Microso
ft Research, Beijing, China; Yafei Dai, 
Institute of Big Data Technologies, Shen
zhen Key Lab for Cloud Computing Technol
ogy &amp; Applications, School of Electronic
s and Computer Engineering (SECE), Pekin
g University, Shenzhen, China</title>
<path fill="none" stroke="#000000" d="M18762.2408,-958.3386C18738.7594,-896.9492 18659.7076,-690.2775 18611.213,-563.4939"/>
<polygon fill="#000000" stroke="#000000" points="18614.4727,-562.2189 18607.631,-554.1293 18607.9346,-564.7198 18614.4727,-562.2189"/>
</g>
<!-- Recent advances in storage (e.g., DDR4, 
SSD, NVM) and accelerators (e.g., GPU, X
eon&#45;Phi, FPGA) provide the opportunity t
o efficiently process large&#45;scale graphs
 on a single machine. In this paper, we 
present Garaph, a GPU&#45;accelerated graph 
processing system on a single machine wi
th secondary storage as memory extension
. Garaph is novel in three ways. First, 
Garaph proposes a vertex replication deg
ree customization scheme that maximizes 
the GPU utilization given vertices’ de
grees and space constraints. Second, Gar
aph adopts a balanced edge&#45;based partiti
on ensuring work balance over CPU thread
s, and also a hybrid of notify&#45;pull and 
pull computation models optimized for fa
st graph processing on the CPU. Third, G
araph uses a dynamic workload assignment
 scheme which takes into account both ch
aracteristics of processing elements and
 graph algorithms. Our evaluation with s
ix widely used graph applications on sev
en real&#45;world graphs shows that Garaph s
ignificantly outperforms existing state&#45;
of&#45;art CPU&#45;based and GPU&#45;based graph pro
cessing systems, getting up to 5.36x spe
edup over the fastest among them. -->
<g id="node67" class="node">
<title>Recent advances in storage (e.g., DDR4, 
SSD, NVM) and accelerators (e.g., GPU, X
eon&#45;Phi, FPGA) provide the opportunity t
o efficiently process large&#45;scale graphs
 on a single machine. In this paper, we 
present Garaph, a GPU&#45;accelerated graph 
processing system on a single machine wi
th secondary storage as memory extension
. Garaph is novel in three ways. First, 
Garaph proposes a vertex replication deg
ree customization scheme that maximizes 
the GPU utilization given vertices’ de
grees and space constraints. Second, Gar
aph adopts a balanced edge&#45;based partiti
on ensuring work balance over CPU thread
s, and also a hybrid of notify&#45;pull and 
pull computation models optimized for fa
st graph processing on the CPU. Third, G
araph uses a dynamic workload assignment
 scheme which takes into account both ch
aracteristics of processing elements and
 graph algorithms. Our evaluation with s
ix widely used graph applications on sev
en real&#45;world graphs shows that Garaph s
ignificantly outperforms existing state&#45;
of&#45;art CPU&#45;based and GPU&#45;based graph pro
cessing systems, getting up to 5.36x spe
edup over the fastest among them.</title>
<ellipse fill="none" stroke="#000000" cx="18966.022" cy="-461.0336" rx="186.3704" ry="282.6855"/>
<text text-anchor="middle" x="18966.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Recent advances in storage (e.g., DDR4, </text>
<text text-anchor="middle" x="18966.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SSD, NVM) and accelerators (e.g., GPU, X</text>
<text text-anchor="middle" x="18966.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eon&#45;Phi, FPGA) provide the opportunity t</text>
<text text-anchor="middle" x="18966.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o efficiently process large&#45;scale graphs</text>
<text text-anchor="middle" x="18966.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> on a single machine. In this paper, we </text>
<text text-anchor="middle" x="18966.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">present Garaph, a GPU&#45;accelerated graph </text>
<text text-anchor="middle" x="18966.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">processing system on a single machine wi</text>
<text text-anchor="middle" x="18966.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">th secondary storage as memory extension</text>
<text text-anchor="middle" x="18966.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. Garaph is novel in three ways. First, </text>
<text text-anchor="middle" x="18966.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Garaph proposes a vertex replication deg</text>
<text text-anchor="middle" x="18966.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ree customization scheme that maximizes </text>
<text text-anchor="middle" x="18966.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the GPU utilization given vertices’ de</text>
<text text-anchor="middle" x="18966.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">grees and space constraints. Second, Gar</text>
<text text-anchor="middle" x="18966.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aph adopts a balanced edge&#45;based partiti</text>
<text text-anchor="middle" x="18966.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on ensuring work balance over CPU thread</text>
<text text-anchor="middle" x="18966.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s, and also a hybrid of notify&#45;pull and </text>
<text text-anchor="middle" x="18966.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pull computation models optimized for fa</text>
<text text-anchor="middle" x="18966.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">st graph processing on the CPU. Third, G</text>
<text text-anchor="middle" x="18966.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">araph uses a dynamic workload assignment</text>
<text text-anchor="middle" x="18966.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> scheme which takes into account both ch</text>
<text text-anchor="middle" x="18966.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aracteristics of processing elements and</text>
<text text-anchor="middle" x="18966.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> graph algorithms. Our evaluation with s</text>
<text text-anchor="middle" x="18966.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ix widely used graph applications on sev</text>
<text text-anchor="middle" x="18966.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">en real&#45;world graphs shows that Garaph s</text>
<text text-anchor="middle" x="18966.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ignificantly outperforms existing state&#45;</text>
<text text-anchor="middle" x="18966.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of&#45;art CPU&#45;based and GPU&#45;based graph pro</text>
<text text-anchor="middle" x="18966.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cessing systems, getting up to 5.36x spe</text>
<text text-anchor="middle" x="18966.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">edup over the fastest among them.</text>
</g>
<!-- 16&#45;&gt;Recent advances in storage (e.g., DDR4, 
SSD, NVM) and accelerators (e.g., GPU, X
eon&#45;Phi, FPGA) provide the opportunity t
o efficiently process large&#45;scale graphs
 on a single machine. In this paper, we 
present Garaph, a GPU&#45;accelerated graph 
processing system on a single machine wi
th secondary storage as memory extension
. Garaph is novel in three ways. First, 
Garaph proposes a vertex replication deg
ree customization scheme that maximizes 
the GPU utilization given vertices’ de
grees and space constraints. Second, Gar
aph adopts a balanced edge&#45;based partiti
on ensuring work balance over CPU thread
s, and also a hybrid of notify&#45;pull and 
pull computation models optimized for fa
st graph processing on the CPU. Third, G
araph uses a dynamic workload assignment
 scheme which takes into account both ch
aracteristics of processing elements and
 graph algorithms. Our evaluation with s
ix widely used graph applications on sev
en real&#45;world graphs shows that Garaph s
ignificantly outperforms existing state&#45;
of&#45;art CPU&#45;based and GPU&#45;based graph pro
cessing systems, getting up to 5.36x spe
edup over the fastest among them. -->
<g id="edge68" class="edge">
<title>16&#45;&gt;Recent advances in storage (e.g., DDR4, 
SSD, NVM) and accelerators (e.g., GPU, X
eon&#45;Phi, FPGA) provide the opportunity t
o efficiently process large&#45;scale graphs
 on a single machine. In this paper, we 
present Garaph, a GPU&#45;accelerated graph 
processing system on a single machine wi
th secondary storage as memory extension
. Garaph is novel in three ways. First, 
Garaph proposes a vertex replication deg
ree customization scheme that maximizes 
the GPU utilization given vertices’ de
grees and space constraints. Second, Gar
aph adopts a balanced edge&#45;based partiti
on ensuring work balance over CPU thread
s, and also a hybrid of notify&#45;pull and 
pull computation models optimized for fa
st graph processing on the CPU. Third, G
araph uses a dynamic workload assignment
 scheme which takes into account both ch
aracteristics of processing elements and
 graph algorithms. Our evaluation with s
ix widely used graph applications on sev
en real&#45;world graphs shows that Garaph s
ignificantly outperforms existing state&#45;
of&#45;art CPU&#45;based and GPU&#45;based graph pro
cessing systems, getting up to 5.36x spe
edup over the fastest among them.</title>
<path fill="none" stroke="#000000" d="M18775.8032,-958.3386C18791.1229,-918.287 18830.096,-816.3963 18868.805,-715.1963"/>
<polygon fill="#000000" stroke="#000000" points="18872.1252,-716.3127 18872.4288,-705.7222 18865.5871,-713.8119 18872.1252,-716.3127"/>
</g>
<!-- GPU Taint Tracking -->
<g id="node69" class="node">
<title>GPU Taint Tracking</title>
<ellipse fill="none" stroke="#000000" cx="19252.022" cy="-461.0336" rx="81.6341" ry="18"/>
<text text-anchor="middle" x="19252.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">GPU Taint Tracking</text>
</g>
<!-- 17&#45;&gt;GPU Taint Tracking -->
<g id="edge70" class="edge">
<title>17&#45;&gt;GPU Taint Tracking</title>
<path fill="none" stroke="#000000" d="M19703.0847,-974.1161C19619.4591,-967.8153 19368.3185,-946.9682 19342.022,-922.0672 19217.9125,-804.5442 19236.6967,-570.4311 19247.5864,-489.4091"/>
<polygon fill="#000000" stroke="#000000" points="19251.0606,-489.837 19248.9918,-479.4462 19244.1292,-488.8592 19251.0606,-489.837"/>
</g>
<!-- Ari B. Hayes, Rutgers University; Lingda
 Li, Brookhaven National Laboratory; Moh
ammad Hedayati, University of Rochester;
 Jiahuan He and Eddy Z. Zhang, Rutgers U
niversity; Kai Shen, Google -->
<g id="node70" class="node">
<title>Ari B. Hayes, Rutgers University; Lingda
 Li, Brookhaven National Laboratory; Moh
ammad Hedayati, University of Rochester;
 Jiahuan He and Eddy Z. Zhang, Rutgers U
niversity; Kai Shen, Google</title>
<ellipse fill="none" stroke="#000000" cx="19534.022" cy="-461.0336" rx="182.7262" ry="55.3091"/>
<text text-anchor="middle" x="19534.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Ari B. Hayes, Rutgers University; Lingda</text>
<text text-anchor="middle" x="19534.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Li, Brookhaven National Laboratory; Moh</text>
<text text-anchor="middle" x="19534.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ammad Hedayati, University of Rochester;</text>
<text text-anchor="middle" x="19534.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Jiahuan He and Eddy Z. Zhang, Rutgers U</text>
<text text-anchor="middle" x="19534.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">niversity; Kai Shen, Google</text>
</g>
<!-- 17&#45;&gt;Ari B. Hayes, Rutgers University; Lingda
 Li, Brookhaven National Laboratory; Moh
ammad Hedayati, University of Rochester;
 Jiahuan He and Eddy Z. Zhang, Rutgers U
niversity; Kai Shen, Google -->
<g id="edge71" class="edge">
<title>17&#45;&gt;Ari B. Hayes, Rutgers University; Lingda
 Li, Brookhaven National Laboratory; Moh
ammad Hedayati, University of Rochester;
 Jiahuan He and Eddy Z. Zhang, Rutgers U
niversity; Kai Shen, Google</title>
<path fill="none" stroke="#000000" d="M19723.2752,-958.3386C19697.4133,-890.3807 19603.799,-644.3882 19558.676,-525.8175"/>
<polygon fill="#000000" stroke="#000000" points="19561.8159,-524.2277 19554.988,-516.1264 19555.2736,-526.7174 19561.8159,-524.2277"/>
</g>
<!-- Dynamic tainting tracks the influence of
 certain inputs (taint sources) through 
execution and it is a powerful tool for 
information flow analysis and security. 
Taint tracking has primarily targeted CP
U program executions. Motivated by recen
t recognition of information leaking in 
GPU memory and GPU&#45;resident malware, thi
s paper presents the first design and pr
ototype implementation of a taint tracki
ng system on GPUs. Our design combines a
 static binary instrumentation with dyna
mic tainting at runtime. We present new 
performance optimizations by exploiting 
unique GPU characteristics—a large por
tion of instructions on GPU runtime para
meters and constant memory can be safely
 eliminated from taint tracking; large G
PU register file allows fast maintenance
 of a hot portion of the taint map. Expe
riments show that these techniques impro
ved the GPU taint tracking performance b
y 5 to 20 times for a range of image pro
cessing, data encryption, and deep learn
ing applications. We further demonstrate
 that GPU taint tracking can enable zero
ing sensitive data to minimize informati
on leaking as well as identifying and co
untering GPU&#45;resident malware. -->
<g id="node71" class="node">
<title>Dynamic tainting tracks the influence of
 certain inputs (taint sources) through 
execution and it is a powerful tool for 
information flow analysis and security. 
Taint tracking has primarily targeted CP
U program executions. Motivated by recen
t recognition of information leaking in 
GPU memory and GPU&#45;resident malware, thi
s paper presents the first design and pr
ototype implementation of a taint tracki
ng system on GPUs. Our design combines a
 static binary instrumentation with dyna
mic tainting at runtime. We present new 
performance optimizations by exploiting 
unique GPU characteristics—a large por
tion of instructions on GPU runtime para
meters and constant memory can be safely
 eliminated from taint tracking; large G
PU register file allows fast maintenance
 of a hot portion of the taint map. Expe
riments show that these techniques impro
ved the GPU taint tracking performance b
y 5 to 20 times for a range of image pro
cessing, data encryption, and deep learn
ing applications. We further demonstrate
 that GPU taint tracking can enable zero
ing sensitive data to minimize informati
on leaking as well as identifying and co
untering GPU&#45;resident malware.</title>
<ellipse fill="none" stroke="#000000" cx="19927.022" cy="-461.0336" rx="192.4329" ry="292.9846"/>
<text text-anchor="middle" x="19927.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Dynamic tainting tracks the influence of</text>
<text text-anchor="middle" x="19927.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> certain inputs (taint sources) through </text>
<text text-anchor="middle" x="19927.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">execution and it is a powerful tool for </text>
<text text-anchor="middle" x="19927.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">information flow analysis and security. </text>
<text text-anchor="middle" x="19927.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Taint tracking has primarily targeted CP</text>
<text text-anchor="middle" x="19927.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">U program executions. Motivated by recen</text>
<text text-anchor="middle" x="19927.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t recognition of information leaking in </text>
<text text-anchor="middle" x="19927.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">GPU memory and GPU&#45;resident malware, thi</text>
<text text-anchor="middle" x="19927.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s paper presents the first design and pr</text>
<text text-anchor="middle" x="19927.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ototype implementation of a taint tracki</text>
<text text-anchor="middle" x="19927.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng system on GPUs. Our design combines a</text>
<text text-anchor="middle" x="19927.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> static binary instrumentation with dyna</text>
<text text-anchor="middle" x="19927.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mic tainting at runtime. We present new </text>
<text text-anchor="middle" x="19927.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">performance optimizations by exploiting </text>
<text text-anchor="middle" x="19927.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">unique GPU characteristics—a large por</text>
<text text-anchor="middle" x="19927.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion of instructions on GPU runtime para</text>
<text text-anchor="middle" x="19927.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">meters and constant memory can be safely</text>
<text text-anchor="middle" x="19927.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> eliminated from taint tracking; large G</text>
<text text-anchor="middle" x="19927.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">PU register file allows fast maintenance</text>
<text text-anchor="middle" x="19927.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of a hot portion of the taint map. Expe</text>
<text text-anchor="middle" x="19927.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">riments show that these techniques impro</text>
<text text-anchor="middle" x="19927.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ved the GPU taint tracking performance b</text>
<text text-anchor="middle" x="19927.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y 5 to 20 times for a range of image pro</text>
<text text-anchor="middle" x="19927.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cessing, data encryption, and deep learn</text>
<text text-anchor="middle" x="19927.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing applications. We further demonstrate</text>
<text text-anchor="middle" x="19927.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> that GPU taint tracking can enable zero</text>
<text text-anchor="middle" x="19927.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing sensitive data to minimize informati</text>
<text text-anchor="middle" x="19927.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on leaking as well as identifying and co</text>
<text text-anchor="middle" x="19927.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">untering GPU&#45;resident malware.</text>
</g>
<!-- 17&#45;&gt;Dynamic tainting tracks the influence of
 certain inputs (taint sources) through 
execution and it is a powerful tool for 
information flow analysis and security. 
Taint tracking has primarily targeted CP
U program executions. Motivated by recen
t recognition of information leaking in 
GPU memory and GPU&#45;resident malware, thi
s paper presents the first design and pr
ototype implementation of a taint tracki
ng system on GPUs. Our design combines a
 static binary instrumentation with dyna
mic tainting at runtime. We present new 
performance optimizations by exploiting 
unique GPU characteristics—a large por
tion of instructions on GPU runtime para
meters and constant memory can be safely
 eliminated from taint tracking; large G
PU register file allows fast maintenance
 of a hot portion of the taint map. Expe
riments show that these techniques impro
ved the GPU taint tracking performance b
y 5 to 20 times for a range of image pro
cessing, data encryption, and deep learn
ing applications. We further demonstrate
 that GPU taint tracking can enable zero
ing sensitive data to minimize informati
on leaking as well as identifying and co
untering GPU&#45;resident malware. -->
<g id="edge72" class="edge">
<title>17&#45;&gt;Dynamic tainting tracks the influence of
 certain inputs (taint sources) through 
execution and it is a powerful tool for 
information flow analysis and security. 
Taint tracking has primarily targeted CP
U program executions. Motivated by recen
t recognition of information leaking in 
GPU memory and GPU&#45;resident malware, thi
s paper presents the first design and pr
ototype implementation of a taint tracki
ng system on GPUs. Our design combines a
 static binary instrumentation with dyna
mic tainting at runtime. We present new 
performance optimizations by exploiting 
unique GPU characteristics—a large por
tion of instructions on GPU runtime para
meters and constant memory can be safely
 eliminated from taint tracking; large G
PU register file allows fast maintenance
 of a hot portion of the taint map. Expe
riments show that these techniques impro
ved the GPU taint tracking performance b
y 5 to 20 times for a range of image pro
cessing, data encryption, and deep learn
ing applications. We further demonstrate
 that GPU taint tracking can enable zero
ing sensitive data to minimize informati
on leaking as well as identifying and co
untering GPU&#45;resident malware.</title>
<path fill="none" stroke="#000000" d="M19736.8032,-958.3386C19751.6978,-919.3983 19788.9515,-822.0029 19826.5827,-723.6204"/>
<polygon fill="#000000" stroke="#000000" points="19829.9213,-724.6889 19830.2249,-714.0984 19823.3832,-722.188 19829.9213,-724.6889"/>
</g>
<!-- Optimizing the Design and Implementation
 of the Linux ARM Hypervisor -->
<g id="node73" class="node">
<title>Optimizing the Design and Implementation
 of the Linux ARM Hypervisor</title>
<ellipse fill="none" stroke="#000000" cx="20321.022" cy="-461.0336" rx="183.3379" ry="25.4118"/>
<text text-anchor="middle" x="20321.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Optimizing the Design and Implementation</text>
<text text-anchor="middle" x="20321.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of the Linux ARM Hypervisor</text>
</g>
<!-- 18&#45;&gt;Optimizing the Design and Implementation
 of the Linux ARM Hypervisor -->
<g id="edge74" class="edge">
<title>18&#45;&gt;Optimizing the Design and Implementation
 of the Linux ARM Hypervisor</title>
<path fill="none" stroke="#000000" d="M20860.8644,-975.5338C20784.2336,-973.5156 20568.358,-964.1391 20514.022,-922.0672 20373.9236,-813.5905 20334.5287,-584.8345 20324.322,-496.6999"/>
<polygon fill="#000000" stroke="#000000" points="20327.7908,-496.2232 20323.2172,-486.6664 20320.8329,-496.9894 20327.7908,-496.2232"/>
</g>
<!-- Christoffer Dall, Shih&#45;Wei Li, and Jason
 Nieh, Columbia University -->
<g id="node74" class="node">
<title>Christoffer Dall, Shih&#45;Wei Li, and Jason
 Nieh, Columbia University</title>
<ellipse fill="none" stroke="#000000" cx="20694.022" cy="-461.0336" rx="171.3697" ry="25.4118"/>
<text text-anchor="middle" x="20694.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Christoffer Dall, Shih&#45;Wei Li, and Jason</text>
<text text-anchor="middle" x="20694.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Nieh, Columbia University</text>
</g>
<!-- 18&#45;&gt;Christoffer Dall, Shih&#45;Wei Li, and Jason
 Nieh, Columbia University -->
<g id="edge75" class="edge">
<title>18&#45;&gt;Christoffer Dall, Shih&#45;Wei Li, and Jason
 Nieh, Columbia University</title>
<path fill="none" stroke="#000000" d="M20881.3441,-958.3386C20853.3276,-883.9602 20744.9799,-596.3173 20707.1478,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="20710.409,-494.6086 20703.6086,-486.4843 20703.8583,-497.0762 20710.409,-494.6086"/>
</g>
<!-- Modern hypervisor designs for both ARM a
nd x86 virtualization rely on running an
 operating system kernel, the hypervisor
 OS kernel, to support hypervisor functi
onality. While x86 hypervisors effective
ly leverage architectural support to run
 the kernel, existing ARM hypervisors ma
p poorly to the virtualization features 
of the ARM architecture, resulting in wo
rse performance. We identify the key rea
son for this problem is the need to mult
iplex kernel mode state between the hype
rvisor and virtual machines, which each 
run their own kernel. To address this pr
oblem, we take a fundamentally different
 approach to hypervisor design that runs
 the hypervisor together with its OS ker
nel in a separate CPU mode from kernel m
ode. Using this approach, we redesign KV
M/ARM to leverage a separate ARM CPU mod
e for running both the hypervisor and it
s OS kernel. We show what changes are re
quired in Linux to implement this on cur
rent ARM hardware as well as how newer A
RM architectural support can be used to 
support this approach without any change
s to Linux other than to KVM/ARM itself.
 We show that our redesign and optimizat
ions can result in an order of magnitude
 performance improvement for KVM/ARM, an
d can provide faster performance than x8
6 on key hypervisor operations. As a res
ult, many aspects of our design have bee
n successfully merged into mainline Linu
x. -->
<g id="node75" class="node">
<title>Modern hypervisor designs for both ARM a
nd x86 virtualization rely on running an
 operating system kernel, the hypervisor
 OS kernel, to support hypervisor functi
onality. While x86 hypervisors effective
ly leverage architectural support to run
 the kernel, existing ARM hypervisors ma
p poorly to the virtualization features 
of the ARM architecture, resulting in wo
rse performance. We identify the key rea
son for this problem is the need to mult
iplex kernel mode state between the hype
rvisor and virtual machines, which each 
run their own kernel. To address this pr
oblem, we take a fundamentally different
 approach to hypervisor design that runs
 the hypervisor together with its OS ker
nel in a separate CPU mode from kernel m
ode. Using this approach, we redesign KV
M/ARM to leverage a separate ARM CPU mod
e for running both the hypervisor and it
s OS kernel. We show what changes are re
quired in Linux to implement this on cur
rent ARM hardware as well as how newer A
RM architectural support can be used to 
support this approach without any change
s to Linux other than to KVM/ARM itself.
 We show that our redesign and optimizat
ions can result in an order of magnitude
 performance improvement for KVM/ARM, an
d can provide faster performance than x8
6 on key hypervisor operations. As a res
ult, many aspects of our design have bee
n successfully merged into mainline Linu
x.</title>
<ellipse fill="none" stroke="#000000" cx="21083.022" cy="-461.0336" rx="199.8111" ry="352.2784"/>
<text text-anchor="middle" x="21083.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Modern hypervisor designs for both ARM a</text>
<text text-anchor="middle" x="21083.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd x86 virtualization rely on running an</text>
<text text-anchor="middle" x="21083.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> operating system kernel, the hypervisor</text>
<text text-anchor="middle" x="21083.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> OS kernel, to support hypervisor functi</text>
<text text-anchor="middle" x="21083.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onality. While x86 hypervisors effective</text>
<text text-anchor="middle" x="21083.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ly leverage architectural support to run</text>
<text text-anchor="middle" x="21083.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> the kernel, existing ARM hypervisors ma</text>
<text text-anchor="middle" x="21083.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">p poorly to the virtualization features </text>
<text text-anchor="middle" x="21083.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of the ARM architecture, resulting in wo</text>
<text text-anchor="middle" x="21083.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rse performance. We identify the key rea</text>
<text text-anchor="middle" x="21083.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">son for this problem is the need to mult</text>
<text text-anchor="middle" x="21083.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iplex kernel mode state between the hype</text>
<text text-anchor="middle" x="21083.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rvisor and virtual machines, which each </text>
<text text-anchor="middle" x="21083.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">run their own kernel. To address this pr</text>
<text text-anchor="middle" x="21083.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oblem, we take a fundamentally different</text>
<text text-anchor="middle" x="21083.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> approach to hypervisor design that runs</text>
<text text-anchor="middle" x="21083.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> the hypervisor together with its OS ker</text>
<text text-anchor="middle" x="21083.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nel in a separate CPU mode from kernel m</text>
<text text-anchor="middle" x="21083.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ode. Using this approach, we redesign KV</text>
<text text-anchor="middle" x="21083.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">M/ARM to leverage a separate ARM CPU mod</text>
<text text-anchor="middle" x="21083.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e for running both the hypervisor and it</text>
<text text-anchor="middle" x="21083.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s OS kernel. We show what changes are re</text>
<text text-anchor="middle" x="21083.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">quired in Linux to implement this on cur</text>
<text text-anchor="middle" x="21083.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rent ARM hardware as well as how newer A</text>
<text text-anchor="middle" x="21083.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">RM architectural support can be used to </text>
<text text-anchor="middle" x="21083.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">support this approach without any change</text>
<text text-anchor="middle" x="21083.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s to Linux other than to KVM/ARM itself.</text>
<text text-anchor="middle" x="21083.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> We show that our redesign and optimizat</text>
<text text-anchor="middle" x="21083.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ions can result in an order of magnitude</text>
<text text-anchor="middle" x="21083.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> performance improvement for KVM/ARM, an</text>
<text text-anchor="middle" x="21083.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d can provide faster performance than x8</text>
<text text-anchor="middle" x="21083.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">6 on key hypervisor operations. As a res</text>
<text text-anchor="middle" x="21083.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ult, many aspects of our design have bee</text>
<text text-anchor="middle" x="21083.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n successfully merged into mainline Linu</text>
<text text-anchor="middle" x="21083.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000">x.</text>
</g>
<!-- 18&#45;&gt;Modern hypervisor designs for both ARM a
nd x86 virtualization rely on running an
 operating system kernel, the hypervisor
 OS kernel, to support hypervisor functi
onality. While x86 hypervisors effective
ly leverage architectural support to run
 the kernel, existing ARM hypervisors ma
p poorly to the virtualization features 
of the ARM architecture, resulting in wo
rse performance. We identify the key rea
son for this problem is the need to mult
iplex kernel mode state between the hype
rvisor and virtual machines, which each 
run their own kernel. To address this pr
oblem, we take a fundamentally different
 approach to hypervisor design that runs
 the hypervisor together with its OS ker
nel in a separate CPU mode from kernel m
ode. Using this approach, we redesign KV
M/ARM to leverage a separate ARM CPU mod
e for running both the hypervisor and it
s OS kernel. We show what changes are re
quired in Linux to implement this on cur
rent ARM hardware as well as how newer A
RM architectural support can be used to 
support this approach without any change
s to Linux other than to KVM/ARM itself.
 We show that our redesign and optimizat
ions can result in an order of magnitude
 performance improvement for KVM/ARM, an
d can provide faster performance than x8
6 on key hypervisor operations. As a res
ult, many aspects of our design have bee
n successfully merged into mainline Linu
x. -->
<g id="edge76" class="edge">
<title>18&#45;&gt;Modern hypervisor designs for both ARM a
nd x86 virtualization rely on running an
 operating system kernel, the hypervisor
 OS kernel, to support hypervisor functi
onality. While x86 hypervisors effective
ly leverage architectural support to run
 the kernel, existing ARM hypervisors ma
p poorly to the virtualization features 
of the ARM architecture, resulting in wo
rse performance. We identify the key rea
son for this problem is the need to mult
iplex kernel mode state between the hype
rvisor and virtual machines, which each 
run their own kernel. To address this pr
oblem, we take a fundamentally different
 approach to hypervisor design that runs
 the hypervisor together with its OS ker
nel in a separate CPU mode from kernel m
ode. Using this approach, we redesign KV
M/ARM to leverage a separate ARM CPU mod
e for running both the hypervisor and it
s OS kernel. We show what changes are re
quired in Linux to implement this on cur
rent ARM hardware as well as how newer A
RM architectural support can be used to 
support this approach without any change
s to Linux other than to KVM/ARM itself.
 We show that our redesign and optimizat
ions can result in an order of magnitude
 performance improvement for KVM/ARM, an
d can provide faster performance than x8
6 on key hypervisor operations. As a res
ult, many aspects of our design have bee
n successfully merged into mainline Linu
x.</title>
<path fill="none" stroke="#000000" d="M20894.7343,-958.3386C20907.4831,-924.6667 20936.7803,-847.2869 20968.5581,-763.3555"/>
<polygon fill="#000000" stroke="#000000" points="20971.8739,-764.4822 20972.1416,-753.8907 20965.3274,-762.0035 20971.8739,-764.4822"/>
</g>
<!-- Multi&#45;Hypervisor Virtual Machines: Enabl
ing an Ecosystem of Hypervisor&#45;level Ser
vices -->
<g id="node77" class="node">
<title>Multi&#45;Hypervisor Virtual Machines: Enabl
ing an Ecosystem of Hypervisor&#45;level Ser
vices</title>
<ellipse fill="none" stroke="#000000" cx="21481.022" cy="-461.0336" rx="180.3609" ry="35.2113"/>
<text text-anchor="middle" x="21481.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Multi&#45;Hypervisor Virtual Machines: Enabl</text>
<text text-anchor="middle" x="21481.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing an Ecosystem of Hypervisor&#45;level Ser</text>
<text text-anchor="middle" x="21481.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vices</text>
</g>
<!-- 19&#45;&gt;Multi&#45;Hypervisor Virtual Machines: Enabl
ing an Ecosystem of Hypervisor&#45;level Ser
vices -->
<g id="edge78" class="edge">
<title>19&#45;&gt;Multi&#45;Hypervisor Virtual Machines: Enabl
ing an Ecosystem of Hypervisor&#45;level Ser
vices</title>
<path fill="none" stroke="#000000" d="M22030.9676,-975.7153C21952.4578,-974.1787 21726.5697,-965.9556 21670.022,-922.0672 21535.4858,-817.6498 21496.0985,-601.1776 21485.081,-506.7481"/>
<polygon fill="#000000" stroke="#000000" points="21488.5425,-506.2068 21483.958,-496.6552 21481.5854,-506.9809 21488.5425,-506.2068"/>
</g>
<!-- Kartik Gopalan, Rohit Kugve, Hardik Bagd
i, and Yaohui Hu, Binghamton University;
 Daniel Williams and Nilton Bila, IBM T.
J. Watson Research Center -->
<g id="node78" class="node">
<title>Kartik Gopalan, Rohit Kugve, Hardik Bagd
i, and Yaohui Hu, Binghamton University;
 Daniel Williams and Nilton Bila, IBM T.
J. Watson Research Center</title>
<ellipse fill="none" stroke="#000000" cx="21863.022" cy="-461.0336" rx="184.4913" ry="45.011"/>
<text text-anchor="middle" x="21863.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Kartik Gopalan, Rohit Kugve, Hardik Bagd</text>
<text text-anchor="middle" x="21863.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">i, and Yaohui Hu, Binghamton University;</text>
<text text-anchor="middle" x="21863.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Daniel Williams and Nilton Bila, IBM T.</text>
<text text-anchor="middle" x="21863.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">J. Watson Research Center</text>
</g>
<!-- 19&#45;&gt;Kartik Gopalan, Rohit Kugve, Hardik Bagd
i, and Yaohui Hu, Binghamton University;
 Daniel Williams and Nilton Bila, IBM T.
J. Watson Research Center -->
<g id="edge79" class="edge">
<title>19&#45;&gt;Kartik Gopalan, Rohit Kugve, Hardik Bagd
i, and Yaohui Hu, Binghamton University;
 Daniel Williams and Nilton Bila, IBM T.
J. Watson Research Center</title>
<path fill="none" stroke="#000000" d="M22051.3096,-958.3386C22024.8247,-888.3865 21926.9187,-629.7974 21883.7256,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="21886.9056,-514.2303 21880.0915,-506.1175 21880.3591,-516.7089 21886.9056,-514.2303"/>
</g>
<!-- Public cloud software marketplaces alrea
dy offer users a wealth of choice in ope
rating systems, database management syst
ems, financial software, and virtual net
working, all deployable and configurable
 at the click of a button. Unfortunately
, this level of customization has not ex
tended to emerging hypervisor&#45;level serv
ices, partly because traditional virtual
 machines (VMs) are fully controlled by 
only one hypervisor at a time. Currently
, a VM in a cloud platform cannot concur
rently use hypervisor&#45;level services fro
m multiple third&#45;parties in a compartmen
talized manner. We propose the notion of
 a multi&#45;hypervisor VM, which is an unmo
dified guest that can simultaneously use
 services from multiple coresident, but 
isolated, hypervisors. We present a new 
virtualization architecture, called Span
 virtualization, that leverages nesting 
to allow multiple hypervisors to concurr
ently control a guest’s memory, virtua
l CPU, and I/O resources. Our prototype 
of Span virtualization on the KVM/QEMU p
latform enables a guest to use services 
such as introspection, network monitorin
g, guest mirroring, and hypervisor refre
sh, with performance comparable to tradi
tional nested VMs. -->
<g id="node79" class="node">
<title>Public cloud software marketplaces alrea
dy offer users a wealth of choice in ope
rating systems, database management syst
ems, financial software, and virtual net
working, all deployable and configurable
 at the click of a button. Unfortunately
, this level of customization has not ex
tended to emerging hypervisor&#45;level serv
ices, partly because traditional virtual
 machines (VMs) are fully controlled by 
only one hypervisor at a time. Currently
, a VM in a cloud platform cannot concur
rently use hypervisor&#45;level services fro
m multiple third&#45;parties in a compartmen
talized manner. We propose the notion of
 a multi&#45;hypervisor VM, which is an unmo
dified guest that can simultaneously use
 services from multiple coresident, but 
isolated, hypervisors. We present a new 
virtualization architecture, called Span
 virtualization, that leverages nesting 
to allow multiple hypervisors to concurr
ently control a guest’s memory, virtua
l CPU, and I/O resources. Our prototype 
of Span virtualization on the KVM/QEMU p
latform enables a guest to use services 
such as introspection, network monitorin
g, guest mirroring, and hypervisor refre
sh, with performance comparable to tradi
tional nested VMs.</title>
<ellipse fill="none" stroke="#000000" cx="22254.022" cy="-461.0336" rx="188.8588" ry="302.7835"/>
<text text-anchor="middle" x="22254.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Public cloud software marketplaces alrea</text>
<text text-anchor="middle" x="22254.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">dy offer users a wealth of choice in ope</text>
<text text-anchor="middle" x="22254.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rating systems, database management syst</text>
<text text-anchor="middle" x="22254.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ems, financial software, and virtual net</text>
<text text-anchor="middle" x="22254.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">working, all deployable and configurable</text>
<text text-anchor="middle" x="22254.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> at the click of a button. Unfortunately</text>
<text text-anchor="middle" x="22254.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, this level of customization has not ex</text>
<text text-anchor="middle" x="22254.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tended to emerging hypervisor&#45;level serv</text>
<text text-anchor="middle" x="22254.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ices, partly because traditional virtual</text>
<text text-anchor="middle" x="22254.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> machines (VMs) are fully controlled by </text>
<text text-anchor="middle" x="22254.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">only one hypervisor at a time. Currently</text>
<text text-anchor="middle" x="22254.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, a VM in a cloud platform cannot concur</text>
<text text-anchor="middle" x="22254.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rently use hypervisor&#45;level services fro</text>
<text text-anchor="middle" x="22254.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m multiple third&#45;parties in a compartmen</text>
<text text-anchor="middle" x="22254.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">talized manner. We propose the notion of</text>
<text text-anchor="middle" x="22254.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a multi&#45;hypervisor VM, which is an unmo</text>
<text text-anchor="middle" x="22254.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">dified guest that can simultaneously use</text>
<text text-anchor="middle" x="22254.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> services from multiple coresident, but </text>
<text text-anchor="middle" x="22254.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">isolated, hypervisors. We present a new </text>
<text text-anchor="middle" x="22254.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">virtualization architecture, called Span</text>
<text text-anchor="middle" x="22254.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> virtualization, that leverages nesting </text>
<text text-anchor="middle" x="22254.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to allow multiple hypervisors to concurr</text>
<text text-anchor="middle" x="22254.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ently control a guest’s memory, virtua</text>
<text text-anchor="middle" x="22254.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">l CPU, and I/O resources. Our prototype </text>
<text text-anchor="middle" x="22254.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of Span virtualization on the KVM/QEMU p</text>
<text text-anchor="middle" x="22254.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">latform enables a guest to use services </text>
<text text-anchor="middle" x="22254.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">such as introspection, network monitorin</text>
<text text-anchor="middle" x="22254.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g, guest mirroring, and hypervisor refre</text>
<text text-anchor="middle" x="22254.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sh, with performance comparable to tradi</text>
<text text-anchor="middle" x="22254.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tional nested VMs.</text>
</g>
<!-- 19&#45;&gt;Public cloud software marketplaces alrea
dy offer users a wealth of choice in ope
rating systems, database management syst
ems, financial software, and virtual net
working, all deployable and configurable
 at the click of a button. Unfortunately
, this level of customization has not ex
tended to emerging hypervisor&#45;level serv
ices, partly because traditional virtual
 machines (VMs) are fully controlled by 
only one hypervisor at a time. Currently
, a VM in a cloud platform cannot concur
rently use hypervisor&#45;level services fro
m multiple third&#45;parties in a compartmen
talized manner. We propose the notion of
 a multi&#45;hypervisor VM, which is an unmo
dified guest that can simultaneously use
 services from multiple coresident, but 
isolated, hypervisors. We present a new 
virtualization architecture, called Span
 virtualization, that leverages nesting 
to allow multiple hypervisors to concurr
ently control a guest’s memory, virtua
l CPU, and I/O resources. Our prototype 
of Span virtualization on the KVM/QEMU p
latform enables a guest to use services 
such as introspection, network monitorin
g, guest mirroring, and hypervisor refre
sh, with performance comparable to tradi
tional nested VMs. -->
<g id="edge80" class="edge">
<title>19&#45;&gt;Public cloud software marketplaces alrea
dy offer users a wealth of choice in ope
rating systems, database management syst
ems, financial software, and virtual net
working, all deployable and configurable
 at the click of a button. Unfortunately
, this level of customization has not ex
tended to emerging hypervisor&#45;level serv
ices, partly because traditional virtual
 machines (VMs) are fully controlled by 
only one hypervisor at a time. Currently
, a VM in a cloud platform cannot concur
rently use hypervisor&#45;level services fro
m multiple third&#45;parties in a compartmen
talized manner. We propose the notion of
 a multi&#45;hypervisor VM, which is an unmo
dified guest that can simultaneously use
 services from multiple coresident, but 
isolated, hypervisors. We present a new 
virtualization architecture, called Span
 virtualization, that leverages nesting 
to allow multiple hypervisors to concurr
ently control a guest’s memory, virtua
l CPU, and I/O resources. Our prototype 
of Span virtualization on the KVM/QEMU p
latform enables a guest to use services 
such as introspection, network monitorin
g, guest mirroring, and hypervisor refre
sh, with performance comparable to tradi
tional nested VMs.</title>
<path fill="none" stroke="#000000" d="M22064.7688,-958.3386C22079.3269,-920.0838 22115.3544,-825.4135 22152.116,-728.8143"/>
<polygon fill="#000000" stroke="#000000" points="22155.3895,-730.0528 22155.6752,-719.4618 22148.8472,-727.563 22155.3895,-730.0528"/>
</g>
<!-- Preemptive, Low Latency Datacenter Sched
uling via Lightweight Virtualization -->
<g id="node81" class="node">
<title>Preemptive, Low Latency Datacenter Sched
uling via Lightweight Virtualization</title>
<ellipse fill="none" stroke="#000000" cx="22647.022" cy="-461.0336" rx="185.7104" ry="25.4118"/>
<text text-anchor="middle" x="22647.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Preemptive, Low Latency Datacenter Sched</text>
<text text-anchor="middle" x="22647.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uling via Lightweight Virtualization</text>
</g>
<!-- 20&#45;&gt;Preemptive, Low Latency Datacenter Sched
uling via Lightweight Virtualization -->
<g id="edge82" class="edge">
<title>20&#45;&gt;Preemptive, Low Latency Datacenter Sched
uling via Lightweight Virtualization</title>
<path fill="none" stroke="#000000" d="M23193.7888,-975.58C23116.4058,-973.6819 22897.2537,-964.5878 22842.022,-922.0672 22701.4051,-813.8121 22661.0464,-584.9241 22650.4709,-496.7271"/>
<polygon fill="#000000" stroke="#000000" points="22653.9363,-496.2246 22649.3241,-486.6863 22646.9816,-497.019 22653.9363,-496.2246"/>
</g>
<!-- Wei Chen, University of Colorado, Colora
do Springs; Jia Rao, University of Texas
 at Arlington; Xiaobo Zhou, University o
f Colorado, Colorado Springs -->
<g id="node82" class="node">
<title>Wei Chen, University of Colorado, Colora
do Springs; Jia Rao, University of Texas
 at Arlington; Xiaobo Zhou, University o
f Colorado, Colorado Springs</title>
<ellipse fill="none" stroke="#000000" cx="23030.022" cy="-461.0336" rx="179.1178" ry="45.011"/>
<text text-anchor="middle" x="23030.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Wei Chen, University of Colorado, Colora</text>
<text text-anchor="middle" x="23030.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">do Springs; Jia Rao, University of Texas</text>
<text text-anchor="middle" x="23030.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> at Arlington; Xiaobo Zhou, University o</text>
<text text-anchor="middle" x="23030.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f Colorado, Colorado Springs</text>
</g>
<!-- 20&#45;&gt;Wei Chen, University of Colorado, Colora
do Springs; Jia Rao, University of Texas
 at Arlington; Xiaobo Zhou, University o
f Colorado, Colorado Springs -->
<g id="edge83" class="edge">
<title>20&#45;&gt;Wei Chen, University of Colorado, Colora
do Springs; Jia Rao, University of Texas
 at Arlington; Xiaobo Zhou, University o
f Colorado, Colorado Springs</title>
<path fill="none" stroke="#000000" d="M23214.4473,-958.3386C23188.5056,-888.3865 23092.608,-629.7974 23050.3009,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="23053.5001,-514.2765 23046.7413,-506.1175 23046.9369,-516.7105 23053.5001,-514.2765"/>
</g>
<!-- Data centers are evolving to host hetero
geneous workloads on shared clusters to 
reduce the operational cost and achieve 
higher resource utilization. However, it
 is challenging to schedule heterogeneou
s workloads with diverse resource requir
ements and QoS constraints. On the one h
and, latency&#45;critical jobs need to be sc
heduled as soon as they are submitted to
 avoid any queuing delays. On the other 
hand, best&#45;effort long jobs should be al
lowed to occupy the cluster when there a
re idle resources to improve cluster uti
lization. The challenge lies in how to m
inimize the queuing delays of short jobs
 while maximizing cluster utilization. E
xisting solutions either forcibly kill l
ong jobs to guarantee low latency for sh
ort jobs or disable preemption to optimi
ze utilization. Hybrid approaches with r
esource reservations have been proposed 
but need to be tuned for specific worklo
ads.In this paper, we propose and develo
p BIG&#45;C, a container&#45;based resource mana
gement framework for Big Data cluster co
mputing. The key design is to leverage l
ightweight virtualization, a.k.a, contai
ners to make tasks preemptable in cluste
r scheduling. We devise two types of pre
emption strategies: immediate and gracef
ul preemptions and show their effectiven
ess and tradeoffs with loosely&#45;coupled M
apReduce workloads as well as iterative,
 in&#45;memory Spark workloads. Based on the
 mechanisms for task preemption, we furt
her develop a preemptive fair share clus
ter scheduler. We have implemented BIG&#45;C
 in YARN. Our evaluation with synthetic 
and production workloads shows that low&#45;
latency and high utilization can be both
 attained when scheduling heterogeneous 
workloads on a contended cluster. -->
<g id="node83" class="node">
<title>Data centers are evolving to host hetero
geneous workloads on shared clusters to 
reduce the operational cost and achieve 
higher resource utilization. However, it
 is challenging to schedule heterogeneou
s workloads with diverse resource requir
ements and QoS constraints. On the one h
and, latency&#45;critical jobs need to be sc
heduled as soon as they are submitted to
 avoid any queuing delays. On the other 
hand, best&#45;effort long jobs should be al
lowed to occupy the cluster when there a
re idle resources to improve cluster uti
lization. The challenge lies in how to m
inimize the queuing delays of short jobs
 while maximizing cluster utilization. E
xisting solutions either forcibly kill l
ong jobs to guarantee low latency for sh
ort jobs or disable preemption to optimi
ze utilization. Hybrid approaches with r
esource reservations have been proposed 
but need to be tuned for specific worklo
ads.In this paper, we propose and develo
p BIG&#45;C, a container&#45;based resource mana
gement framework for Big Data cluster co
mputing. The key design is to leverage l
ightweight virtualization, a.k.a, contai
ners to make tasks preemptable in cluste
r scheduling. We devise two types of pre
emption strategies: immediate and gracef
ul preemptions and show their effectiven
ess and tradeoffs with loosely&#45;coupled M
apReduce workloads as well as iterative,
 in&#45;memory Spark workloads. Based on the
 mechanisms for task preemption, we furt
her develop a preemptive fair share clus
ter scheduler. We have implemented BIG&#45;C
 in YARN. Our evaluation with synthetic 
and production workloads shows that low&#45;
latency and high utilization can be both
 attained when scheduling heterogeneous 
workloads on a contended cluster.</title>
<ellipse fill="none" stroke="#000000" cx="23411.022" cy="-461.0336" rx="184.172" ry="421.3713"/>
<text text-anchor="middle" x="23411.022" y="-743.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Data centers are evolving to host hetero</text>
<text text-anchor="middle" x="23411.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000">geneous workloads on shared clusters to </text>
<text text-anchor="middle" x="23411.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">reduce the operational cost and achieve </text>
<text text-anchor="middle" x="23411.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">higher resource utilization. However, it</text>
<text text-anchor="middle" x="23411.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> is challenging to schedule heterogeneou</text>
<text text-anchor="middle" x="23411.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s workloads with diverse resource requir</text>
<text text-anchor="middle" x="23411.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ements and QoS constraints. On the one h</text>
<text text-anchor="middle" x="23411.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and, latency&#45;critical jobs need to be sc</text>
<text text-anchor="middle" x="23411.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">heduled as soon as they are submitted to</text>
<text text-anchor="middle" x="23411.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> avoid any queuing delays. On the other </text>
<text text-anchor="middle" x="23411.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hand, best&#45;effort long jobs should be al</text>
<text text-anchor="middle" x="23411.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lowed to occupy the cluster when there a</text>
<text text-anchor="middle" x="23411.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re idle resources to improve cluster uti</text>
<text text-anchor="middle" x="23411.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lization. The challenge lies in how to m</text>
<text text-anchor="middle" x="23411.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">inimize the queuing delays of short jobs</text>
<text text-anchor="middle" x="23411.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> while maximizing cluster utilization. E</text>
<text text-anchor="middle" x="23411.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">xisting solutions either forcibly kill l</text>
<text text-anchor="middle" x="23411.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ong jobs to guarantee low latency for sh</text>
<text text-anchor="middle" x="23411.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ort jobs or disable preemption to optimi</text>
<text text-anchor="middle" x="23411.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ze utilization. Hybrid approaches with r</text>
<text text-anchor="middle" x="23411.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">esource reservations have been proposed </text>
<text text-anchor="middle" x="23411.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">but need to be tuned for specific worklo</text>
<text text-anchor="middle" x="23411.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ads.In this paper, we propose and develo</text>
<text text-anchor="middle" x="23411.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">p BIG&#45;C, a container&#45;based resource mana</text>
<text text-anchor="middle" x="23411.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gement framework for Big Data cluster co</text>
<text text-anchor="middle" x="23411.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mputing. The key design is to leverage l</text>
<text text-anchor="middle" x="23411.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ightweight virtualization, a.k.a, contai</text>
<text text-anchor="middle" x="23411.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ners to make tasks preemptable in cluste</text>
<text text-anchor="middle" x="23411.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r scheduling. We devise two types of pre</text>
<text text-anchor="middle" x="23411.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">emption strategies: immediate and gracef</text>
<text text-anchor="middle" x="23411.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ul preemptions and show their effectiven</text>
<text text-anchor="middle" x="23411.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ess and tradeoffs with loosely&#45;coupled M</text>
<text text-anchor="middle" x="23411.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">apReduce workloads as well as iterative,</text>
<text text-anchor="middle" x="23411.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in&#45;memory Spark workloads. Based on the</text>
<text text-anchor="middle" x="23411.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> mechanisms for task preemption, we furt</text>
<text text-anchor="middle" x="23411.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">her develop a preemptive fair share clus</text>
<text text-anchor="middle" x="23411.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ter scheduler. We have implemented BIG&#45;C</text>
<text text-anchor="middle" x="23411.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in YARN. Our evaluation with synthetic </text>
<text text-anchor="middle" x="23411.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and production workloads shows that low&#45;</text>
<text text-anchor="middle" x="23411.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">latency and high utilization can be both</text>
<text text-anchor="middle" x="23411.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> attained when scheduling heterogeneous </text>
<text text-anchor="middle" x="23411.022" y="-169.8336" font-family="Times,serif" font-size="14.00" fill="#000000">workloads on a contended cluster.</text>
</g>
<!-- 20&#45;&gt;Data centers are evolving to host hetero
geneous workloads on shared clusters to 
reduce the operational cost and achieve 
higher resource utilization. However, it
 is challenging to schedule heterogeneou
s workloads with diverse resource requir
ements and QoS constraints. On the one h
and, latency&#45;critical jobs need to be sc
heduled as soon as they are submitted to
 avoid any queuing delays. On the other 
hand, best&#45;effort long jobs should be al
lowed to occupy the cluster when there a
re idle resources to improve cluster uti
lization. The challenge lies in how to m
inimize the queuing delays of short jobs
 while maximizing cluster utilization. E
xisting solutions either forcibly kill l
ong jobs to guarantee low latency for sh
ort jobs or disable preemption to optimi
ze utilization. Hybrid approaches with r
esource reservations have been proposed 
but need to be tuned for specific worklo
ads.In this paper, we propose and develo
p BIG&#45;C, a container&#45;based resource mana
gement framework for Big Data cluster co
mputing. The key design is to leverage l
ightweight virtualization, a.k.a, contai
ners to make tasks preemptable in cluste
r scheduling. We devise two types of pre
emption strategies: immediate and gracef
ul preemptions and show their effectiven
ess and tradeoffs with loosely&#45;coupled M
apReduce workloads as well as iterative,
 in&#45;memory Spark workloads. Based on the
 mechanisms for task preemption, we furt
her develop a preemptive fair share clus
ter scheduler. We have implemented BIG&#45;C
 in YARN. Our evaluation with synthetic 
and production workloads shows that low&#45;
latency and high utilization can be both
 attained when scheduling heterogeneous 
workloads on a contended cluster. -->
<g id="edge84" class="edge">
<title>20&#45;&gt;Data centers are evolving to host hetero
geneous workloads on shared clusters to 
reduce the operational cost and achieve 
higher resource utilization. However, it
 is challenging to schedule heterogeneou
s workloads with diverse resource requir
ements and QoS constraints. On the one h
and, latency&#45;critical jobs need to be sc
heduled as soon as they are submitted to
 avoid any queuing delays. On the other 
hand, best&#45;effort long jobs should be al
lowed to occupy the cluster when there a
re idle resources to improve cluster uti
lization. The challenge lies in how to m
inimize the queuing delays of short jobs
 while maximizing cluster utilization. E
xisting solutions either forcibly kill l
ong jobs to guarantee low latency for sh
ort jobs or disable preemption to optimi
ze utilization. Hybrid approaches with r
esource reservations have been proposed 
but need to be tuned for specific worklo
ads.In this paper, we propose and develo
p BIG&#45;C, a container&#45;based resource mana
gement framework for Big Data cluster co
mputing. The key design is to leverage l
ightweight virtualization, a.k.a, contai
ners to make tasks preemptable in cluste
r scheduling. We devise two types of pre
emption strategies: immediate and gracef
ul preemptions and show their effectiven
ess and tradeoffs with loosely&#45;coupled M
apReduce workloads as well as iterative,
 in&#45;memory Spark workloads. Based on the
 mechanisms for task preemption, we furt
her develop a preemptive fair share clus
ter scheduler. We have implemented BIG&#45;C
 in YARN. Our evaluation with synthetic 
and production workloads shows that low&#45;
latency and high utilization can be both
 attained when scheduling heterogeneous 
workloads on a contended cluster.</title>
<path fill="none" stroke="#000000" d="M23227.5622,-958.3386C23238.5065,-928.672 23261.9671,-865.0773 23288.5695,-792.9661"/>
<polygon fill="#000000" stroke="#000000" points="23291.9933,-793.7973 23292.1708,-783.204 23285.426,-791.3745 23291.9933,-793.7973"/>
</g>
<!-- The RCU&#45;Reader Preemption Problem in VMs -->
<g id="node85" class="node">
<title>The RCU&#45;Reader Preemption Problem in VMs</title>
<ellipse fill="none" stroke="#000000" cx="23789.022" cy="-461.0336" rx="176.4657" ry="18"/>
<text text-anchor="middle" x="23789.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The RCU&#45;Reader Preemption Problem in VMs</text>
</g>
<!-- 21&#45;&gt;The RCU&#45;Reader Preemption Problem in VMs -->
<g id="edge86" class="edge">
<title>21&#45;&gt;The RCU&#45;Reader Preemption Problem in VMs</title>
<path fill="none" stroke="#000000" d="M24347.1179,-973.9902C24262.318,-967.2303 24004.4758,-944.9701 23975.022,-922.0672 23831.8929,-810.772 23798.4182,-571.6926 23791.0136,-489.4839"/>
<polygon fill="#000000" stroke="#000000" points="23794.4903,-489.0577 23790.1664,-479.3854 23787.5148,-489.643 23794.4903,-489.0577"/>
</g>
<!-- Aravinda Prasad and K Gopinath, Indian I
nstitute of Science, Bangalore; Paul E. 
McKenney, IBM Linux Technology Center, B
eaverton -->
<g id="node86" class="node">
<title>Aravinda Prasad and K Gopinath, Indian I
nstitute of Science, Bangalore; Paul E. 
McKenney, IBM Linux Technology Center, B
eaverton</title>
<ellipse fill="none" stroke="#000000" cx="24177.022" cy="-461.0336" rx="193.1853" ry="45.011"/>
<text text-anchor="middle" x="24177.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Aravinda Prasad and K Gopinath, Indian I</text>
<text text-anchor="middle" x="24177.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nstitute of Science, Bangalore; Paul E. </text>
<text text-anchor="middle" x="24177.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">McKenney, IBM Linux Technology Center, B</text>
<text text-anchor="middle" x="24177.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eaverton</text>
</g>
<!-- 21&#45;&gt;Aravinda Prasad and K Gopinath, Indian I
nstitute of Science, Bangalore; Paul E. 
McKenney, IBM Linux Technology Center, B
eaverton -->
<g id="edge87" class="edge">
<title>21&#45;&gt;Aravinda Prasad and K Gopinath, Indian I
nstitute of Science, Bangalore; Paul E. 
McKenney, IBM Linux Technology Center, B
eaverton</title>
<path fill="none" stroke="#000000" d="M24367.2408,-958.3386C24340.4842,-888.3865 24241.574,-629.7974 24197.9379,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="24201.1082,-514.2071 24194.2665,-506.1175 24194.5701,-516.708 24201.1082,-514.2071"/>
</g>
<!-- When synchronization primitives such as 
locking and read&#45;copy update (RCU) execu
te within virtual machines (VMs), preemp
tion can cause multi&#45;second latency spik
es, increasing peak memory footprint and
 fragmentation inside VMs, which in turn
 may trigger swapping or VM ballooning. 
The resulting CPU utilization and memory
 footprint increases can negate the serv
er&#45;consolidation benefits of virtualizat
ion. Although preemption of lock holders
 in VMs has been well&#45;studied, the corre
sponding solutions do not apply to RCU d
ue to its exceedingly lightweight read&#45;s
ide primitives.This paper presents the f
irst evaluation of RCU&#45;reader preemption
 in a virtualized environment. Our evalu
ation shows 50% increase in the peak mem
ory footprint and 155% increase in fragm
entation for a microbenchmark, 23.71% in
crease in average kernel CPU utilization
, 2.9× increase in the CPU time to comp
ute a grace period and 2.18× increase i
n the average grace period duration for 
the Postmark benchmark. -->
<g id="node87" class="node">
<title>When synchronization primitives such as 
locking and read&#45;copy update (RCU) execu
te within virtual machines (VMs), preemp
tion can cause multi&#45;second latency spik
es, increasing peak memory footprint and
 fragmentation inside VMs, which in turn
 may trigger swapping or VM ballooning. 
The resulting CPU utilization and memory
 footprint increases can negate the serv
er&#45;consolidation benefits of virtualizat
ion. Although preemption of lock holders
 in VMs has been well&#45;studied, the corre
sponding solutions do not apply to RCU d
ue to its exceedingly lightweight read&#45;s
ide primitives.This paper presents the f
irst evaluation of RCU&#45;reader preemption
 in a virtualized environment. Our evalu
ation shows 50% increase in the peak mem
ory footprint and 155% increase in fragm
entation for a microbenchmark, 23.71% in
crease in average kernel CPU utilization
, 2.9× increase in the CPU time to comp
ute a grace period and 2.18× increase i
n the average grace period duration for 
the Postmark benchmark.</title>
<ellipse fill="none" stroke="#000000" cx="24572.022" cy="-461.0336" rx="183.8311" ry="253.2885"/>
<text text-anchor="middle" x="24572.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">When synchronization primitives such as </text>
<text text-anchor="middle" x="24572.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">locking and read&#45;copy update (RCU) execu</text>
<text text-anchor="middle" x="24572.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">te within virtual machines (VMs), preemp</text>
<text text-anchor="middle" x="24572.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion can cause multi&#45;second latency spik</text>
<text text-anchor="middle" x="24572.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es, increasing peak memory footprint and</text>
<text text-anchor="middle" x="24572.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> fragmentation inside VMs, which in turn</text>
<text text-anchor="middle" x="24572.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> may trigger swapping or VM ballooning. </text>
<text text-anchor="middle" x="24572.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The resulting CPU utilization and memory</text>
<text text-anchor="middle" x="24572.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> footprint increases can negate the serv</text>
<text text-anchor="middle" x="24572.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er&#45;consolidation benefits of virtualizat</text>
<text text-anchor="middle" x="24572.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ion. Although preemption of lock holders</text>
<text text-anchor="middle" x="24572.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in VMs has been well&#45;studied, the corre</text>
<text text-anchor="middle" x="24572.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sponding solutions do not apply to RCU d</text>
<text text-anchor="middle" x="24572.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ue to its exceedingly lightweight read&#45;s</text>
<text text-anchor="middle" x="24572.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ide primitives.This paper presents the f</text>
<text text-anchor="middle" x="24572.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">irst evaluation of RCU&#45;reader preemption</text>
<text text-anchor="middle" x="24572.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in a virtualized environment. Our evalu</text>
<text text-anchor="middle" x="24572.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ation shows 50% increase in the peak mem</text>
<text text-anchor="middle" x="24572.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ory footprint and 155% increase in fragm</text>
<text text-anchor="middle" x="24572.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">entation for a microbenchmark, 23.71% in</text>
<text text-anchor="middle" x="24572.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">crease in average kernel CPU utilization</text>
<text text-anchor="middle" x="24572.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, 2.9× increase in the CPU time to comp</text>
<text text-anchor="middle" x="24572.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ute a grace period and 2.18× increase i</text>
<text text-anchor="middle" x="24572.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n the average grace period duration for </text>
<text text-anchor="middle" x="24572.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the Postmark benchmark.</text>
</g>
<!-- 21&#45;&gt;When synchronization primitives such as 
locking and read&#45;copy update (RCU) execu
te within virtual machines (VMs), preemp
tion can cause multi&#45;second latency spik
es, increasing peak memory footprint and
 fragmentation inside VMs, which in turn
 may trigger swapping or VM ballooning. 
The resulting CPU utilization and memory
 footprint increases can negate the serv
er&#45;consolidation benefits of virtualizat
ion. Although preemption of lock holders
 in VMs has been well&#45;studied, the corre
sponding solutions do not apply to RCU d
ue to its exceedingly lightweight read&#45;s
ide primitives.This paper presents the f
irst evaluation of RCU&#45;reader preemption
 in a virtualized environment. Our evalu
ation shows 50% increase in the peak mem
ory footprint and 155% increase in fragm
entation for a microbenchmark, 23.71% in
crease in average kernel CPU utilization
, 2.9× increase in the CPU time to comp
ute a grace period and 2.18× increase i
n the average grace period duration for 
the Postmark benchmark. -->
<g id="edge88" class="edge">
<title>21&#45;&gt;When synchronization primitives such as 
locking and read&#45;copy update (RCU) execu
te within virtual machines (VMs), preemp
tion can cause multi&#45;second latency spik
es, increasing peak memory footprint and
 fragmentation inside VMs, which in turn
 may trigger swapping or VM ballooning. 
The resulting CPU utilization and memory
 footprint increases can negate the serv
er&#45;consolidation benefits of virtualizat
ion. Although preemption of lock holders
 in VMs has been well&#45;studied, the corre
sponding solutions do not apply to RCU d
ue to its exceedingly lightweight read&#45;s
ide primitives.This paper presents the f
irst evaluation of RCU&#45;reader preemption
 in a virtualized environment. Our evalu
ation shows 50% increase in the peak mem
ory footprint and 155% increase in fragm
entation for a microbenchmark, 23.71% in
crease in average kernel CPU utilization
, 2.9× increase in the CPU time to comp
ute a grace period and 2.18× increase i
n the average grace period duration for 
the Postmark benchmark.</title>
<path fill="none" stroke="#000000" d="M24380.8376,-958.3386C24397.2902,-915.5424 24440.8864,-802.1409 24482.2984,-694.4207"/>
<polygon fill="#000000" stroke="#000000" points="24485.5916,-695.6083 24485.9131,-685.0183 24479.0578,-693.0964 24485.5916,-695.6083"/>
</g>
<!-- Bunshin: Compositing Security Mechanisms
 through Diversification -->
<g id="node89" class="node">
<title>Bunshin: Compositing Security Mechanisms
 through Diversification</title>
<ellipse fill="none" stroke="#000000" cx="24962.022" cy="-461.0336" rx="188.8563" ry="25.4118"/>
<text text-anchor="middle" x="24962.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Bunshin: Compositing Security Mechanisms</text>
<text text-anchor="middle" x="24962.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> through Diversification</text>
</g>
<!-- 22&#45;&gt;Bunshin: Compositing Security Mechanisms
 through Diversification -->
<g id="edge90" class="edge">
<title>22&#45;&gt;Bunshin: Compositing Security Mechanisms
 through Diversification</title>
<path fill="none" stroke="#000000" d="M25532.1388,-973.9631C25447.4017,-967.1214 25189.7279,-944.642 25160.022,-922.0672 25018.3985,-814.4417 24976.7302,-585.1789 24965.666,-496.8044"/>
<polygon fill="#000000" stroke="#000000" points="24969.1256,-496.2572 24964.4638,-486.7431 24962.1751,-497.0878 24969.1256,-496.2572"/>
</g>
<!-- Meng Xu, Kangjie Lu, Taesoo Kim, and Wen
ke Lee, Georgia Institute of Technology -->
<g id="node90" class="node">
<title>Meng Xu, Kangjie Lu, Taesoo Kim, and Wen
ke Lee, Georgia Institute of Technology</title>
<ellipse fill="none" stroke="#000000" cx="25360.022" cy="-461.0336" rx="190.8612" ry="25.4118"/>
<text text-anchor="middle" x="25360.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Meng Xu, Kangjie Lu, Taesoo Kim, and Wen</text>
<text text-anchor="middle" x="25360.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ke Lee, Georgia Institute of Technology</text>
</g>
<!-- 22&#45;&gt;Meng Xu, Kangjie Lu, Taesoo Kim, and Wen
ke Lee, Georgia Institute of Technology -->
<g id="edge91" class="edge">
<title>22&#45;&gt;Meng Xu, Kangjie Lu, Taesoo Kim, and Wen
ke Lee, Georgia Institute of Technology</title>
<path fill="none" stroke="#000000" d="M25552.2869,-958.636C25523.7378,-884.7479 25412.3984,-596.5894 25373.514,-495.9524"/>
<polygon fill="#000000" stroke="#000000" points="25376.7452,-494.6039 25369.8762,-486.5375 25370.2157,-497.1269 25376.7452,-494.6039"/>
</g>
<!-- A number of security mechanisms have bee
n proposed to harden programs written in
 unsafe languages, each of which mitigat
es a specific type of memory error. Intu
itively, enforcing multiple security mec
hanisms on a target program will improve
 its overall security. However, this is 
not yet a viable approach in practice be
cause the execution slowdown caused by v
arious security mechanisms is often non&#45;
linearly accumulated, making the combine
d protection prohibitively expensive; fu
rther, most security mechanisms are desi
gned for independent or isolated uses an
d thus are often in conflict with each o
ther, making it impossible to fuse them 
in a straightforward way.In this paper, 
we present BUNSHIN, an N&#45;version&#45;based s
ystem that enables different and even co
nflicting security mechanisms to be comb
ined to secure a program while at the sa
me time reducing the execution slowdown.
 In particular, we propose an automated 
mechanism to distribute runtime security
 checks in multiple program variants in 
such a way that conflicts between securi
ty checks are inherently eliminated and 
execution slowdown is minimized with par
allel execution. We also present an N&#45;ve
rsion execution engine to seamlessly syn
chronize these variants so that all dist
ributed security checks work together to
 guarantee the security of a target prog
ram. -->
<g id="node91" class="node">
<title>A number of security mechanisms have bee
n proposed to harden programs written in
 unsafe languages, each of which mitigat
es a specific type of memory error. Intu
itively, enforcing multiple security mec
hanisms on a target program will improve
 its overall security. However, this is 
not yet a viable approach in practice be
cause the execution slowdown caused by v
arious security mechanisms is often non&#45;
linearly accumulated, making the combine
d protection prohibitively expensive; fu
rther, most security mechanisms are desi
gned for independent or isolated uses an
d thus are often in conflict with each o
ther, making it impossible to fuse them 
in a straightforward way.In this paper, 
we present BUNSHIN, an N&#45;version&#45;based s
ystem that enables different and even co
nflicting security mechanisms to be comb
ined to secure a program while at the sa
me time reducing the execution slowdown.
 In particular, we propose an automated 
mechanism to distribute runtime security
 checks in multiple program variants in 
such a way that conflicts between securi
ty checks are inherently eliminated and 
execution slowdown is minimized with par
allel execution. We also present an N&#45;ve
rsion execution engine to seamlessly syn
chronize these variants so that all dist
ributed security checks work together to
 guarantee the security of a target prog
ram.</title>
<ellipse fill="none" stroke="#000000" cx="25758.022" cy="-461.0336" rx="188.8298" ry="342.4795"/>
<text text-anchor="middle" x="25758.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">A number of security mechanisms have bee</text>
<text text-anchor="middle" x="25758.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n proposed to harden programs written in</text>
<text text-anchor="middle" x="25758.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> unsafe languages, each of which mitigat</text>
<text text-anchor="middle" x="25758.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es a specific type of memory error. Intu</text>
<text text-anchor="middle" x="25758.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">itively, enforcing multiple security mec</text>
<text text-anchor="middle" x="25758.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hanisms on a target program will improve</text>
<text text-anchor="middle" x="25758.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> its overall security. However, this is </text>
<text text-anchor="middle" x="25758.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">not yet a viable approach in practice be</text>
<text text-anchor="middle" x="25758.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cause the execution slowdown caused by v</text>
<text text-anchor="middle" x="25758.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">arious security mechanisms is often non&#45;</text>
<text text-anchor="middle" x="25758.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">linearly accumulated, making the combine</text>
<text text-anchor="middle" x="25758.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d protection prohibitively expensive; fu</text>
<text text-anchor="middle" x="25758.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rther, most security mechanisms are desi</text>
<text text-anchor="middle" x="25758.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gned for independent or isolated uses an</text>
<text text-anchor="middle" x="25758.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d thus are often in conflict with each o</text>
<text text-anchor="middle" x="25758.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ther, making it impossible to fuse them </text>
<text text-anchor="middle" x="25758.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">in a straightforward way.In this paper, </text>
<text text-anchor="middle" x="25758.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">we present BUNSHIN, an N&#45;version&#45;based s</text>
<text text-anchor="middle" x="25758.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ystem that enables different and even co</text>
<text text-anchor="middle" x="25758.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nflicting security mechanisms to be comb</text>
<text text-anchor="middle" x="25758.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ined to secure a program while at the sa</text>
<text text-anchor="middle" x="25758.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">me time reducing the execution slowdown.</text>
<text text-anchor="middle" x="25758.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> In particular, we propose an automated </text>
<text text-anchor="middle" x="25758.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mechanism to distribute runtime security</text>
<text text-anchor="middle" x="25758.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> checks in multiple program variants in </text>
<text text-anchor="middle" x="25758.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">such a way that conflicts between securi</text>
<text text-anchor="middle" x="25758.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ty checks are inherently eliminated and </text>
<text text-anchor="middle" x="25758.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">execution slowdown is minimized with par</text>
<text text-anchor="middle" x="25758.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">allel execution. We also present an N&#45;ve</text>
<text text-anchor="middle" x="25758.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rsion execution engine to seamlessly syn</text>
<text text-anchor="middle" x="25758.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">chronize these variants so that all dist</text>
<text text-anchor="middle" x="25758.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ributed security checks work together to</text>
<text text-anchor="middle" x="25758.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> guarantee the security of a target prog</text>
<text text-anchor="middle" x="25758.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ram.</text>
</g>
<!-- 22&#45;&gt;A number of security mechanisms have bee
n proposed to harden programs written in
 unsafe languages, each of which mitigat
es a specific type of memory error. Intu
itively, enforcing multiple security mec
hanisms on a target program will improve
 its overall security. However, this is 
not yet a viable approach in practice be
cause the execution slowdown caused by v
arious security mechanisms is often non&#45;
linearly accumulated, making the combine
d protection prohibitively expensive; fu
rther, most security mechanisms are desi
gned for independent or isolated uses an
d thus are often in conflict with each o
ther, making it impossible to fuse them 
in a straightforward way.In this paper, 
we present BUNSHIN, an N&#45;version&#45;based s
ystem that enables different and even co
nflicting security mechanisms to be comb
ined to secure a program while at the sa
me time reducing the execution slowdown.
 In particular, we propose an automated 
mechanism to distribute runtime security
 checks in multiple program variants in 
such a way that conflicts between securi
ty checks are inherently eliminated and 
execution slowdown is minimized with par
allel execution. We also present an N&#45;ve
rsion execution engine to seamlessly syn
chronize these variants so that all dist
ributed security checks work together to
 guarantee the security of a target prog
ram. -->
<g id="edge92" class="edge">
<title>22&#45;&gt;A number of security mechanisms have bee
n proposed to harden programs written in
 unsafe languages, each of which mitigat
es a specific type of memory error. Intu
itively, enforcing multiple security mec
hanisms on a target program will improve
 its overall security. However, this is 
not yet a viable approach in practice be
cause the execution slowdown caused by v
arious security mechanisms is often non&#45;
linearly accumulated, making the combine
d protection prohibitively expensive; fu
rther, most security mechanisms are desi
gned for independent or isolated uses an
d thus are often in conflict with each o
ther, making it impossible to fuse them 
in a straightforward way.In this paper, 
we present BUNSHIN, an N&#45;version&#45;based s
ystem that enables different and even co
nflicting security mechanisms to be comb
ined to secure a program while at the sa
me time reducing the execution slowdown.
 In particular, we propose an automated 
mechanism to distribute runtime security
 checks in multiple program variants in 
such a way that conflicts between securi
ty checks are inherently eliminated and 
execution slowdown is minimized with par
allel execution. We also present an N&#45;ve
rsion execution engine to seamlessly syn
chronize these variants so that all dist
ributed security checks work together to
 guarantee the security of a target prog
ram.</title>
<path fill="none" stroke="#000000" d="M25565.7571,-958.636C25579.3307,-923.5061 25611.6192,-839.9401 25645.9374,-751.1208"/>
<polygon fill="#000000" stroke="#000000" points="25649.2483,-752.2626 25649.5877,-741.6732 25642.7188,-749.7397 25649.2483,-752.2626"/>
</g>
<!-- Glamdring: Automatic Application Partiti
oning for Intel SGX -->
<g id="node93" class="node">
<title>Glamdring: Automatic Application Partiti
oning for Intel SGX</title>
<ellipse fill="none" stroke="#000000" cx="26141.022" cy="-461.0336" rx="176.037" ry="25.4118"/>
<text text-anchor="middle" x="26141.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Glamdring: Automatic Application Partiti</text>
<text text-anchor="middle" x="26141.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oning for Intel SGX</text>
</g>
<!-- 23&#45;&gt;Glamdring: Automatic Application Partiti
oning for Intel SGX -->
<g id="edge94" class="edge">
<title>23&#45;&gt;Glamdring: Automatic Application Partiti
oning for Intel SGX</title>
<path fill="none" stroke="#000000" d="M26686.0214,-975.7257C26607.67,-974.2174 26382.2555,-966.0643 26326.022,-922.0672 26187.3205,-813.5472 26152.184,-584.8169 26143.6435,-496.6945"/>
<polygon fill="#000000" stroke="#000000" points="26147.1225,-496.3033 26142.7287,-486.6625 26140.1514,-496.939 26147.1225,-496.3033"/>
</g>
<!-- Joshua Lind, Christian Priebe, Divya Mut
hukumaran, Dan O&#39;Keeffe, Pierre&#45;Louis Au
blin, and Florian Kelbert, Imperial Coll
ege London; Tobias Reiher, TU Dresden; D
avid Goltzsche, TU Braunschweig; David E
yers, University of Otago; Rudiger Kapit
za, TU Braunschweig; Christof Fetzer, TU
 Dresden; Peter Pietzuch, Imperial Colle
ge London -->
<g id="node94" class="node">
<title>Joshua Lind, Christian Priebe, Divya Mut
hukumaran, Dan O&#39;Keeffe, Pierre&#45;Louis Au
blin, and Florian Kelbert, Imperial Coll
ege London; Tobias Reiher, TU Dresden; D
avid Goltzsche, TU Braunschweig; David E
yers, University of Otago; Rudiger Kapit
za, TU Braunschweig; Christof Fetzer, TU
 Dresden; Peter Pietzuch, Imperial Colle
ge London</title>
<ellipse fill="none" stroke="#000000" cx="26520.022" cy="-461.0336" rx="185.3692" ry="94.5053"/>
<text text-anchor="middle" x="26520.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Joshua Lind, Christian Priebe, Divya Mut</text>
<text text-anchor="middle" x="26520.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hukumaran, Dan O&#39;Keeffe, Pierre&#45;Louis Au</text>
<text text-anchor="middle" x="26520.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">blin, and Florian Kelbert, Imperial Coll</text>
<text text-anchor="middle" x="26520.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ege London; Tobias Reiher, TU Dresden; D</text>
<text text-anchor="middle" x="26520.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">avid Goltzsche, TU Braunschweig; David E</text>
<text text-anchor="middle" x="26520.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">yers, University of Otago; Rudiger Kapit</text>
<text text-anchor="middle" x="26520.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">za, TU Braunschweig; Christof Fetzer, TU</text>
<text text-anchor="middle" x="26520.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Dresden; Peter Pietzuch, Imperial Colle</text>
<text text-anchor="middle" x="26520.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ge London</text>
</g>
<!-- 23&#45;&gt;Joshua Lind, Christian Priebe, Divya Mut
hukumaran, Dan O&#39;Keeffe, Pierre&#45;Louis Au
blin, and Florian Kelbert, Imperial Coll
ege London; Tobias Reiher, TU Dresden; D
avid Goltzsche, TU Braunschweig; David E
yers, University of Otago; Rudiger Kapit
za, TU Braunschweig; Christof Fetzer, TU
 Dresden; Peter Pietzuch, Imperial Colle
ge London -->
<g id="edge95" class="edge">
<title>23&#45;&gt;Joshua Lind, Christian Priebe, Divya Mut
hukumaran, Dan O&#39;Keeffe, Pierre&#45;Louis Au
blin, and Florian Kelbert, Imperial Coll
ege London; Tobias Reiher, TU Dresden; D
avid Goltzsche, TU Braunschweig; David E
yers, University of Otago; Rudiger Kapit
za, TU Braunschweig; Christof Fetzer, TU
 Dresden; Peter Pietzuch, Imperial Colle
ge London</title>
<path fill="none" stroke="#000000" d="M26706.3785,-958.3386C26683.3738,-896.9492 26605.9272,-690.2775 26558.4172,-563.4939"/>
<polygon fill="#000000" stroke="#000000" points="26561.6945,-562.2652 26554.908,-554.1293 26555.1396,-564.7216 26561.6945,-562.2652"/>
</g>
<!-- Trusted execution support in modern CPUs
, as offered by Intel SGX enclaves, can 
protect applications in untrusted enviro
nments. While prior work has shown that 
legacy applications can run in their ent
irety inside enclaves, this results in a
 large trusted computing base (TCB). Ins
tead, we explore an approach in which we
 partition an application and use an enc
lave to protect only security&#45;sensitive 
data and functions, thus obtaining a sma
ller TCB.We describe Glamdring, the firs
t source&#45;level partitioning framework th
at secures applications written in C usi
ng Intel SGX. A developer first annotate
s security&#45;sensitive application data. G
lamdring then automatically partitions t
he application into untrusted and enclav
e parts: (i) to preserve data confidenti
ality, Glamdring uses dataflow analysis 
to identify functions that may be expose
d to sensitive data; (ii) for data integ
rity, it uses backward slicing to identi
fy functions that may affect sensitive d
ata. Glamdring then places security&#45;sens
itive functions inside the enclave, and 
adds runtime checks and cryptographic op
erations at the enclave boundary to prot
ect it from attack. Our evaluation of Gl
amdring with the Memcached store, the Li
breSSL library, and the Digital Bitbox b
itcoin wallet shows that it achieves sma
ll TCB sizes and has acceptable performa
nce overheads. -->
<g id="node95" class="node">
<title>Trusted execution support in modern CPUs
, as offered by Intel SGX enclaves, can 
protect applications in untrusted enviro
nments. While prior work has shown that 
legacy applications can run in their ent
irety inside enclaves, this results in a
 large trusted computing base (TCB). Ins
tead, we explore an approach in which we
 partition an application and use an enc
lave to protect only security&#45;sensitive 
data and functions, thus obtaining a sma
ller TCB.We describe Glamdring, the firs
t source&#45;level partitioning framework th
at secures applications written in C usi
ng Intel SGX. A developer first annotate
s security&#45;sensitive application data. G
lamdring then automatically partitions t
he application into untrusted and enclav
e parts: (i) to preserve data confidenti
ality, Glamdring uses dataflow analysis 
to identify functions that may be expose
d to sensitive data; (ii) for data integ
rity, it uses backward slicing to identi
fy functions that may affect sensitive d
ata. Glamdring then places security&#45;sens
itive functions inside the enclave, and 
adds runtime checks and cryptographic op
erations at the enclave boundary to prot
ect it from attack. Our evaluation of Gl
amdring with the Memcached store, the Li
breSSL library, and the Digital Bitbox b
itcoin wallet shows that it achieves sma
ll TCB sizes and has acceptable performa
nce overheads.</title>
<ellipse fill="none" stroke="#000000" cx="26906.022" cy="-461.0336" rx="182.6296" ry="342.4795"/>
<text text-anchor="middle" x="26906.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Trusted execution support in modern CPUs</text>
<text text-anchor="middle" x="26906.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, as offered by Intel SGX enclaves, can </text>
<text text-anchor="middle" x="26906.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">protect applications in untrusted enviro</text>
<text text-anchor="middle" x="26906.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nments. While prior work has shown that </text>
<text text-anchor="middle" x="26906.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">legacy applications can run in their ent</text>
<text text-anchor="middle" x="26906.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">irety inside enclaves, this results in a</text>
<text text-anchor="middle" x="26906.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> large trusted computing base (TCB). Ins</text>
<text text-anchor="middle" x="26906.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tead, we explore an approach in which we</text>
<text text-anchor="middle" x="26906.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> partition an application and use an enc</text>
<text text-anchor="middle" x="26906.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lave to protect only security&#45;sensitive </text>
<text text-anchor="middle" x="26906.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">data and functions, thus obtaining a sma</text>
<text text-anchor="middle" x="26906.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ller TCB.We describe Glamdring, the firs</text>
<text text-anchor="middle" x="26906.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t source&#45;level partitioning framework th</text>
<text text-anchor="middle" x="26906.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at secures applications written in C usi</text>
<text text-anchor="middle" x="26906.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng Intel SGX. A developer first annotate</text>
<text text-anchor="middle" x="26906.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s security&#45;sensitive application data. G</text>
<text text-anchor="middle" x="26906.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lamdring then automatically partitions t</text>
<text text-anchor="middle" x="26906.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">he application into untrusted and enclav</text>
<text text-anchor="middle" x="26906.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e parts: (i) to preserve data confidenti</text>
<text text-anchor="middle" x="26906.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ality, Glamdring uses dataflow analysis </text>
<text text-anchor="middle" x="26906.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to identify functions that may be expose</text>
<text text-anchor="middle" x="26906.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d to sensitive data; (ii) for data integ</text>
<text text-anchor="middle" x="26906.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rity, it uses backward slicing to identi</text>
<text text-anchor="middle" x="26906.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">fy functions that may affect sensitive d</text>
<text text-anchor="middle" x="26906.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ata. Glamdring then places security&#45;sens</text>
<text text-anchor="middle" x="26906.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">itive functions inside the enclave, and </text>
<text text-anchor="middle" x="26906.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">adds runtime checks and cryptographic op</text>
<text text-anchor="middle" x="26906.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erations at the enclave boundary to prot</text>
<text text-anchor="middle" x="26906.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ect it from attack. Our evaluation of Gl</text>
<text text-anchor="middle" x="26906.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">amdring with the Memcached store, the Li</text>
<text text-anchor="middle" x="26906.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">breSSL library, and the Digital Bitbox b</text>
<text text-anchor="middle" x="26906.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">itcoin wallet shows that it achieves sma</text>
<text text-anchor="middle" x="26906.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ll TCB sizes and has acceptable performa</text>
<text text-anchor="middle" x="26906.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nce overheads.</text>
</g>
<!-- 23&#45;&gt;Trusted execution support in modern CPUs
, as offered by Intel SGX enclaves, can 
protect applications in untrusted enviro
nments. While prior work has shown that 
legacy applications can run in their ent
irety inside enclaves, this results in a
 large trusted computing base (TCB). Ins
tead, we explore an approach in which we
 partition an application and use an enc
lave to protect only security&#45;sensitive 
data and functions, thus obtaining a sma
ller TCB.We describe Glamdring, the firs
t source&#45;level partitioning framework th
at secures applications written in C usi
ng Intel SGX. A developer first annotate
s security&#45;sensitive application data. G
lamdring then automatically partitions t
he application into untrusted and enclav
e parts: (i) to preserve data confidenti
ality, Glamdring uses dataflow analysis 
to identify functions that may be expose
d to sensitive data; (ii) for data integ
rity, it uses backward slicing to identi
fy functions that may affect sensitive d
ata. Glamdring then places security&#45;sens
itive functions inside the enclave, and 
adds runtime checks and cryptographic op
erations at the enclave boundary to prot
ect it from attack. Our evaluation of Gl
amdring with the Memcached store, the Li
breSSL library, and the Digital Bitbox b
itcoin wallet shows that it achieves sma
ll TCB sizes and has acceptable performa
nce overheads. -->
<g id="edge96" class="edge">
<title>23&#45;&gt;Trusted execution support in modern CPUs
, as offered by Intel SGX enclaves, can 
protect applications in untrusted enviro
nments. While prior work has shown that 
legacy applications can run in their ent
irety inside enclaves, this results in a
 large trusted computing base (TCB). Ins
tead, we explore an approach in which we
 partition an application and use an enc
lave to protect only security&#45;sensitive 
data and functions, thus obtaining a sma
ller TCB.We describe Glamdring, the firs
t source&#45;level partitioning framework th
at secures applications written in C usi
ng Intel SGX. A developer first annotate
s security&#45;sensitive application data. G
lamdring then automatically partitions t
he application into untrusted and enclav
e parts: (i) to preserve data confidenti
ality, Glamdring uses dataflow analysis 
to identify functions that may be expose
d to sensitive data; (ii) for data integ
rity, it uses backward slicing to identi
fy functions that may affect sensitive d
ata. Glamdring then places security&#45;sens
itive functions inside the enclave, and 
adds runtime checks and cryptographic op
erations at the enclave boundary to prot
ect it from attack. Our evaluation of Gl
amdring with the Memcached store, the Li
breSSL library, and the Digital Bitbox b
itcoin wallet shows that it achieves sma
ll TCB sizes and has acceptable performa
nce overheads.</title>
<path fill="none" stroke="#000000" d="M26719.6655,-958.3386C26732.9172,-922.9755 26764.2343,-839.4038 26797.4879,-750.6642"/>
<polygon fill="#000000" stroke="#000000" points="26800.7933,-751.8177 26801.0249,-741.2254 26794.2384,-749.3613 26800.7933,-751.8177"/>
</g>
<!-- High&#45;Resolution Side Channels for Untrus
ted Operating Systems -->
<g id="node97" class="node">
<title>High&#45;Resolution Side Channels for Untrus
ted Operating Systems</title>
<ellipse fill="none" stroke="#000000" cx="27287.022" cy="-461.0336" rx="180.2834" ry="25.4118"/>
<text text-anchor="middle" x="27287.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">High&#45;Resolution Side Channels for Untrus</text>
<text text-anchor="middle" x="27287.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ted Operating Systems</text>
</g>
<!-- 24&#45;&gt;High&#45;Resolution Side Channels for Untrus
ted Operating Systems -->
<g id="edge98" class="edge">
<title>24&#45;&gt;High&#45;Resolution Side Channels for Untrus
ted Operating Systems</title>
<path fill="none" stroke="#000000" d="M27838.8291,-975.7345C27759.9172,-974.2505 27532.8711,-966.1576 27476.022,-922.0672 27336.4391,-813.8112 27299.2823,-584.9238 27289.9603,-496.727"/>
<polygon fill="#000000" stroke="#000000" points="27293.434,-496.2884 27288.9565,-486.6863 27286.4688,-496.9849 27293.434,-496.2884"/>
</g>
<!-- Marcus Hähnel, TU Dresden, Operating Sy
stems Group; Weidong Cui and Marcus Pein
ado, Microsoft Research -->
<g id="node98" class="node">
<title>Marcus Hähnel, TU Dresden, Operating Sy
stems Group; Weidong Cui and Marcus Pein
ado, Microsoft Research</title>
<ellipse fill="none" stroke="#000000" cx="27673.022" cy="-461.0336" rx="187.935" ry="35.2113"/>
<text text-anchor="middle" x="27673.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Marcus Hähnel, TU Dresden, Operating Sy</text>
<text text-anchor="middle" x="27673.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stems Group; Weidong Cui and Marcus Pein</text>
<text text-anchor="middle" x="27673.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ado, Microsoft Research</text>
</g>
<!-- 24&#45;&gt;Marcus Hähnel, TU Dresden, Operating Sy
stems Group; Weidong Cui and Marcus Pein
ado, Microsoft Research -->
<g id="edge99" class="edge">
<title>24&#45;&gt;Marcus Hähnel, TU Dresden, Operating Sy
stems Group; Weidong Cui and Marcus Pein
ado, Microsoft Research</title>
<path fill="none" stroke="#000000" d="M27859.3785,-958.3386C27832.4144,-886.383 27730.6547,-614.8303 27689.9763,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="27693.1358,-504.7342 27686.3492,-496.5982 27686.5809,-507.1905 27693.1358,-504.7342"/>
</g>
<!-- Feature&#45;rich mass&#45;market operating syste
ms have large trusted computing bases (T
CBs) and a long history of vulnerabiliti
es. Systems like Overshadow, InkTag or H
aven attempt to remove the operating sys
tem (OS) from the TCB of applications wh
ile retaining its functionality. However
, the untrusted OS’s control of most p
hysical resources puts it in a much bett
er position to launch side&#45;channel attac
ks than traditional unprivileged side&#45;ch
annel attackers. Initial attacks focused
 on the page&#45;fault channel, demonstratin
g significant information leakage for th
ree legacy applications.We present two n
ew side channels for an untrusted OS whi
ch use timer interrupts and cache misses
 to achieve higher temporal and spatial 
resolution than the page&#45;fault channel. 
We leverage the untrusted OS’s control
 over hardware to reduce noise in the si
de channels to enable successful attacks
 in just a single run of the target. We 
demonstrate that our side channels enabl
e attacks against new SGX applications s
uch as VC3 that were designed not to tru
st the OS. We also show a new attack aga
inst libjpeg that extracts images with t
wo orders of magnitude more information 
than the page&#45;fault channel attack. -->
<g id="node99" class="node">
<title>Feature&#45;rich mass&#45;market operating syste
ms have large trusted computing bases (T
CBs) and a long history of vulnerabiliti
es. Systems like Overshadow, InkTag or H
aven attempt to remove the operating sys
tem (OS) from the TCB of applications wh
ile retaining its functionality. However
, the untrusted OS’s control of most p
hysical resources puts it in a much bett
er position to launch side&#45;channel attac
ks than traditional unprivileged side&#45;ch
annel attackers. Initial attacks focused
 on the page&#45;fault channel, demonstratin
g significant information leakage for th
ree legacy applications.We present two n
ew side channels for an untrusted OS whi
ch use timer interrupts and cache misses
 to achieve higher temporal and spatial 
resolution than the page&#45;fault channel. 
We leverage the untrusted OS’s control
 over hardware to reduce noise in the si
de channels to enable successful attacks
 in just a single run of the target. We 
demonstrate that our side channels enabl
e attacks against new SGX applications s
uch as VC3 that were designed not to tru
st the OS. We also show a new attack aga
inst libjpeg that extracts images with t
wo orders of magnitude more information 
than the page&#45;fault channel attack.</title>
<ellipse fill="none" stroke="#000000" cx="28060.022" cy="-461.0336" rx="181.152" ry="302.7835"/>
<text text-anchor="middle" x="28060.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Feature&#45;rich mass&#45;market operating syste</text>
<text text-anchor="middle" x="28060.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ms have large trusted computing bases (T</text>
<text text-anchor="middle" x="28060.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">CBs) and a long history of vulnerabiliti</text>
<text text-anchor="middle" x="28060.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es. Systems like Overshadow, InkTag or H</text>
<text text-anchor="middle" x="28060.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aven attempt to remove the operating sys</text>
<text text-anchor="middle" x="28060.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tem (OS) from the TCB of applications wh</text>
<text text-anchor="middle" x="28060.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ile retaining its functionality. However</text>
<text text-anchor="middle" x="28060.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, the untrusted OS’s control of most p</text>
<text text-anchor="middle" x="28060.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hysical resources puts it in a much bett</text>
<text text-anchor="middle" x="28060.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er position to launch side&#45;channel attac</text>
<text text-anchor="middle" x="28060.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ks than traditional unprivileged side&#45;ch</text>
<text text-anchor="middle" x="28060.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">annel attackers. Initial attacks focused</text>
<text text-anchor="middle" x="28060.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> on the page&#45;fault channel, demonstratin</text>
<text text-anchor="middle" x="28060.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g significant information leakage for th</text>
<text text-anchor="middle" x="28060.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ree legacy applications.We present two n</text>
<text text-anchor="middle" x="28060.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ew side channels for an untrusted OS whi</text>
<text text-anchor="middle" x="28060.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ch use timer interrupts and cache misses</text>
<text text-anchor="middle" x="28060.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> to achieve higher temporal and spatial </text>
<text text-anchor="middle" x="28060.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">resolution than the page&#45;fault channel. </text>
<text text-anchor="middle" x="28060.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">We leverage the untrusted OS’s control</text>
<text text-anchor="middle" x="28060.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> over hardware to reduce noise in the si</text>
<text text-anchor="middle" x="28060.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">de channels to enable successful attacks</text>
<text text-anchor="middle" x="28060.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in just a single run of the target. We </text>
<text text-anchor="middle" x="28060.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">demonstrate that our side channels enabl</text>
<text text-anchor="middle" x="28060.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e attacks against new SGX applications s</text>
<text text-anchor="middle" x="28060.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uch as VC3 that were designed not to tru</text>
<text text-anchor="middle" x="28060.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">st the OS. We also show a new attack aga</text>
<text text-anchor="middle" x="28060.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">inst libjpeg that extracts images with t</text>
<text text-anchor="middle" x="28060.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">wo orders of magnitude more information </text>
<text text-anchor="middle" x="28060.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">than the page&#45;fault channel attack.</text>
</g>
<!-- 24&#45;&gt;Feature&#45;rich mass&#45;market operating syste
ms have large trusted computing bases (T
CBs) and a long history of vulnerabiliti
es. Systems like Overshadow, InkTag or H
aven attempt to remove the operating sys
tem (OS) from the TCB of applications wh
ile retaining its functionality. However
, the untrusted OS’s control of most p
hysical resources puts it in a much bett
er position to launch side&#45;channel attac
ks than traditional unprivileged side&#45;ch
annel attackers. Initial attacks focused
 on the page&#45;fault channel, demonstratin
g significant information leakage for th
ree legacy applications.We present two n
ew side channels for an untrusted OS whi
ch use timer interrupts and cache misses
 to achieve higher temporal and spatial 
resolution than the page&#45;fault channel. 
We leverage the untrusted OS’s control
 over hardware to reduce noise in the si
de channels to enable successful attacks
 in just a single run of the target. We 
demonstrate that our side channels enabl
e attacks against new SGX applications s
uch as VC3 that were designed not to tru
st the OS. We also show a new attack aga
inst libjpeg that extracts images with t
wo orders of magnitude more information 
than the page&#45;fault channel attack. -->
<g id="edge100" class="edge">
<title>24&#45;&gt;Feature&#45;rich mass&#45;market operating syste
ms have large trusted computing bases (T
CBs) and a long history of vulnerabiliti
es. Systems like Overshadow, InkTag or H
aven attempt to remove the operating sys
tem (OS) from the TCB of applications wh
ile retaining its functionality. However
, the untrusted OS’s control of most p
hysical resources puts it in a much bett
er position to launch side&#45;channel attac
ks than traditional unprivileged side&#45;ch
annel attackers. Initial attacks focused
 on the page&#45;fault channel, demonstratin
g significant information leakage for th
ree legacy applications.We present two n
ew side channels for an untrusted OS whi
ch use timer interrupts and cache misses
 to achieve higher temporal and spatial 
resolution than the page&#45;fault channel. 
We leverage the untrusted OS’s control
 over hardware to reduce noise in the si
de channels to enable successful attacks
 in just a single run of the target. We 
demonstrate that our side channels enabl
e attacks against new SGX applications s
uch as VC3 that were designed not to tru
st the OS. We also show a new attack aga
inst libjpeg that extracts images with t
wo orders of magnitude more information 
than the page&#45;fault channel attack.</title>
<path fill="none" stroke="#000000" d="M27872.6999,-958.3386C27887.2064,-919.8267 27923.2496,-824.1388 27959.8894,-726.8669"/>
<polygon fill="#000000" stroke="#000000" points="27963.1866,-728.0423 27963.4363,-717.4505 27956.6359,-725.5748 27963.1866,-728.0423"/>
</g>
<!-- Understanding Security Implications of U
sing Containers in the Cloud -->
<g id="node101" class="node">
<title>Understanding Security Implications of U
sing Containers in the Cloud</title>
<ellipse fill="none" stroke="#000000" cx="28437.022" cy="-461.0336" rx="177.244" ry="25.4118"/>
<text text-anchor="middle" x="28437.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Understanding Security Implications of U</text>
<text text-anchor="middle" x="28437.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sing Containers in the Cloud</text>
</g>
<!-- 25&#45;&gt;Understanding Security Implications of U
sing Containers in the Cloud -->
<g id="edge102" class="edge">
<title>25&#45;&gt;Understanding Security Implications of U
sing Containers in the Cloud</title>
<path fill="none" stroke="#000000" d="M28988.9316,-973.9164C28904.8045,-967.0226 28651.9501,-944.6084 28623.022,-922.0672 28484.0016,-813.7405 28448.4187,-584.8952 28439.7106,-496.7183"/>
<polygon fill="#000000" stroke="#000000" points="28443.1881,-496.3127 28438.7768,-486.6799 28436.2182,-496.9611 28443.1881,-496.3127"/>
</g>
<!-- Byungchul Tak, Kyungpook National Univer
sity; Canturk Isci, Sastry Duri, Nilton 
Bila, Shripad Nadgowda, and James Doran,
 IBM TJ Watson Research Center -->
<g id="node102" class="node">
<title>Byungchul Tak, Kyungpook National Univer
sity; Canturk Isci, Sastry Duri, Nilton 
Bila, Shripad Nadgowda, and James Doran,
 IBM TJ Watson Research Center</title>
<ellipse fill="none" stroke="#000000" cx="28822.022" cy="-461.0336" rx="189.9663" ry="45.011"/>
<text text-anchor="middle" x="28822.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Byungchul Tak, Kyungpook National Univer</text>
<text text-anchor="middle" x="28822.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sity; Canturk Isci, Sastry Duri, Nilton </text>
<text text-anchor="middle" x="28822.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Bila, Shripad Nadgowda, and James Doran,</text>
<text text-anchor="middle" x="28822.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> IBM TJ Watson Research Center</text>
</g>
<!-- 25&#45;&gt;Byungchul Tak, Kyungpook National Univer
sity; Canturk Isci, Sastry Duri, Nilton 
Bila, Shripad Nadgowda, and James Doran,
 IBM TJ Watson Research Center -->
<g id="edge103" class="edge">
<title>25&#45;&gt;Byungchul Tak, Kyungpook National Univer
sity; Canturk Isci, Sastry Duri, Nilton 
Bila, Shripad Nadgowda, and James Doran,
 IBM TJ Watson Research Center</title>
<path fill="none" stroke="#000000" d="M29009.3441,-958.3386C28982.9949,-888.3865 28885.591,-629.7974 28842.6194,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="28845.8043,-514.2419 28839.0039,-506.1175 28839.2536,-516.7094 28845.8043,-514.2419"/>
</g>
<!-- Container technology is being adopted as
 a mainstream platform for IT solutions 
because of high degree of agility, reusa
bility and portability it offers. Howeve
r, there are challenges to be addressed 
for successful adoption. First, it is di
fficult to establish the full pedigree o
f images downloaded from public registri
es. Some might have vulnerabilities intr
oduced unintentionally through rounds of
 updates by different users. Second, non
&#45;conformance to the immutable software d
eployment policies, such as those promot
ed by the DevOps principles, introduces 
vulnerabilities and the loss of control 
over deployed software. In this study, w
e investigate containers deployed in a p
roduction cloud to derive a set of recom
mended approaches to address these chall
enges. Our analysis reveals evidences th
at (i), images of unresolved pedigree ha
ve introduced vulnerabilities to contain
ers belonging to third parties; (ii), up
dates to live public containers are comm
on, defying the tenet that deployed soft
ware is immutable; and (iii), scanning c
ontainers or images alone is insufficien
t to eradicate vulnerabilities from publ
ic containers. We advocate for better sy
stems support for tracking image provena
nce and resolving disruptive changes to 
containers, and propose practices that c
ontainer users should adopt to limit the
 vulnerability of their containers. -->
<g id="node103" class="node">
<title>Container technology is being adopted as
 a mainstream platform for IT solutions 
because of high degree of agility, reusa
bility and portability it offers. Howeve
r, there are challenges to be addressed 
for successful adoption. First, it is di
fficult to establish the full pedigree o
f images downloaded from public registri
es. Some might have vulnerabilities intr
oduced unintentionally through rounds of
 updates by different users. Second, non
&#45;conformance to the immutable software d
eployment policies, such as those promot
ed by the DevOps principles, introduces 
vulnerabilities and the loss of control 
over deployed software. In this study, w
e investigate containers deployed in a p
roduction cloud to derive a set of recom
mended approaches to address these chall
enges. Our analysis reveals evidences th
at (i), images of unresolved pedigree ha
ve introduced vulnerabilities to contain
ers belonging to third parties; (ii), up
dates to live public containers are comm
on, defying the tenet that deployed soft
ware is immutable; and (iii), scanning c
ontainers or images alone is insufficien
t to eradicate vulnerabilities from publ
ic containers. We advocate for better sy
stems support for tracking image provena
nce and resolving disruptive changes to 
containers, and propose practices that c
ontainer users should adopt to limit the
 vulnerability of their containers.</title>
<ellipse fill="none" stroke="#000000" cx="29210.022" cy="-461.0336" rx="179.6358" ry="342.4795"/>
<text text-anchor="middle" x="29210.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Container technology is being adopted as</text>
<text text-anchor="middle" x="29210.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a mainstream platform for IT solutions </text>
<text text-anchor="middle" x="29210.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">because of high degree of agility, reusa</text>
<text text-anchor="middle" x="29210.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">bility and portability it offers. Howeve</text>
<text text-anchor="middle" x="29210.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r, there are challenges to be addressed </text>
<text text-anchor="middle" x="29210.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">for successful adoption. First, it is di</text>
<text text-anchor="middle" x="29210.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">fficult to establish the full pedigree o</text>
<text text-anchor="middle" x="29210.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f images downloaded from public registri</text>
<text text-anchor="middle" x="29210.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es. Some might have vulnerabilities intr</text>
<text text-anchor="middle" x="29210.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oduced unintentionally through rounds of</text>
<text text-anchor="middle" x="29210.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> updates by different users. Second, non</text>
<text text-anchor="middle" x="29210.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;conformance to the immutable software d</text>
<text text-anchor="middle" x="29210.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eployment policies, such as those promot</text>
<text text-anchor="middle" x="29210.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed by the DevOps principles, introduces </text>
<text text-anchor="middle" x="29210.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vulnerabilities and the loss of control </text>
<text text-anchor="middle" x="29210.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">over deployed software. In this study, w</text>
<text text-anchor="middle" x="29210.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e investigate containers deployed in a p</text>
<text text-anchor="middle" x="29210.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">roduction cloud to derive a set of recom</text>
<text text-anchor="middle" x="29210.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mended approaches to address these chall</text>
<text text-anchor="middle" x="29210.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">enges. Our analysis reveals evidences th</text>
<text text-anchor="middle" x="29210.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at (i), images of unresolved pedigree ha</text>
<text text-anchor="middle" x="29210.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ve introduced vulnerabilities to contain</text>
<text text-anchor="middle" x="29210.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ers belonging to third parties; (ii), up</text>
<text text-anchor="middle" x="29210.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">dates to live public containers are comm</text>
<text text-anchor="middle" x="29210.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on, defying the tenet that deployed soft</text>
<text text-anchor="middle" x="29210.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ware is immutable; and (iii), scanning c</text>
<text text-anchor="middle" x="29210.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ontainers or images alone is insufficien</text>
<text text-anchor="middle" x="29210.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t to eradicate vulnerabilities from publ</text>
<text text-anchor="middle" x="29210.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ic containers. We advocate for better sy</text>
<text text-anchor="middle" x="29210.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stems support for tracking image provena</text>
<text text-anchor="middle" x="29210.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nce and resolving disruptive changes to </text>
<text text-anchor="middle" x="29210.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">containers, and propose practices that c</text>
<text text-anchor="middle" x="29210.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ontainer users should adopt to limit the</text>
<text text-anchor="middle" x="29210.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> vulnerability of their containers.</text>
</g>
<!-- 25&#45;&gt;Container technology is being adopted as
 a mainstream platform for IT solutions 
because of high degree of agility, reusa
bility and portability it offers. Howeve
r, there are challenges to be addressed 
for successful adoption. First, it is di
fficult to establish the full pedigree o
f images downloaded from public registri
es. Some might have vulnerabilities intr
oduced unintentionally through rounds of
 updates by different users. Second, non
&#45;conformance to the immutable software d
eployment policies, such as those promot
ed by the DevOps principles, introduces 
vulnerabilities and the loss of control 
over deployed software. In this study, w
e investigate containers deployed in a p
roduction cloud to derive a set of recom
mended approaches to address these chall
enges. Our analysis reveals evidences th
at (i), images of unresolved pedigree ha
ve introduced vulnerabilities to contain
ers belonging to third parties; (ii), up
dates to live public containers are comm
on, defying the tenet that deployed soft
ware is immutable; and (iii), scanning c
ontainers or images alone is insufficien
t to eradicate vulnerabilities from publ
ic containers. We advocate for better sy
stems support for tracking image provena
nce and resolving disruptive changes to 
containers, and propose practices that c
ontainer users should adopt to limit the
 vulnerability of their containers. -->
<g id="edge104" class="edge">
<title>25&#45;&gt;Container technology is being adopted as
 a mainstream platform for IT solutions 
because of high degree of agility, reusa
bility and portability it offers. Howeve
r, there are challenges to be addressed 
for successful adoption. First, it is di
fficult to establish the full pedigree o
f images downloaded from public registri
es. Some might have vulnerabilities intr
oduced unintentionally through rounds of
 updates by different users. Second, non
&#45;conformance to the immutable software d
eployment policies, such as those promot
ed by the DevOps principles, introduces 
vulnerabilities and the loss of control 
over deployed software. In this study, w
e investigate containers deployed in a p
roduction cloud to derive a set of recom
mended approaches to address these chall
enges. Our analysis reveals evidences th
at (i), images of unresolved pedigree ha
ve introduced vulnerabilities to contain
ers belonging to third parties; (ii), up
dates to live public containers are comm
on, defying the tenet that deployed soft
ware is immutable; and (iii), scanning c
ontainers or images alone is insufficien
t to eradicate vulnerabilities from publ
ic containers. We advocate for better sy
stems support for tracking image provena
nce and resolving disruptive changes to 
containers, and propose practices that c
ontainer users should adopt to limit the
 vulnerability of their containers.</title>
<path fill="none" stroke="#000000" d="M29022.6999,-958.3386C29036.1168,-922.7193 29067.9568,-838.1901 29101.6525,-748.7343"/>
<polygon fill="#000000" stroke="#000000" points="29104.9865,-749.8123 29105.2361,-739.2204 29098.4358,-747.3448 29104.9865,-749.8123"/>
</g>
<!-- Memshare: a Dynamic Multi&#45;tenant Key&#45;val
ue Cache -->
<g id="node105" class="node">
<title>Memshare: a Dynamic Multi&#45;tenant Key&#45;val
ue Cache</title>
<ellipse fill="none" stroke="#000000" cx="29596.022" cy="-461.0336" rx="187.5968" ry="25.4118"/>
<text text-anchor="middle" x="29596.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Memshare: a Dynamic Multi&#45;tenant Key&#45;val</text>
<text text-anchor="middle" x="29596.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ue Cache</text>
</g>
<!-- 26&#45;&gt;Memshare: a Dynamic Multi&#45;tenant Key&#45;val
ue Cache -->
<g id="edge106" class="edge">
<title>26&#45;&gt;Memshare: a Dynamic Multi&#45;tenant Key&#45;val
ue Cache</title>
<path fill="none" stroke="#000000" d="M30156.7906,-975.7041C30077.7623,-974.1364 29850.3465,-965.8366 29793.022,-922.0672 29651.7547,-814.2044 29610.5107,-585.0829 29599.6035,-496.7753"/>
<polygon fill="#000000" stroke="#000000" points="29603.0652,-496.2435 29598.4191,-486.7217 29596.1133,-497.0626 29603.0652,-496.2435"/>
</g>
<!-- Asaf Cidon, Stanford University; Daniel 
Rushton, University of Utah; Stephen M. 
Rumble, Google Inc.; Ryan Stutsman, Univ
ersity of Utah -->
<g id="node106" class="node">
<title>Asaf Cidon, Stanford University; Daniel 
Rushton, University of Utah; Stephen M. 
Rumble, Google Inc.; Ryan Stutsman, Univ
ersity of Utah</title>
<ellipse fill="none" stroke="#000000" cx="29986.022" cy="-461.0336" rx="184.2978" ry="45.011"/>
<text text-anchor="middle" x="29986.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Asaf Cidon, Stanford University; Daniel </text>
<text text-anchor="middle" x="29986.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Rushton, University of Utah; Stephen M. </text>
<text text-anchor="middle" x="29986.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Rumble, Google Inc.; Ryan Stutsman, Univ</text>
<text text-anchor="middle" x="29986.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ersity of Utah</text>
</g>
<!-- 26&#45;&gt;Asaf Cidon, Stanford University; Daniel 
Rushton, University of Utah; Stephen M. 
Rumble, Google Inc.; Ryan Stutsman, Univ
ersity of Utah -->
<g id="edge107" class="edge">
<title>26&#45;&gt;Asaf Cidon, Stanford University; Daniel 
Rushton, University of Utah; Stephen M. 
Rumble, Google Inc.; Ryan Stutsman, Univ
ersity of Utah</title>
<path fill="none" stroke="#000000" d="M30177.2064,-958.3386C30150.3139,-888.3865 30050.9017,-629.7974 30007.0441,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="30010.2094,-514.1955 30003.3541,-506.1175 30003.6756,-516.7074 30010.2094,-514.1955"/>
</g>
<!-- Web application performance heavily reli
es on the hit rate of DRAM key&#45;value cac
hes. Current DRAM caches statically part
ition memory across applications that sh
are the cache. This results in under uti
lization and limits cache hit rates. We 
present Memshare, a DRAM key&#45;value cache
 that dynamically manages memory across 
applications. Memshare provides a resour
ce sharing model that guarantees reserve
d memory to different applications while
 dynamically pooling and sharing the rem
aining memory to optimize overall hit ra
te.Key&#45;value caches are typically memory
 capacity bound, which leaves cache serv
er CPU and memory bandwidth idle. Memsha
re leverages these resources with a log&#45;
structured design that allows it to prov
ide better hit rates than conventional c
aches by dynamically re&#45;partitioning mem
ory among applications. We implemented M
emshare and ran it on a week&#45;long trace 
from a commercial memcached provider. Me
mshare increases the combined hit rate o
f the applications in the trace from 84.
7% to 90.8%, and it reduces the total nu
mber of misses by 39.7% without signific
antly affecting cache throughput or late
ncy. Even for single&#45;tenant applications
, Memshare increases the average hit rat
e of the state&#45;of&#45;the&#45;art key&#45;value cach
e by an additional 2.7%. -->
<g id="node107" class="node">
<title>Web application performance heavily reli
es on the hit rate of DRAM key&#45;value cac
hes. Current DRAM caches statically part
ition memory across applications that sh
are the cache. This results in under uti
lization and limits cache hit rates. We 
present Memshare, a DRAM key&#45;value cache
 that dynamically manages memory across 
applications. Memshare provides a resour
ce sharing model that guarantees reserve
d memory to different applications while
 dynamically pooling and sharing the rem
aining memory to optimize overall hit ra
te.Key&#45;value caches are typically memory
 capacity bound, which leaves cache serv
er CPU and memory bandwidth idle. Memsha
re leverages these resources with a log&#45;
structured design that allows it to prov
ide better hit rates than conventional c
aches by dynamically re&#45;partitioning mem
ory among applications. We implemented M
emshare and ran it on a week&#45;long trace 
from a commercial memcached provider. Me
mshare increases the combined hit rate o
f the applications in the trace from 84.
7% to 90.8%, and it reduces the total nu
mber of misses by 39.7% without signific
antly affecting cache throughput or late
ncy. Even for single&#45;tenant applications
, Memshare increases the average hit rat
e of the state&#45;of&#45;the&#45;art key&#45;value cach
e by an additional 2.7%.</title>
<ellipse fill="none" stroke="#000000" cx="30382.022" cy="-461.0336" rx="193.6976" ry="322.3814"/>
<text text-anchor="middle" x="30382.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Web application performance heavily reli</text>
<text text-anchor="middle" x="30382.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es on the hit rate of DRAM key&#45;value cac</text>
<text text-anchor="middle" x="30382.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hes. Current DRAM caches statically part</text>
<text text-anchor="middle" x="30382.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ition memory across applications that sh</text>
<text text-anchor="middle" x="30382.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">are the cache. This results in under uti</text>
<text text-anchor="middle" x="30382.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lization and limits cache hit rates. We </text>
<text text-anchor="middle" x="30382.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">present Memshare, a DRAM key&#45;value cache</text>
<text text-anchor="middle" x="30382.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> that dynamically manages memory across </text>
<text text-anchor="middle" x="30382.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">applications. Memshare provides a resour</text>
<text text-anchor="middle" x="30382.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ce sharing model that guarantees reserve</text>
<text text-anchor="middle" x="30382.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d memory to different applications while</text>
<text text-anchor="middle" x="30382.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> dynamically pooling and sharing the rem</text>
<text text-anchor="middle" x="30382.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aining memory to optimize overall hit ra</text>
<text text-anchor="middle" x="30382.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">te.Key&#45;value caches are typically memory</text>
<text text-anchor="middle" x="30382.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> capacity bound, which leaves cache serv</text>
<text text-anchor="middle" x="30382.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er CPU and memory bandwidth idle. Memsha</text>
<text text-anchor="middle" x="30382.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re leverages these resources with a log&#45;</text>
<text text-anchor="middle" x="30382.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">structured design that allows it to prov</text>
<text text-anchor="middle" x="30382.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ide better hit rates than conventional c</text>
<text text-anchor="middle" x="30382.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aches by dynamically re&#45;partitioning mem</text>
<text text-anchor="middle" x="30382.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ory among applications. We implemented M</text>
<text text-anchor="middle" x="30382.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">emshare and ran it on a week&#45;long trace </text>
<text text-anchor="middle" x="30382.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">from a commercial memcached provider. Me</text>
<text text-anchor="middle" x="30382.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mshare increases the combined hit rate o</text>
<text text-anchor="middle" x="30382.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f the applications in the trace from 84.</text>
<text text-anchor="middle" x="30382.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">7% to 90.8%, and it reduces the total nu</text>
<text text-anchor="middle" x="30382.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mber of misses by 39.7% without signific</text>
<text text-anchor="middle" x="30382.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">antly affecting cache throughput or late</text>
<text text-anchor="middle" x="30382.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ncy. Even for single&#45;tenant applications</text>
<text text-anchor="middle" x="30382.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, Memshare increases the average hit rat</text>
<text text-anchor="middle" x="30382.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e of the state&#45;of&#45;the&#45;art key&#45;value cach</text>
<text text-anchor="middle" x="30382.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e by an additional 2.7%.</text>
</g>
<!-- 26&#45;&gt;Web application performance heavily reli
es on the hit rate of DRAM key&#45;value cac
hes. Current DRAM caches statically part
ition memory across applications that sh
are the cache. This results in under uti
lization and limits cache hit rates. We 
present Memshare, a DRAM key&#45;value cache
 that dynamically manages memory across 
applications. Memshare provides a resour
ce sharing model that guarantees reserve
d memory to different applications while
 dynamically pooling and sharing the rem
aining memory to optimize overall hit ra
te.Key&#45;value caches are typically memory
 capacity bound, which leaves cache serv
er CPU and memory bandwidth idle. Memsha
re leverages these resources with a log&#45;
structured design that allows it to prov
ide better hit rates than conventional c
aches by dynamically re&#45;partitioning mem
ory among applications. We implemented M
emshare and ran it on a week&#45;long trace 
from a commercial memcached provider. Me
mshare increases the combined hit rate o
f the applications in the trace from 84.
7% to 90.8%, and it reduces the total nu
mber of misses by 39.7% without signific
antly affecting cache throughput or late
ncy. Even for single&#45;tenant applications
, Memshare increases the average hit rat
e of the state&#45;of&#45;the&#45;art key&#45;value cach
e by an additional 2.7%. -->
<g id="edge108" class="edge">
<title>26&#45;&gt;Web application performance heavily reli
es on the hit rate of DRAM key&#45;value cac
hes. Current DRAM caches statically part
ition memory across applications that sh
are the cache. This results in under uti
lization and limits cache hit rates. We 
present Memshare, a DRAM key&#45;value cache
 that dynamically manages memory across 
applications. Memshare provides a resour
ce sharing model that guarantees reserve
d memory to different applications while
 dynamically pooling and sharing the rem
aining memory to optimize overall hit ra
te.Key&#45;value caches are typically memory
 capacity bound, which leaves cache serv
er CPU and memory bandwidth idle. Memsha
re leverages these resources with a log&#45;
structured design that allows it to prov
ide better hit rates than conventional c
aches by dynamically re&#45;partitioning mem
ory among applications. We implemented M
emshare and ran it on a week&#45;long trace 
from a commercial memcached provider. Me
mshare increases the combined hit rate o
f the applications in the trace from 84.
7% to 90.8%, and it reduces the total nu
mber of misses by 39.7% without signific
antly affecting cache throughput or late
ncy. Even for single&#45;tenant applications
, Memshare increases the average hit rat
e of the state&#45;of&#45;the&#45;art key&#45;value cach
e by an additional 2.7%.</title>
<path fill="none" stroke="#000000" d="M30190.8376,-958.3386C30204.8573,-921.871 30238.5861,-834.1361 30273.8782,-742.3351"/>
<polygon fill="#000000" stroke="#000000" points="30277.1976,-743.4543 30277.5192,-732.8643 30270.6638,-740.9424 30277.1976,-743.4543"/>
</g>
<!-- Replication&#45;driven Live Reconfiguration 
for Fast Distributed Transaction Process
ing -->
<g id="node109" class="node">
<title>Replication&#45;driven Live Reconfiguration 
for Fast Distributed Transaction Process
ing</title>
<ellipse fill="none" stroke="#000000" cx="30768.022" cy="-461.0336" rx="174.7749" ry="35.2113"/>
<text text-anchor="middle" x="30768.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Replication&#45;driven Live Reconfiguration </text>
<text text-anchor="middle" x="30768.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">for Fast Distributed Transaction Process</text>
<text text-anchor="middle" x="30768.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing</text>
</g>
<!-- 27&#45;&gt;Replication&#45;driven Live Reconfiguration 
for Fast Distributed Transaction Process
ing -->
<g id="edge110" class="edge">
<title>27&#45;&gt;Replication&#45;driven Live Reconfiguration 
for Fast Distributed Transaction Process
ing</title>
<path fill="none" stroke="#000000" d="M31316.0655,-973.9122C31232.3547,-967.0061 30980.7559,-944.5595 30952.022,-922.0672 30818.4234,-817.4892 30781.4887,-601.1034 30771.554,-506.7224"/>
<polygon fill="#000000" stroke="#000000" points="30775.0231,-506.2376 30770.5469,-496.6348 30768.0578,-506.9331 30775.0231,-506.2376"/>
</g>
<!-- Xingda Wei, Sijie Shen, Rong Chen, and H
aibo Chen, Shanghai Jiao Tong University -->
<g id="node110" class="node">
<title>Xingda Wei, Sijie Shen, Rong Chen, and H
aibo Chen, Shanghai Jiao Tong University</title>
<ellipse fill="none" stroke="#000000" cx="31143.022" cy="-461.0336" rx="182.4431" ry="25.4118"/>
<text text-anchor="middle" x="31143.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Xingda Wei, Sijie Shen, Rong Chen, and H</text>
<text text-anchor="middle" x="31143.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aibo Chen, Shanghai Jiao Tong University</text>
</g>
<!-- 27&#45;&gt;Xingda Wei, Sijie Shen, Rong Chen, and H
aibo Chen, Shanghai Jiao Tong University -->
<g id="edge111" class="edge">
<title>27&#45;&gt;Xingda Wei, Sijie Shen, Rong Chen, and H
aibo Chen, Shanghai Jiao Tong University</title>
<path fill="none" stroke="#000000" d="M31336.253,-958.636C31307.5605,-884.7479 31195.6616,-596.5894 31156.5818,-495.9524"/>
<polygon fill="#000000" stroke="#000000" points="31159.8083,-494.5923 31152.9257,-486.5375 31153.2831,-497.1263 31159.8083,-494.5923"/>
</g>
<!-- Recent in&#45;memory database systems levera
ge advanced hardware features like RDMA 
to provide transactional processing at m
illions of transactions per second. Dist
ributed transaction processing systems c
an scale to even higher rates, especiall
y for partitionable workloads. Unfortuna
tely, these high rates are challenging t
o sustain during partition reconfigurati
on events. In this paper, we first show 
that state&#45;of&#45;the&#45;art approaches would c
ause notable performance disruption unde
r fast transaction processing. To this e
nd, this paper presents DrTM+B, a live r
econfiguration approach that seamlessly 
repartitions data while causing little p
erformance disruption to running transac
tions. DrTM+B uses a pre&#45;copy based mech
anism, where excessive data transfer is 
avoided by leveraging properties commonl
y found in recent transactional systems.
 DrTM+B’s reconfiguration plans reduce
 data movement by preferring existing da
ta replicas, while data is asynchronousl
y copied from multiple replicas in paral
lel. It further reuses the log forwardin
g mechanism in primary&#45;backup replicatio
n to seamlessly track and forward dirty 
database tuples, avoiding iterative copy
ing costs. To commit a reconfiguration p
lan in a transactionally safe way, DrTM+
B designs a cooperative commit protocol 
to perform data and state synchronizatio
ns among replicas. Evaluation on a worki
ng system based on DrTM+R with 3&#45;way rep
lication using typical OLTP workloads li
ke TPC&#45;C and SmallBank shows that DrTM+B
 incurs only very small performance degr
adation during live reconfiguration. Bot
h the reconfiguration time and the downt
ime are also minimal. -->
<g id="node111" class="node">
<title>Recent in&#45;memory database systems levera
ge advanced hardware features like RDMA 
to provide transactional processing at m
illions of transactions per second. Dist
ributed transaction processing systems c
an scale to even higher rates, especiall
y for partitionable workloads. Unfortuna
tely, these high rates are challenging t
o sustain during partition reconfigurati
on events. In this paper, we first show 
that state&#45;of&#45;the&#45;art approaches would c
ause notable performance disruption unde
r fast transaction processing. To this e
nd, this paper presents DrTM+B, a live r
econfiguration approach that seamlessly 
repartitions data while causing little p
erformance disruption to running transac
tions. DrTM+B uses a pre&#45;copy based mech
anism, where excessive data transfer is 
avoided by leveraging properties commonl
y found in recent transactional systems.
 DrTM+B’s reconfiguration plans reduce
 data movement by preferring existing da
ta replicas, while data is asynchronousl
y copied from multiple replicas in paral
lel. It further reuses the log forwardin
g mechanism in primary&#45;backup replicatio
n to seamlessly track and forward dirty 
database tuples, avoiding iterative copy
ing costs. To commit a reconfiguration p
lan in a transactionally safe way, DrTM+
B designs a cooperative commit protocol 
to perform data and state synchronizatio
ns among replicas. Evaluation on a worki
ng system based on DrTM+R with 3&#45;way rep
lication using typical OLTP workloads li
ke TPC&#45;C and SmallBank shows that DrTM+B
 incurs only very small performance degr
adation during live reconfiguration. Bot
h the reconfiguration time and the downt
ime are also minimal.</title>
<ellipse fill="none" stroke="#000000" cx="31542.022" cy="-461.0336" rx="198.5131" ry="411.5723"/>
<text text-anchor="middle" x="31542.022" y="-736.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Recent in&#45;memory database systems levera</text>
<text text-anchor="middle" x="31542.022" y="-722.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ge advanced hardware features like RDMA </text>
<text text-anchor="middle" x="31542.022" y="-708.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to provide transactional processing at m</text>
<text text-anchor="middle" x="31542.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000">illions of transactions per second. Dist</text>
<text text-anchor="middle" x="31542.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ributed transaction processing systems c</text>
<text text-anchor="middle" x="31542.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">an scale to even higher rates, especiall</text>
<text text-anchor="middle" x="31542.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y for partitionable workloads. Unfortuna</text>
<text text-anchor="middle" x="31542.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tely, these high rates are challenging t</text>
<text text-anchor="middle" x="31542.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o sustain during partition reconfigurati</text>
<text text-anchor="middle" x="31542.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on events. In this paper, we first show </text>
<text text-anchor="middle" x="31542.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">that state&#45;of&#45;the&#45;art approaches would c</text>
<text text-anchor="middle" x="31542.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ause notable performance disruption unde</text>
<text text-anchor="middle" x="31542.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r fast transaction processing. To this e</text>
<text text-anchor="middle" x="31542.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd, this paper presents DrTM+B, a live r</text>
<text text-anchor="middle" x="31542.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">econfiguration approach that seamlessly </text>
<text text-anchor="middle" x="31542.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">repartitions data while causing little p</text>
<text text-anchor="middle" x="31542.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erformance disruption to running transac</text>
<text text-anchor="middle" x="31542.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tions. DrTM+B uses a pre&#45;copy based mech</text>
<text text-anchor="middle" x="31542.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">anism, where excessive data transfer is </text>
<text text-anchor="middle" x="31542.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">avoided by leveraging properties commonl</text>
<text text-anchor="middle" x="31542.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y found in recent transactional systems.</text>
<text text-anchor="middle" x="31542.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> DrTM+B’s reconfiguration plans reduce</text>
<text text-anchor="middle" x="31542.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> data movement by preferring existing da</text>
<text text-anchor="middle" x="31542.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ta replicas, while data is asynchronousl</text>
<text text-anchor="middle" x="31542.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y copied from multiple replicas in paral</text>
<text text-anchor="middle" x="31542.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lel. It further reuses the log forwardin</text>
<text text-anchor="middle" x="31542.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g mechanism in primary&#45;backup replicatio</text>
<text text-anchor="middle" x="31542.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n to seamlessly track and forward dirty </text>
<text text-anchor="middle" x="31542.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">database tuples, avoiding iterative copy</text>
<text text-anchor="middle" x="31542.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing costs. To commit a reconfiguration p</text>
<text text-anchor="middle" x="31542.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lan in a transactionally safe way, DrTM+</text>
<text text-anchor="middle" x="31542.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">B designs a cooperative commit protocol </text>
<text text-anchor="middle" x="31542.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to perform data and state synchronizatio</text>
<text text-anchor="middle" x="31542.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns among replicas. Evaluation on a worki</text>
<text text-anchor="middle" x="31542.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng system based on DrTM+R with 3&#45;way rep</text>
<text text-anchor="middle" x="31542.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lication using typical OLTP workloads li</text>
<text text-anchor="middle" x="31542.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ke TPC&#45;C and SmallBank shows that DrTM+B</text>
<text text-anchor="middle" x="31542.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> incurs only very small performance degr</text>
<text text-anchor="middle" x="31542.022" y="-204.8336" font-family="Times,serif" font-size="14.00" fill="#000000">adation during live reconfiguration. Bot</text>
<text text-anchor="middle" x="31542.022" y="-190.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h the reconfiguration time and the downt</text>
<text text-anchor="middle" x="31542.022" y="-176.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ime are also minimal.</text>
</g>
<!-- 27&#45;&gt;Recent in&#45;memory database systems levera
ge advanced hardware features like RDMA 
to provide transactional processing at m
illions of transactions per second. Dist
ributed transaction processing systems c
an scale to even higher rates, especiall
y for partitionable workloads. Unfortuna
tely, these high rates are challenging t
o sustain during partition reconfigurati
on events. In this paper, we first show 
that state&#45;of&#45;the&#45;art approaches would c
ause notable performance disruption unde
r fast transaction processing. To this e
nd, this paper presents DrTM+B, a live r
econfiguration approach that seamlessly 
repartitions data while causing little p
erformance disruption to running transac
tions. DrTM+B uses a pre&#45;copy based mech
anism, where excessive data transfer is 
avoided by leveraging properties commonl
y found in recent transactional systems.
 DrTM+B’s reconfiguration plans reduce
 data movement by preferring existing da
ta replicas, while data is asynchronousl
y copied from multiple replicas in paral
lel. It further reuses the log forwardin
g mechanism in primary&#45;backup replicatio
n to seamlessly track and forward dirty 
database tuples, avoiding iterative copy
ing costs. To commit a reconfiguration p
lan in a transactionally safe way, DrTM+
B designs a cooperative commit protocol 
to perform data and state synchronizatio
ns among replicas. Evaluation on a worki
ng system based on DrTM+R with 3&#45;way rep
lication using typical OLTP workloads li
ke TPC&#45;C and SmallBank shows that DrTM+B
 incurs only very small performance degr
adation during live reconfiguration. Bot
h the reconfiguration time and the downt
ime are also minimal. -->
<g id="edge112" class="edge">
<title>27&#45;&gt;Recent in&#45;memory database systems levera
ge advanced hardware features like RDMA 
to provide transactional processing at m
illions of transactions per second. Dist
ributed transaction processing systems c
an scale to even higher rates, especiall
y for partitionable workloads. Unfortuna
tely, these high rates are challenging t
o sustain during partition reconfigurati
on events. In this paper, we first show 
that state&#45;of&#45;the&#45;art approaches would c
ause notable performance disruption unde
r fast transaction processing. To this e
nd, this paper presents DrTM+B, a live r
econfiguration approach that seamlessly 
repartitions data while causing little p
erformance disruption to running transac
tions. DrTM+B uses a pre&#45;copy based mech
anism, where excessive data transfer is 
avoided by leveraging properties commonl
y found in recent transactional systems.
 DrTM+B’s reconfiguration plans reduce
 data movement by preferring existing da
ta replicas, while data is asynchronousl
y copied from multiple replicas in paral
lel. It further reuses the log forwardin
g mechanism in primary&#45;backup replicatio
n to seamlessly track and forward dirty 
database tuples, avoiding iterative copy
ing costs. To commit a reconfiguration p
lan in a transactionally safe way, DrTM+
B designs a cooperative commit protocol 
to perform data and state synchronizatio
ns among replicas. Evaluation on a worki
ng system based on DrTM+R with 3&#45;way rep
lication using typical OLTP workloads li
ke TPC&#45;C and SmallBank shows that DrTM+B
 incurs only very small performance degr
adation during live reconfiguration. Bot
h the reconfiguration time and the downt
ime are also minimal.</title>
<path fill="none" stroke="#000000" d="M31349.7571,-958.636C31361.2163,-928.9785 31386.0137,-864.7999 31414.1103,-792.083"/>
<polygon fill="#000000" stroke="#000000" points="31417.3932,-793.2973 31417.7327,-782.7079 31410.8637,-790.7743 31417.3932,-793.2973"/>
</g>
<!-- HiKV: A Hybrid Index Key&#45;Value Store for
 DRAM&#45;NVM Memory Systems -->
<g id="node113" class="node">
<title>HiKV: A Hybrid Index Key&#45;Value Store for
 DRAM&#45;NVM Memory Systems</title>
<ellipse fill="none" stroke="#000000" cx="31943.022" cy="-461.0336" rx="183.6018" ry="25.4118"/>
<text text-anchor="middle" x="31943.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">HiKV: A Hybrid Index Key&#45;Value Store for</text>
<text text-anchor="middle" x="31943.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> DRAM&#45;NVM Memory Systems</text>
</g>
<!-- 28&#45;&gt;HiKV: A Hybrid Index Key&#45;Value Store for
 DRAM&#45;NVM Memory Systems -->
<g id="edge114" class="edge">
<title>28&#45;&gt;HiKV: A Hybrid Index Key&#45;Value Store for
 DRAM&#45;NVM Memory Systems</title>
<path fill="none" stroke="#000000" d="M32495.9792,-975.7004C32417.5011,-974.1228 32191.6914,-965.7982 32135.022,-922.0672 31994.8551,-813.9025 31956.1372,-584.9607 31946.2074,-496.7382"/>
<polygon fill="#000000" stroke="#000000" points="31949.6769,-496.266 31945.1342,-486.6945 31942.7166,-497.0098 31949.6769,-496.266"/>
</g>
<!-- Fei Xia, Institute of Computing Technolo
gy, Chinese Academy of Sciences; Univers
ity of Chinese Academy of Sciences; Deju
n Jiang, Jin Xiong, and Ninghui Sun, Ins
titute of Computing Technology, Chinese 
Academy of Sciences -->
<g id="node114" class="node">
<title>Fei Xia, Institute of Computing Technolo
gy, Chinese Academy of Sciences; Univers
ity of Chinese Academy of Sciences; Deju
n Jiang, Jin Xiong, and Ninghui Sun, Ins
titute of Computing Technology, Chinese 
Academy of Sciences</title>
<ellipse fill="none" stroke="#000000" cx="32326.022" cy="-461.0336" rx="181.8481" ry="65.1077"/>
<text text-anchor="middle" x="32326.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Fei Xia, Institute of Computing Technolo</text>
<text text-anchor="middle" x="32326.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gy, Chinese Academy of Sciences; Univers</text>
<text text-anchor="middle" x="32326.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ity of Chinese Academy of Sciences; Deju</text>
<text text-anchor="middle" x="32326.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n Jiang, Jin Xiong, and Ninghui Sun, Ins</text>
<text text-anchor="middle" x="32326.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">titute of Computing Technology, Chinese </text>
<text text-anchor="middle" x="32326.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Academy of Sciences</text>
</g>
<!-- 28&#45;&gt;Fei Xia, Institute of Computing Technolo
gy, Chinese Academy of Sciences; Univers
ity of Chinese Academy of Sciences; Deju
n Jiang, Jin Xiong, and Ninghui Sun, Ins
titute of Computing Technology, Chinese 
Academy of Sciences -->
<g id="edge115" class="edge">
<title>28&#45;&gt;Fei Xia, Institute of Computing Technolo
gy, Chinese Academy of Sciences; Univers
ity of Chinese Academy of Sciences; Deju
n Jiang, Jin Xiong, and Ninghui Sun, Ins
titute of Computing Technology, Chinese 
Academy of Sciences</title>
<path fill="none" stroke="#000000" d="M32516.2408,-958.3386C32490.9125,-892.1208 32400.9288,-656.8687 32354.3795,-535.171"/>
<polygon fill="#000000" stroke="#000000" points="32357.537,-533.6289 32350.6953,-525.5392 32350.9989,-536.1297 32357.537,-533.6289"/>
</g>
<!-- Hybrid memory systems consisting of DRAM
 and Non&#45;Volatile Memory are promising t
o persist data fast. The index design of
 existing key&#45;value stores for hybrid me
mory fails to utilize its specific perfo
rmance characteristics: fast writes in D
RAM, slow writes in NVM, and similar rea
ds in DRAM and NVM. This paper presents 
HiKV, a persistent key&#45;value store with 
the central idea of constructing a hybri
d index in hybrid memory. To support ric
h key&#45;value operations efficiently, HiKV
 exploits the distinct merits of hash in
dex and B+&#45;Tree index. HiKV builds and p
ersists the hash index in NVM to retain 
its inherent ability of fast index searc
hing. HiKV builds the B+&#45;Tree index in D
RAM to support range scan and avoids lon
g NVM writes for maintaining consistency
 of the two indexes. Furthermore, HiKV a
pplies differential concurrency schemes 
to hybrid index and adopts ordered&#45;write
 consistency to ensure crash consistency
. For single&#45;threaded performance, HiKV 
outperforms the state&#45;of&#45;the&#45;art NVM&#45;bas
ed key&#45;value stores by reducing latency 
up to 86.6%, and for multi&#45;threaded perf
ormance, HiKV increases the throughput b
y up to 6.4x under YCSB workloads. -->
<g id="node115" class="node">
<title>Hybrid memory systems consisting of DRAM
 and Non&#45;Volatile Memory are promising t
o persist data fast. The index design of
 existing key&#45;value stores for hybrid me
mory fails to utilize its specific perfo
rmance characteristics: fast writes in D
RAM, slow writes in NVM, and similar rea
ds in DRAM and NVM. This paper presents 
HiKV, a persistent key&#45;value store with 
the central idea of constructing a hybri
d index in hybrid memory. To support ric
h key&#45;value operations efficiently, HiKV
 exploits the distinct merits of hash in
dex and B+&#45;Tree index. HiKV builds and p
ersists the hash index in NVM to retain 
its inherent ability of fast index searc
hing. HiKV builds the B+&#45;Tree index in D
RAM to support range scan and avoids lon
g NVM writes for maintaining consistency
 of the two indexes. Furthermore, HiKV a
pplies differential concurrency schemes 
to hybrid index and adopts ordered&#45;write
 consistency to ensure crash consistency
. For single&#45;threaded performance, HiKV 
outperforms the state&#45;of&#45;the&#45;art NVM&#45;bas
ed key&#45;value stores by reducing latency 
up to 86.6%, and for multi&#45;threaded perf
ormance, HiKV increases the throughput b
y up to 6.4x under YCSB workloads.</title>
<ellipse fill="none" stroke="#000000" cx="32720.022" cy="-461.0336" rx="194.3482" ry="292.9846"/>
<text text-anchor="middle" x="32720.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Hybrid memory systems consisting of DRAM</text>
<text text-anchor="middle" x="32720.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and Non&#45;Volatile Memory are promising t</text>
<text text-anchor="middle" x="32720.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o persist data fast. The index design of</text>
<text text-anchor="middle" x="32720.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> existing key&#45;value stores for hybrid me</text>
<text text-anchor="middle" x="32720.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mory fails to utilize its specific perfo</text>
<text text-anchor="middle" x="32720.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rmance characteristics: fast writes in D</text>
<text text-anchor="middle" x="32720.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">RAM, slow writes in NVM, and similar rea</text>
<text text-anchor="middle" x="32720.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ds in DRAM and NVM. This paper presents </text>
<text text-anchor="middle" x="32720.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">HiKV, a persistent key&#45;value store with </text>
<text text-anchor="middle" x="32720.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the central idea of constructing a hybri</text>
<text text-anchor="middle" x="32720.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d index in hybrid memory. To support ric</text>
<text text-anchor="middle" x="32720.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h key&#45;value operations efficiently, HiKV</text>
<text text-anchor="middle" x="32720.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> exploits the distinct merits of hash in</text>
<text text-anchor="middle" x="32720.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">dex and B+&#45;Tree index. HiKV builds and p</text>
<text text-anchor="middle" x="32720.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ersists the hash index in NVM to retain </text>
<text text-anchor="middle" x="32720.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">its inherent ability of fast index searc</text>
<text text-anchor="middle" x="32720.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hing. HiKV builds the B+&#45;Tree index in D</text>
<text text-anchor="middle" x="32720.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">RAM to support range scan and avoids lon</text>
<text text-anchor="middle" x="32720.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g NVM writes for maintaining consistency</text>
<text text-anchor="middle" x="32720.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of the two indexes. Furthermore, HiKV a</text>
<text text-anchor="middle" x="32720.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pplies differential concurrency schemes </text>
<text text-anchor="middle" x="32720.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to hybrid index and adopts ordered&#45;write</text>
<text text-anchor="middle" x="32720.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> consistency to ensure crash consistency</text>
<text text-anchor="middle" x="32720.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. For single&#45;threaded performance, HiKV </text>
<text text-anchor="middle" x="32720.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">outperforms the state&#45;of&#45;the&#45;art NVM&#45;bas</text>
<text text-anchor="middle" x="32720.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed key&#45;value stores by reducing latency </text>
<text text-anchor="middle" x="32720.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">up to 86.6%, and for multi&#45;threaded perf</text>
<text text-anchor="middle" x="32720.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ormance, HiKV increases the throughput b</text>
<text text-anchor="middle" x="32720.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y up to 6.4x under YCSB workloads.</text>
</g>
<!-- 28&#45;&gt;Hybrid memory systems consisting of DRAM
 and Non&#45;Volatile Memory are promising t
o persist data fast. The index design of
 existing key&#45;value stores for hybrid me
mory fails to utilize its specific perfo
rmance characteristics: fast writes in D
RAM, slow writes in NVM, and similar rea
ds in DRAM and NVM. This paper presents 
HiKV, a persistent key&#45;value store with 
the central idea of constructing a hybri
d index in hybrid memory. To support ric
h key&#45;value operations efficiently, HiKV
 exploits the distinct merits of hash in
dex and B+&#45;Tree index. HiKV builds and p
ersists the hash index in NVM to retain 
its inherent ability of fast index searc
hing. HiKV builds the B+&#45;Tree index in D
RAM to support range scan and avoids lon
g NVM writes for maintaining consistency
 of the two indexes. Furthermore, HiKV a
pplies differential concurrency schemes 
to hybrid index and adopts ordered&#45;write
 consistency to ensure crash consistency
. For single&#45;threaded performance, HiKV 
outperforms the state&#45;of&#45;the&#45;art NVM&#45;bas
ed key&#45;value stores by reducing latency 
up to 86.6%, and for multi&#45;threaded perf
ormance, HiKV increases the throughput b
y up to 6.4x under YCSB workloads. -->
<g id="edge116" class="edge">
<title>28&#45;&gt;Hybrid memory systems consisting of DRAM
 and Non&#45;Volatile Memory are promising t
o persist data fast. The index design of
 existing key&#45;value stores for hybrid me
mory fails to utilize its specific perfo
rmance characteristics: fast writes in D
RAM, slow writes in NVM, and similar rea
ds in DRAM and NVM. This paper presents 
HiKV, a persistent key&#45;value store with 
the central idea of constructing a hybri
d index in hybrid memory. To support ric
h key&#45;value operations efficiently, HiKV
 exploits the distinct merits of hash in
dex and B+&#45;Tree index. HiKV builds and p
ersists the hash index in NVM to retain 
its inherent ability of fast index searc
hing. HiKV builds the B+&#45;Tree index in D
RAM to support range scan and avoids lon
g NVM writes for maintaining consistency
 of the two indexes. Furthermore, HiKV a
pplies differential concurrency schemes 
to hybrid index and adopts ordered&#45;write
 consistency to ensure crash consistency
. For single&#45;threaded performance, HiKV 
outperforms the state&#45;of&#45;the&#45;art NVM&#45;bas
ed key&#45;value stores by reducing latency 
up to 86.6%, and for multi&#45;threaded perf
ormance, HiKV increases the throughput b
y up to 6.4x under YCSB workloads.</title>
<path fill="none" stroke="#000000" d="M32529.8032,-958.3386C32544.665,-919.484 32581.7877,-822.4312 32619.3343,-724.2698"/>
<polygon fill="#000000" stroke="#000000" points="32622.6649,-725.3592 32622.9685,-714.7688 32616.1268,-722.8584 32622.6649,-725.3592"/>
</g>
<!-- TRIAD: Creating Synergies Between Memory
, Disk and Log in Log Structured Key&#45;Val
ue Stores -->
<g id="node117" class="node">
<title>TRIAD: Creating Synergies Between Memory
, Disk and Log in Log Structured Key&#45;Val
ue Stores</title>
<ellipse fill="none" stroke="#000000" cx="33128.022" cy="-461.0336" rx="195.78" ry="35.2113"/>
<text text-anchor="middle" x="33128.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">TRIAD: Creating Synergies Between Memory</text>
<text text-anchor="middle" x="33128.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, Disk and Log in Log Structured Key&#45;Val</text>
<text text-anchor="middle" x="33128.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ue Stores</text>
</g>
<!-- 29&#45;&gt;TRIAD: Creating Synergies Between Memory
, Disk and Log in Log Structured Key&#45;Val
ue Stores -->
<g id="edge118" class="edge">
<title>29&#45;&gt;TRIAD: Creating Synergies Between Memory
, Disk and Log in Log Structured Key&#45;Val
ue Stores</title>
<path fill="none" stroke="#000000" d="M33709.1818,-973.9879C33623.9435,-967.1776 33363.2153,-944.6792 33333.022,-922.0672 33194.8195,-818.5668 33147.9057,-601.1282 33133.6353,-506.5678"/>
<polygon fill="#000000" stroke="#000000" points="33137.0686,-505.8555 33132.1649,-496.4638 33130.1415,-506.8636 33137.0686,-505.8555"/>
</g>
<!-- Oana Balmau, Diego Didona, Rachid Guerra
oui, and Willy Zwaenepoel, EPFL; Huapeng
 Yuan, Aashray Arora, Karan Gupta, and P
avan Konka, Nutanix -->
<g id="node118" class="node">
<title>Oana Balmau, Diego Didona, Rachid Guerra
oui, and Willy Zwaenepoel, EPFL; Huapeng
 Yuan, Aashray Arora, Karan Gupta, and P
avan Konka, Nutanix</title>
<ellipse fill="none" stroke="#000000" cx="33531.022" cy="-461.0336" rx="189.3423" ry="45.011"/>
<text text-anchor="middle" x="33531.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Oana Balmau, Diego Didona, Rachid Guerra</text>
<text text-anchor="middle" x="33531.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oui, and Willy Zwaenepoel, EPFL; Huapeng</text>
<text text-anchor="middle" x="33531.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Yuan, Aashray Arora, Karan Gupta, and P</text>
<text text-anchor="middle" x="33531.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">avan Konka, Nutanix</text>
</g>
<!-- 29&#45;&gt;Oana Balmau, Diego Didona, Rachid Guerra
oui, and Willy Zwaenepoel, EPFL; Huapeng
 Yuan, Aashray Arora, Karan Gupta, and P
avan Konka, Nutanix -->
<g id="edge119" class="edge">
<title>29&#45;&gt;Oana Balmau, Diego Didona, Rachid Guerra
oui, and Willy Zwaenepoel, EPFL; Huapeng
 Yuan, Aashray Arora, Karan Gupta, and P
avan Konka, Nutanix</title>
<path fill="none" stroke="#000000" d="M33729.0838,-958.636C33701.4242,-889.145 33598.3267,-630.1273 33552.8314,-515.8268"/>
<polygon fill="#000000" stroke="#000000" points="33555.9536,-514.2064 33549.0035,-506.2098 33549.4499,-516.7952 33555.9536,-514.2064"/>
</g>
<!-- We present TRIAD, a new persistent key&#45;v
alue (KV) store based on Log&#45;Structured 
Merge (LSM) trees. TRIAD improves LSM KV
 throughput by reducing the write amplif
ication arising in the maintenance of th
e LSM tree structure. Although occurring
 in the background, write amplification 
consumes significant CPU and I/O resourc
es. By reducing write amplification, TRI
AD allows these resources to be used ins
tead to improve user&#45;facing throughput.T
RIAD uses a holistic combination of thre
e techniques. At the LSM memory componen
t level, TRIAD leverages skew in data po
pularity to avoid frequent I/O operation
s on the most popular keys. At the stora
ge level, TRIAD amortizes management cos
ts by deferring and batching multiple I/
O operations. At the commit log level, T
RIAD avoids duplicate writes to storage.
We implement TRIAD as an extension of Fa
cebook’s RocksDB and evaluate it with 
production and synthetic workloads. With
 these workloads, TRIAD yields up to 193
% improvement in throughput. It reduces 
write amplification by a factor of up to
 4x, and decreases the amount of I/O by 
an order of magnitude. -->
<g id="node119" class="node">
<title>We present TRIAD, a new persistent key&#45;v
alue (KV) store based on Log&#45;Structured 
Merge (LSM) trees. TRIAD improves LSM KV
 throughput by reducing the write amplif
ication arising in the maintenance of th
e LSM tree structure. Although occurring
 in the background, write amplification 
consumes significant CPU and I/O resourc
es. By reducing write amplification, TRI
AD allows these resources to be used ins
tead to improve user&#45;facing throughput.T
RIAD uses a holistic combination of thre
e techniques. At the LSM memory componen
t level, TRIAD leverages skew in data po
pularity to avoid frequent I/O operation
s on the most popular keys. At the stora
ge level, TRIAD amortizes management cos
ts by deferring and batching multiple I/
O operations. At the commit log level, T
RIAD avoids duplicate writes to storage.
We implement TRIAD as an extension of Fa
cebook’s RocksDB and evaluate it with 
production and synthetic workloads. With
 these workloads, TRIAD yields up to 193
% improvement in throughput. It reduces 
write amplification by a factor of up to
 4x, and decreases the amount of I/O by 
an order of magnitude.</title>
<ellipse fill="none" stroke="#000000" cx="33940.022" cy="-461.0336" rx="201.5039" ry="282.6855"/>
<text text-anchor="middle" x="33940.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">We present TRIAD, a new persistent key&#45;v</text>
<text text-anchor="middle" x="33940.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">alue (KV) store based on Log&#45;Structured </text>
<text text-anchor="middle" x="33940.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Merge (LSM) trees. TRIAD improves LSM KV</text>
<text text-anchor="middle" x="33940.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> throughput by reducing the write amplif</text>
<text text-anchor="middle" x="33940.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ication arising in the maintenance of th</text>
<text text-anchor="middle" x="33940.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e LSM tree structure. Although occurring</text>
<text text-anchor="middle" x="33940.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in the background, write amplification </text>
<text text-anchor="middle" x="33940.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">consumes significant CPU and I/O resourc</text>
<text text-anchor="middle" x="33940.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es. By reducing write amplification, TRI</text>
<text text-anchor="middle" x="33940.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">AD allows these resources to be used ins</text>
<text text-anchor="middle" x="33940.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tead to improve user&#45;facing throughput.T</text>
<text text-anchor="middle" x="33940.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">RIAD uses a holistic combination of thre</text>
<text text-anchor="middle" x="33940.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e techniques. At the LSM memory componen</text>
<text text-anchor="middle" x="33940.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t level, TRIAD leverages skew in data po</text>
<text text-anchor="middle" x="33940.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pularity to avoid frequent I/O operation</text>
<text text-anchor="middle" x="33940.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s on the most popular keys. At the stora</text>
<text text-anchor="middle" x="33940.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ge level, TRIAD amortizes management cos</text>
<text text-anchor="middle" x="33940.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ts by deferring and batching multiple I/</text>
<text text-anchor="middle" x="33940.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">O operations. At the commit log level, T</text>
<text text-anchor="middle" x="33940.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">RIAD avoids duplicate writes to storage.</text>
<text text-anchor="middle" x="33940.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">We implement TRIAD as an extension of Fa</text>
<text text-anchor="middle" x="33940.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cebook’s RocksDB and evaluate it with </text>
<text text-anchor="middle" x="33940.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">production and synthetic workloads. With</text>
<text text-anchor="middle" x="33940.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> these workloads, TRIAD yields up to 193</text>
<text text-anchor="middle" x="33940.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">% improvement in throughput. It reduces </text>
<text text-anchor="middle" x="33940.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">write amplification by a factor of up to</text>
<text text-anchor="middle" x="33940.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> 4x, and decreases the amount of I/O by </text>
<text text-anchor="middle" x="33940.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">an order of magnitude.</text>
</g>
<!-- 29&#45;&gt;We present TRIAD, a new persistent key&#45;v
alue (KV) store based on Log&#45;Structured 
Merge (LSM) trees. TRIAD improves LSM KV
 throughput by reducing the write amplif
ication arising in the maintenance of th
e LSM tree structure. Although occurring
 in the background, write amplification 
consumes significant CPU and I/O resourc
es. By reducing write amplification, TRI
AD allows these resources to be used ins
tead to improve user&#45;facing throughput.T
RIAD uses a holistic combination of thre
e techniques. At the LSM memory componen
t level, TRIAD leverages skew in data po
pularity to avoid frequent I/O operation
s on the most popular keys. At the stora
ge level, TRIAD amortizes management cos
ts by deferring and batching multiple I/
O operations. At the commit log level, T
RIAD avoids duplicate writes to storage.
We implement TRIAD as an extension of Fa
cebook’s RocksDB and evaluate it with 
production and synthetic workloads. With
 these workloads, TRIAD yields up to 193
% improvement in throughput. It reduces 
write amplification by a factor of up to
 4x, and decreases the amount of I/O by 
an order of magnitude. -->
<g id="edge120" class="edge">
<title>29&#45;&gt;We present TRIAD, a new persistent key&#45;v
alue (KV) store based on Log&#45;Structured 
Merge (LSM) trees. TRIAD improves LSM KV
 throughput by reducing the write amplif
ication arising in the maintenance of th
e LSM tree structure. Although occurring
 in the background, write amplification 
consumes significant CPU and I/O resourc
es. By reducing write amplification, TRI
AD allows these resources to be used ins
tead to improve user&#45;facing throughput.T
RIAD uses a holistic combination of thre
e techniques. At the LSM memory componen
t level, TRIAD leverages skew in data po
pularity to avoid frequent I/O operation
s on the most popular keys. At the stora
ge level, TRIAD amortizes management cos
ts by deferring and batching multiple I/
O operations. At the commit log level, T
RIAD avoids duplicate writes to storage.
We implement TRIAD as an extension of Fa
cebook’s RocksDB and evaluate it with 
production and synthetic workloads. With
 these workloads, TRIAD yields up to 193
% improvement in throughput. It reduces 
write amplification by a factor of up to
 4x, and decreases the amount of I/O by 
an order of magnitude.</title>
<path fill="none" stroke="#000000" d="M33742.9263,-958.636C33758.5677,-919.1467 33798.451,-818.4542 33838.2816,-717.895"/>
<polygon fill="#000000" stroke="#000000" points="33841.5825,-719.0655 33842.0111,-708.4793 33835.0744,-716.4877 33841.5825,-719.0655"/>
</g>
<!-- Visualizing Performance with Flame Graph
sBrendan Gregg, Netflix -->
<g id="node121" class="node">
<title>Visualizing Performance with Flame Graph
sBrendan Gregg, Netflix</title>
<ellipse fill="none" stroke="#000000" cx="34731.022" cy="-461.0336" rx="183.8337" ry="25.4118"/>
<text text-anchor="middle" x="34731.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Visualizing Performance with Flame Graph</text>
<text text-anchor="middle" x="34731.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sBrendan Gregg, Netflix</text>
</g>
<!-- 30&#45;&gt;Visualizing Performance with Flame Graph
sBrendan Gregg, Netflix -->
<g id="edge122" class="edge">
<title>30&#45;&gt;Visualizing Performance with Flame Graph
sBrendan Gregg, Netflix</title>
<path fill="none" stroke="#000000" d="M34920.2752,-958.3386C34891.97,-883.9602 34782.5052,-596.3173 34744.2832,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="34747.5354,-494.5855 34740.7074,-486.4843 34740.9931,-497.0752 34747.5354,-494.5855"/>
</g>
<!-- Brendan Gregg, Senior Performance Archit
ect, NetflixBrendan Gregg is an industry
 expert in computing performance and clo
ud computing. He is a senior performance
 architect at Netflix, where he does per
formance design, evaluation, analysis, a
nd tuning. He is the author of multiple 
technical books including Systems Perfor
mance published by Prentice Hall, and re
ceived the USENIX LISA Award for Outstan
ding Achievement in System Administratio
n. He has also worked as a kernel engine
er, and as a performance lead on storage
 and cloud products. Brendan has created
 performance analysis tools included in 
multiple operating systems, and visualiz
ations and methodologies for performance
 analysis, including flame graphs. -->
<g id="node122" class="node">
<title>Brendan Gregg, Senior Performance Archit
ect, NetflixBrendan Gregg is an industry
 expert in computing performance and clo
ud computing. He is a senior performance
 architect at Netflix, where he does per
formance design, evaluation, analysis, a
nd tuning. He is the author of multiple 
technical books including Systems Perfor
mance published by Prentice Hall, and re
ceived the USENIX LISA Award for Outstan
ding Achievement in System Administratio
n. He has also worked as a kernel engine
er, and as a performance lead on storage
 and cloud products. Brendan has created
 performance analysis tools included in 
multiple operating systems, and visualiz
ations and methodologies for performance
 analysis, including flame graphs.</title>
<ellipse fill="none" stroke="#000000" cx="35123.022" cy="-461.0336" rx="189.8381" ry="183.6957"/>
<text text-anchor="middle" x="35123.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Brendan Gregg, Senior Performance Archit</text>
<text text-anchor="middle" x="35123.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ect, NetflixBrendan Gregg is an industry</text>
<text text-anchor="middle" x="35123.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> expert in computing performance and clo</text>
<text text-anchor="middle" x="35123.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ud computing. He is a senior performance</text>
<text text-anchor="middle" x="35123.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> architect at Netflix, where he does per</text>
<text text-anchor="middle" x="35123.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">formance design, evaluation, analysis, a</text>
<text text-anchor="middle" x="35123.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd tuning. He is the author of multiple </text>
<text text-anchor="middle" x="35123.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">technical books including Systems Perfor</text>
<text text-anchor="middle" x="35123.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mance published by Prentice Hall, and re</text>
<text text-anchor="middle" x="35123.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ceived the USENIX LISA Award for Outstan</text>
<text text-anchor="middle" x="35123.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ding Achievement in System Administratio</text>
<text text-anchor="middle" x="35123.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n. He has also worked as a kernel engine</text>
<text text-anchor="middle" x="35123.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er, and as a performance lead on storage</text>
<text text-anchor="middle" x="35123.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and cloud products. Brendan has created</text>
<text text-anchor="middle" x="35123.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> performance analysis tools included in </text>
<text text-anchor="middle" x="35123.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">multiple operating systems, and visualiz</text>
<text text-anchor="middle" x="35123.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ations and methodologies for performance</text>
<text text-anchor="middle" x="35123.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> analysis, including flame graphs.</text>
</g>
<!-- 30&#45;&gt;Brendan Gregg, Senior Performance Archit
ect, NetflixBrendan Gregg is an industry
 expert in computing performance and clo
ud computing. He is a senior performance
 architect at Netflix, where he does per
formance design, evaluation, analysis, a
nd tuning. He is the author of multiple 
technical books including Systems Perfor
mance published by Prentice Hall, and re
ceived the USENIX LISA Award for Outstan
ding Achievement in System Administratio
n. He has also worked as a kernel engine
er, and as a performance lead on storage
 and cloud products. Brendan has created
 performance analysis tools included in 
multiple operating systems, and visualiz
ations and methodologies for performance
 analysis, including flame graphs. -->
<g id="edge123" class="edge">
<title>30&#45;&gt;Brendan Gregg, Senior Performance Archit
ect, NetflixBrendan Gregg is an industry
 expert in computing performance and clo
ud computing. He is a senior performance
 architect at Netflix, where he does per
formance design, evaluation, analysis, a
nd tuning. He is the author of multiple 
technical books including Systems Perfor
mance published by Prentice Hall, and re
ceived the USENIX LISA Award for Outstan
ding Achievement in System Administratio
n. He has also worked as a kernel engine
er, and as a performance lead on storage
 and cloud products. Brendan has created
 performance analysis tools included in 
multiple operating systems, and visualiz
ations and methodologies for performance
 analysis, including flame graphs.</title>
<path fill="none" stroke="#000000" d="M34933.7688,-958.3386C34952.6793,-908.647 35007.8151,-763.7653 35053.7298,-643.1144"/>
<polygon fill="#000000" stroke="#000000" points="35057.013,-644.3272 35057.2987,-633.7362 35050.4708,-641.8374 35057.013,-644.3272"/>
</g>
<!-- Flame graphs are a simple stack trace vi
sualization that helps answer an everyda
y problem: how is software consuming res
ources, especially CPUs, and how did thi
s change since the last software version
? Flame graphs have been adopted by many
 languages, products, and companies, inc
luding Netflix, and have become a standa
rd tool for performance analysis. They w
ere published in The Flame Graph article
 in the June 2016 issue of Communication
s of the ACM, by their creator, Brendan 
Gregg.This talk describes the background
 for this work, and the challenges encou
ntered when profiling stack traces and r
esolving symbols for different languages
, including for just&#45;in&#45;time compiler ru
ntimes. Instructions will be included ge
nerating mixed&#45;mode flame graphs on Linu
x, and examples from our use at Netflix 
with Java. Advanced flame graph types wi
ll be described, including differential,
 off&#45;CPU, chain graphs, memory, and TCP 
events. Finally, future work and unsolve
d problems in this area will be discusse
d. -->
<g id="node123" class="node">
<title>Flame graphs are a simple stack trace vi
sualization that helps answer an everyda
y problem: how is software consuming res
ources, especially CPUs, and how did thi
s change since the last software version
? Flame graphs have been adopted by many
 languages, products, and companies, inc
luding Netflix, and have become a standa
rd tool for performance analysis. They w
ere published in The Flame Graph article
 in the June 2016 issue of Communication
s of the ACM, by their creator, Brendan 
Gregg.This talk describes the background
 for this work, and the challenges encou
ntered when profiling stack traces and r
esolving symbols for different languages
, including for just&#45;in&#45;time compiler ru
ntimes. Instructions will be included ge
nerating mixed&#45;mode flame graphs on Linu
x, and examples from our use at Netflix 
with Java. Advanced flame graph types wi
ll be described, including differential,
 off&#45;CPU, chain graphs, memory, and TCP 
events. Finally, future work and unsolve
d problems in this area will be discusse
d.</title>
<ellipse fill="none" stroke="#000000" cx="34344.022" cy="-461.0336" rx="184.5451" ry="263.0875"/>
<text text-anchor="middle" x="34344.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Flame graphs are a simple stack trace vi</text>
<text text-anchor="middle" x="34344.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sualization that helps answer an everyda</text>
<text text-anchor="middle" x="34344.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y problem: how is software consuming res</text>
<text text-anchor="middle" x="34344.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ources, especially CPUs, and how did thi</text>
<text text-anchor="middle" x="34344.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s change since the last software version</text>
<text text-anchor="middle" x="34344.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">? Flame graphs have been adopted by many</text>
<text text-anchor="middle" x="34344.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> languages, products, and companies, inc</text>
<text text-anchor="middle" x="34344.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">luding Netflix, and have become a standa</text>
<text text-anchor="middle" x="34344.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rd tool for performance analysis. They w</text>
<text text-anchor="middle" x="34344.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ere published in The Flame Graph article</text>
<text text-anchor="middle" x="34344.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in the June 2016 issue of Communication</text>
<text text-anchor="middle" x="34344.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s of the ACM, by their creator, Brendan </text>
<text text-anchor="middle" x="34344.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Gregg.This talk describes the background</text>
<text text-anchor="middle" x="34344.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> for this work, and the challenges encou</text>
<text text-anchor="middle" x="34344.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntered when profiling stack traces and r</text>
<text text-anchor="middle" x="34344.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">esolving symbols for different languages</text>
<text text-anchor="middle" x="34344.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, including for just&#45;in&#45;time compiler ru</text>
<text text-anchor="middle" x="34344.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntimes. Instructions will be included ge</text>
<text text-anchor="middle" x="34344.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nerating mixed&#45;mode flame graphs on Linu</text>
<text text-anchor="middle" x="34344.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">x, and examples from our use at Netflix </text>
<text text-anchor="middle" x="34344.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">with Java. Advanced flame graph types wi</text>
<text text-anchor="middle" x="34344.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ll be described, including differential,</text>
<text text-anchor="middle" x="34344.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> off&#45;CPU, chain graphs, memory, and TCP </text>
<text text-anchor="middle" x="34344.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">events. Finally, future work and unsolve</text>
<text text-anchor="middle" x="34344.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d problems in this area will be discusse</text>
<text text-anchor="middle" x="34344.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d.</text>
</g>
<!-- 30&#45;&gt;Flame graphs are a simple stack trace vi
sualization that helps answer an everyda
y problem: how is software consuming res
ources, especially CPUs, and how did thi
s change since the last software version
? Flame graphs have been adopted by many
 languages, products, and companies, inc
luding Netflix, and have become a standa
rd tool for performance analysis. They w
ere published in The Flame Graph article
 in the June 2016 issue of Communication
s of the ACM, by their creator, Brendan 
Gregg.This talk describes the background
 for this work, and the challenges encou
ntered when profiling stack traces and r
esolving symbols for different languages
, including for just&#45;in&#45;time compiler ru
ntimes. Instructions will be included ge
nerating mixed&#45;mode flame graphs on Linu
x, and examples from our use at Netflix 
with Java. Advanced flame graph types wi
ll be described, including differential,
 off&#45;CPU, chain graphs, memory, and TCP 
events. Finally, future work and unsolve
d problems in this area will be discusse
d. -->
<g id="edge124" class="edge">
<title>30&#45;&gt;Flame graphs are a simple stack trace vi
sualization that helps answer an everyda
y problem: how is software consuming res
ources, especially CPUs, and how did thi
s change since the last software version
? Flame graphs have been adopted by many
 languages, products, and companies, inc
luding Netflix, and have become a standa
rd tool for performance analysis. They w
ere published in The Flame Graph article
 in the June 2016 issue of Communication
s of the ACM, by their creator, Brendan 
Gregg.This talk describes the background
 for this work, and the challenges encou
ntered when profiling stack traces and r
esolving symbols for different languages
, including for just&#45;in&#45;time compiler ru
ntimes. Instructions will be included ge
nerating mixed&#45;mode flame graphs on Linu
x, and examples from our use at Netflix 
with Java. Advanced flame graph types wi
ll be described, including differential,
 off&#45;CPU, chain graphs, memory, and TCP 
events. Finally, future work and unsolve
d problems in this area will be discusse
d.</title>
<path fill="none" stroke="#000000" d="M34899.9176,-975.7C34821.2596,-974.1212 34594.9232,-965.7939 34538.022,-922.0672 34473.5589,-872.5296 34430.2992,-797.5652 34401.3557,-722.3968"/>
<polygon fill="#000000" stroke="#000000" points="34404.5227,-720.8753 34397.72,-712.7528 34397.9727,-723.3446 34404.5227,-720.8753"/>
</g>
<!-- 31&#45;&gt; -->
<g id="edge128" class="edge">
<title>31&#45;&gt;</title>
<path fill="none" stroke="#000000" d="M3756.952,-975.1262C3596.8618,-969.5013 2780.3775,-939.967 2762.022,-922.0672 2700.5059,-862.0785 2716.6925,-580.0929 2723.6495,-489.2849"/>
<polygon fill="#000000" stroke="#000000" points="2727.1488,-489.4306 2724.4463,-479.1862 2720.1705,-488.8799 2727.1488,-489.4306"/>
</g>
<!-- Brendan Gregg, Netflix -->
<g id="node125" class="node">
<title>Brendan Gregg, Netflix</title>
<ellipse fill="none" stroke="#000000" cx="4030.022" cy="-461.0336" rx="93.2284" ry="18"/>
<text text-anchor="middle" x="4030.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Brendan Gregg, Netflix</text>
</g>
<!-- 31&#45;&gt;Brendan Gregg, Netflix -->
<g id="edge126" class="edge">
<title>31&#45;&gt;Brendan Gregg, Netflix</title>
<path fill="none" stroke="#000000" d="M3811.0109,-973.496C3843.4665,-968.9202 3897.2787,-956.3397 3927.022,-922.0672 4039.2006,-792.8066 4036.9334,-567.9249 4032.2633,-489.2126"/>
<polygon fill="#000000" stroke="#000000" points="4035.7471,-488.8507 4031.6,-479.1012 4028.7621,-489.3089 4035.7471,-488.8507"/>
</g>
<!-- Brendan Gregg is an industry expert in c
omputing performance and cloud computing
. He is a senior performance architect a
t Netflix, where he does performance des
ign, evaluation, analysis, and tuning. H
e is the author of multiple technical bo
oks including Systems Performance publis
hed by Prentice Hall, and received the U
SENIX LISA Award for Outstanding Achieve
ment in System Administration. He has al
so worked as a kernel engineer, and as a
 performance lead on storage and cloud p
roducts. Brendan has created performance
 analysis tools included in multiple ope
rating systems, and visualizations and m
ethodologies for performance analysis, i
ncluding flame graphs. -->
<g id="node126" class="node">
<title>Brendan Gregg is an industry expert in c
omputing performance and cloud computing
. He is a senior performance architect a
t Netflix, where he does performance des
ign, evaluation, analysis, and tuning. H
e is the author of multiple technical bo
oks including Systems Performance publis
hed by Prentice Hall, and received the U
SENIX LISA Award for Outstanding Achieve
ment in System Administration. He has al
so worked as a kernel engineer, and as a
 performance lead on storage and cloud p
roducts. Brendan has created performance
 analysis tools included in multiple ope
rating systems, and visualizations and m
ethodologies for performance analysis, i
ncluding flame graphs.</title>
<ellipse fill="none" stroke="#000000" cx="3726.022" cy="-461.0336" rx="192.3168" ry="173.8966"/>
<text text-anchor="middle" x="3726.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Brendan Gregg is an industry expert in c</text>
<text text-anchor="middle" x="3726.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">omputing performance and cloud computing</text>
<text text-anchor="middle" x="3726.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. He is a senior performance architect a</text>
<text text-anchor="middle" x="3726.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t Netflix, where he does performance des</text>
<text text-anchor="middle" x="3726.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ign, evaluation, analysis, and tuning. H</text>
<text text-anchor="middle" x="3726.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e is the author of multiple technical bo</text>
<text text-anchor="middle" x="3726.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oks including Systems Performance publis</text>
<text text-anchor="middle" x="3726.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hed by Prentice Hall, and received the U</text>
<text text-anchor="middle" x="3726.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SENIX LISA Award for Outstanding Achieve</text>
<text text-anchor="middle" x="3726.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ment in System Administration. He has al</text>
<text text-anchor="middle" x="3726.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">so worked as a kernel engineer, and as a</text>
<text text-anchor="middle" x="3726.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> performance lead on storage and cloud p</text>
<text text-anchor="middle" x="3726.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">roducts. Brendan has created performance</text>
<text text-anchor="middle" x="3726.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> analysis tools included in multiple ope</text>
<text text-anchor="middle" x="3726.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rating systems, and visualizations and m</text>
<text text-anchor="middle" x="3726.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ethodologies for performance analysis, i</text>
<text text-anchor="middle" x="3726.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ncluding flame graphs.</text>
</g>
<!-- 31&#45;&gt;Brendan Gregg is an industry expert in c
omputing performance and cloud computing
. He is a senior performance architect a
t Netflix, where he does performance des
ign, evaluation, analysis, and tuning. H
e is the author of multiple technical bo
oks including Systems Performance publis
hed by Prentice Hall, and received the U
SENIX LISA Award for Outstanding Achieve
ment in System Administration. He has al
so worked as a kernel engineer, and as a
 performance lead on storage and cloud p
roducts. Brendan has created performance
 analysis tools included in multiple ope
rating systems, and visualizations and m
ethodologies for performance analysis, i
ncluding flame graphs. -->
<g id="edge127" class="edge">
<title>31&#45;&gt;Brendan Gregg is an industry expert in c
omputing performance and cloud computing
. He is a senior performance architect a
t Netflix, where he does performance des
ign, evaluation, analysis, and tuning. H
e is the author of multiple technical bo
oks including Systems Performance publis
hed by Prentice Hall, and received the U
SENIX LISA Award for Outstanding Achieve
ment in System Administration. He has al
so worked as a kernel engineer, and as a
 performance lead on storage and cloud p
roducts. Brendan has created performance
 analysis tools included in multiple ope
rating systems, and visualizations and m
ethodologies for performance analysis, i
ncluding flame graphs.</title>
<path fill="none" stroke="#000000" d="M3781.9917,-958.0389C3776.385,-908.2516 3760.2069,-764.5918 3746.6774,-644.4516"/>
<polygon fill="#000000" stroke="#000000" points="3750.1401,-643.9232 3745.543,-634.3777 3743.1841,-644.7066 3750.1401,-643.9232"/>
</g>
<!-- 32&#45;&gt;Brendan Gregg, Senior Performance Archit
ect, NetflixBrendan Gregg is an industry
 expert in computing performance and clo
ud computing. He is a senior performance
 architect at Netflix, where he does per
formance design, evaluation, analysis, a
nd tuning. He is the author of multiple 
technical books including Systems Perfor
mance published by Prentice Hall, and re
ceived the USENIX LISA Award for Outstan
ding Achievement in System Administratio
n. He has also worked as a kernel engine
er, and as a performance lead on storage
 and cloud products. Brendan has created
 performance analysis tools included in 
multiple operating systems, and visualiz
ations and methodologies for performance
 analysis, including flame graphs. -->
<g id="edge131" class="edge">
<title>32&#45;&gt;Brendan Gregg, Senior Performance Archit
ect, NetflixBrendan Gregg is an industry
 expert in computing performance and clo
ud computing. He is a senior performance
 architect at Netflix, where he does per
formance design, evaluation, analysis, a
nd tuning. He is the author of multiple 
technical books including Systems Perfor
mance published by Prentice Hall, and re
ceived the USENIX LISA Award for Outstan
ding Achievement in System Administratio
n. He has also worked as a kernel engine
er, and as a performance lead on storage
 and cloud products. Brendan has created
 performance analysis tools included in 
multiple operating systems, and visualiz
ations and methodologies for performance
 analysis, including flame graphs.</title>
<path fill="none" stroke="#000000" d="M35692.2059,-973.9589C35607.6807,-967.1046 35350.6511,-944.5914 35321.022,-922.0672 35235.6244,-857.1476 35186.5691,-748.0035 35158.6528,-652.2045"/>
<polygon fill="#000000" stroke="#000000" points="35161.9602,-651.0398 35155.8507,-642.3838 35155.2288,-652.9604 35161.9602,-651.0398"/>
</g>
<!-- Performance Superpowers with Enhanced BP
FBrendan Gregg, Netflix -->
<g id="node128" class="node">
<title>Performance Superpowers with Enhanced BP
FBrendan Gregg, Netflix</title>
<ellipse fill="none" stroke="#000000" cx="35918.022" cy="-461.0336" rx="192.4136" ry="25.4118"/>
<text text-anchor="middle" x="35918.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Performance Superpowers with Enhanced BP</text>
<text text-anchor="middle" x="35918.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">FBrendan Gregg, Netflix</text>
</g>
<!-- 32&#45;&gt;Performance Superpowers with Enhanced BP
FBrendan Gregg, Netflix -->
<g id="edge130" class="edge">
<title>32&#45;&gt;Performance Superpowers with Enhanced BP
FBrendan Gregg, Netflix</title>
<path fill="none" stroke="#000000" d="M35725.7571,-958.636C35754.3062,-884.7479 35865.6456,-596.5894 35904.53,-495.9524"/>
<polygon fill="#000000" stroke="#000000" points="35907.8283,-497.1269 35908.1678,-486.5375 35901.2988,-494.6039 35907.8283,-497.1269"/>
</g>
<!-- The Berkeley Packet Filter (BPF) in Linu
x has been enhanced in very recent versi
ons to do much more than just filter pac
kets, and has become a hot area of opera
ting systems innovation, with much more 
yet to be discovered. BPF is a sandboxed
 virtual machine that runs user&#45;level de
fined programs in kernel context, and is
 part of many kernels. The Linux enhance
ments allow it to run custom programs on
 other events, including kernel&#45; and use
r&#45;level dynamic tracing (kprobes and upr
obes), static tracing (tracepoints), and
 hardware events. This is finding uses f
or the generation of new performance ana
lysis tools, network acceleration techno
logies, and security intrusion detection
 systems.This talk will explain the BPF 
enhancements, then discuss the new perfo
rmance observability tools that are in u
se and being created, especially from th
e BPF compiler collection (bcc) open sou
rce project. These tools provide new ins
ights for file system and storage perfor
mance, CPU scheduler performance, TCP pe
rformance, and much more. This is a majo
r turning point for Linux systems engine
ering, as custom advanced performance in
strumentation can be used safely in prod
uction environments, powering a new gene
ration of tools and visualizations.Becau
se these BPF enhancements are only in ve
ry recent Linux (such as Linux 4.9), mos
t companies are not yet running new enou
gh kernels to be exploring BPF yet. This
 will change in the next year or two, as
 companies including Netflix upgrade the
ir kernels. This talk will give you a he
ad start on this growing technology, and
 also discuss areas of future work and u
nsolved problems. -->
<g id="node129" class="node">
<title>The Berkeley Packet Filter (BPF) in Linu
x has been enhanced in very recent versi
ons to do much more than just filter pac
kets, and has become a hot area of opera
ting systems innovation, with much more 
yet to be discovered. BPF is a sandboxed
 virtual machine that runs user&#45;level de
fined programs in kernel context, and is
 part of many kernels. The Linux enhance
ments allow it to run custom programs on
 other events, including kernel&#45; and use
r&#45;level dynamic tracing (kprobes and upr
obes), static tracing (tracepoints), and
 hardware events. This is finding uses f
or the generation of new performance ana
lysis tools, network acceleration techno
logies, and security intrusion detection
 systems.This talk will explain the BPF 
enhancements, then discuss the new perfo
rmance observability tools that are in u
se and being created, especially from th
e BPF compiler collection (bcc) open sou
rce project. These tools provide new ins
ights for file system and storage perfor
mance, CPU scheduler performance, TCP pe
rformance, and much more. This is a majo
r turning point for Linux systems engine
ering, as custom advanced performance in
strumentation can be used safely in prod
uction environments, powering a new gene
ration of tools and visualizations.Becau
se these BPF enhancements are only in ve
ry recent Linux (such as Linux 4.9), mos
t companies are not yet running new enou
gh kernels to be exploring BPF yet. This
 will change in the next year or two, as
 companies including Netflix upgrade the
ir kernels. This talk will give you a he
ad start on this growing technology, and
 also discuss areas of future work and u
nsolved problems.</title>
<ellipse fill="none" stroke="#000000" cx="35519.022" cy="-461.0336" rx="188.7692" ry="411.5723"/>
<text text-anchor="middle" x="35519.022" y="-736.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The Berkeley Packet Filter (BPF) in Linu</text>
<text text-anchor="middle" x="35519.022" y="-722.8336" font-family="Times,serif" font-size="14.00" fill="#000000">x has been enhanced in very recent versi</text>
<text text-anchor="middle" x="35519.022" y="-708.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ons to do much more than just filter pac</text>
<text text-anchor="middle" x="35519.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000">kets, and has become a hot area of opera</text>
<text text-anchor="middle" x="35519.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ting systems innovation, with much more </text>
<text text-anchor="middle" x="35519.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">yet to be discovered. BPF is a sandboxed</text>
<text text-anchor="middle" x="35519.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> virtual machine that runs user&#45;level de</text>
<text text-anchor="middle" x="35519.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">fined programs in kernel context, and is</text>
<text text-anchor="middle" x="35519.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> part of many kernels. The Linux enhance</text>
<text text-anchor="middle" x="35519.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ments allow it to run custom programs on</text>
<text text-anchor="middle" x="35519.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> other events, including kernel&#45; and use</text>
<text text-anchor="middle" x="35519.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r&#45;level dynamic tracing (kprobes and upr</text>
<text text-anchor="middle" x="35519.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">obes), static tracing (tracepoints), and</text>
<text text-anchor="middle" x="35519.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> hardware events. This is finding uses f</text>
<text text-anchor="middle" x="35519.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">or the generation of new performance ana</text>
<text text-anchor="middle" x="35519.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lysis tools, network acceleration techno</text>
<text text-anchor="middle" x="35519.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">logies, and security intrusion detection</text>
<text text-anchor="middle" x="35519.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> systems.This talk will explain the BPF </text>
<text text-anchor="middle" x="35519.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">enhancements, then discuss the new perfo</text>
<text text-anchor="middle" x="35519.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rmance observability tools that are in u</text>
<text text-anchor="middle" x="35519.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">se and being created, especially from th</text>
<text text-anchor="middle" x="35519.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e BPF compiler collection (bcc) open sou</text>
<text text-anchor="middle" x="35519.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rce project. These tools provide new ins</text>
<text text-anchor="middle" x="35519.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ights for file system and storage perfor</text>
<text text-anchor="middle" x="35519.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mance, CPU scheduler performance, TCP pe</text>
<text text-anchor="middle" x="35519.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rformance, and much more. This is a majo</text>
<text text-anchor="middle" x="35519.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r turning point for Linux systems engine</text>
<text text-anchor="middle" x="35519.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ering, as custom advanced performance in</text>
<text text-anchor="middle" x="35519.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">strumentation can be used safely in prod</text>
<text text-anchor="middle" x="35519.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uction environments, powering a new gene</text>
<text text-anchor="middle" x="35519.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ration of tools and visualizations.Becau</text>
<text text-anchor="middle" x="35519.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">se these BPF enhancements are only in ve</text>
<text text-anchor="middle" x="35519.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ry recent Linux (such as Linux 4.9), mos</text>
<text text-anchor="middle" x="35519.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t companies are not yet running new enou</text>
<text text-anchor="middle" x="35519.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gh kernels to be exploring BPF yet. This</text>
<text text-anchor="middle" x="35519.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> will change in the next year or two, as</text>
<text text-anchor="middle" x="35519.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> companies including Netflix upgrade the</text>
<text text-anchor="middle" x="35519.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ir kernels. This talk will give you a he</text>
<text text-anchor="middle" x="35519.022" y="-204.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ad start on this growing technology, and</text>
<text text-anchor="middle" x="35519.022" y="-190.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> also discuss areas of future work and u</text>
<text text-anchor="middle" x="35519.022" y="-176.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nsolved problems.</text>
</g>
<!-- 32&#45;&gt;The Berkeley Packet Filter (BPF) in Linu
x has been enhanced in very recent versi
ons to do much more than just filter pac
kets, and has become a hot area of opera
ting systems innovation, with much more 
yet to be discovered. BPF is a sandboxed
 virtual machine that runs user&#45;level de
fined programs in kernel context, and is
 part of many kernels. The Linux enhance
ments allow it to run custom programs on
 other events, including kernel&#45; and use
r&#45;level dynamic tracing (kprobes and upr
obes), static tracing (tracepoints), and
 hardware events. This is finding uses f
or the generation of new performance ana
lysis tools, network acceleration techno
logies, and security intrusion detection
 systems.This talk will explain the BPF 
enhancements, then discuss the new perfo
rmance observability tools that are in u
se and being created, especially from th
e BPF compiler collection (bcc) open sou
rce project. These tools provide new ins
ights for file system and storage perfor
mance, CPU scheduler performance, TCP pe
rformance, and much more. This is a majo
r turning point for Linux systems engine
ering, as custom advanced performance in
strumentation can be used safely in prod
uction environments, powering a new gene
ration of tools and visualizations.Becau
se these BPF enhancements are only in ve
ry recent Linux (such as Linux 4.9), mos
t companies are not yet running new enou
gh kernels to be exploring BPF yet. This
 will change in the next year or two, as
 companies including Netflix upgrade the
ir kernels. This talk will give you a he
ad start on this growing technology, and
 also discuss areas of future work and u
nsolved problems. -->
<g id="edge132" class="edge">
<title>32&#45;&gt;The Berkeley Packet Filter (BPF) in Linu
x has been enhanced in very recent versi
ons to do much more than just filter pac
kets, and has become a hot area of opera
ting systems innovation, with much more 
yet to be discovered. BPF is a sandboxed
 virtual machine that runs user&#45;level de
fined programs in kernel context, and is
 part of many kernels. The Linux enhance
ments allow it to run custom programs on
 other events, including kernel&#45; and use
r&#45;level dynamic tracing (kprobes and upr
obes), static tracing (tracepoints), and
 hardware events. This is finding uses f
or the generation of new performance ana
lysis tools, network acceleration techno
logies, and security intrusion detection
 systems.This talk will explain the BPF 
enhancements, then discuss the new perfo
rmance observability tools that are in u
se and being created, especially from th
e BPF compiler collection (bcc) open sou
rce project. These tools provide new ins
ights for file system and storage perfor
mance, CPU scheduler performance, TCP pe
rformance, and much more. This is a majo
r turning point for Linux systems engine
ering, as custom advanced performance in
strumentation can be used safely in prod
uction environments, powering a new gene
ration of tools and visualizations.Becau
se these BPF enhancements are only in ve
ry recent Linux (such as Linux 4.9), mos
t companies are not yet running new enou
gh kernels to be exploring BPF yet. This
 will change in the next year or two, as
 companies including Netflix upgrade the
ir kernels. This talk will give you a he
ad start on this growing technology, and
 also discuss areas of future work and u
nsolved problems.</title>
<path fill="none" stroke="#000000" d="M35712.253,-958.636C35700.36,-928.0096 35674.1715,-860.5696 35644.7986,-784.9294"/>
<polygon fill="#000000" stroke="#000000" points="35647.8957,-783.2362 35641.0131,-775.1813 35641.3704,-785.7701 35647.8957,-783.2362"/>
</g>
<!-- 33&#45;&gt; -->
<g id="edge136" class="edge">
<title>33&#45;&gt;</title>
<path fill="none" stroke="#000000" d="M3945.4538,-972.2362C3915.1666,-968.0285 3864.139,-961.4241 3820.022,-958.0672 3761.3797,-953.6052 2804.5112,-962.7304 2762.022,-922.0672 2699.9455,-862.6586 2716.5088,-580.283 2723.6044,-489.3316"/>
<polygon fill="#000000" stroke="#000000" points="2727.1049,-489.4649 2724.4168,-479.2168 2720.1273,-488.9044 2727.1049,-489.4649"/>
</g>
<!-- 33&#45;&gt;Brendan Gregg, Netflix -->
<g id="edge134" class="edge">
<title>33&#45;&gt;Brendan Gregg, Netflix</title>
<path fill="none" stroke="#000000" d="M3974.0522,-958.0389C3982.6732,-881.4854 4016.2876,-582.9939 4026.8366,-489.3196"/>
<polygon fill="#000000" stroke="#000000" points="4030.337,-489.5115 4027.9782,-479.1826 4023.381,-488.7281 4030.337,-489.5115"/>
</g>
<!-- 33&#45;&gt;Brendan Gregg is an industry expert in c
omputing performance and cloud computing
. He is a senior performance architect a
t Netflix, where he does performance des
ign, evaluation, analysis, and tuning. H
e is the author of multiple technical bo
oks including Systems Performance publis
hed by Prentice Hall, and received the U
SENIX LISA Award for Outstanding Achieve
ment in System Administration. He has al
so worked as a kernel engineer, and as a
 performance lead on storage and cloud p
roducts. Brendan has created performance
 analysis tools included in multiple ope
rating systems, and visualizations and m
ethodologies for performance analysis, i
ncluding flame graphs. -->
<g id="edge135" class="edge">
<title>33&#45;&gt;Brendan Gregg is an industry expert in c
omputing performance and cloud computing
. He is a senior performance architect a
t Netflix, where he does performance des
ign, evaluation, analysis, and tuning. H
e is the author of multiple technical bo
oks including Systems Performance publis
hed by Prentice Hall, and received the U
SENIX LISA Award for Outstanding Achieve
ment in System Administration. He has al
so worked as a kernel engineer, and as a
 performance lead on storage and cloud p
roducts. Brendan has created performance
 analysis tools included in multiple ope
rating systems, and visualizations and m
ethodologies for performance analysis, i
ncluding flame graphs.</title>
<path fill="none" stroke="#000000" d="M3957.3229,-960.3865C3948.1284,-950.0434 3936.4689,-935.8963 3928.022,-922.0672 3873.0291,-832.0346 3824.98,-724.3859 3789.5558,-635.7595"/>
<polygon fill="#000000" stroke="#000000" points="3792.7905,-634.4219 3785.8426,-626.4233 3786.2861,-637.0089 3792.7905,-634.4219"/>
</g>
<!-- Engineering Record and Replay for Deploy
ability -->
<g id="node132" class="node">
<title>Engineering Record and Replay for Deploy
ability</title>
<ellipse fill="none" stroke="#000000" cx="36312.022" cy="-461.0336" rx="183.8504" ry="25.4118"/>
<text text-anchor="middle" x="36312.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Engineering Record and Replay for Deploy</text>
<text text-anchor="middle" x="36312.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ability</text>
</g>
<!-- 34&#45;&gt;Engineering Record and Replay for Deploy
ability -->
<g id="edge138" class="edge">
<title>34&#45;&gt;Engineering Record and Replay for Deploy
ability</title>
<path fill="none" stroke="#000000" d="M36859.8453,-975.6258C36782.0814,-973.8482 36560.6929,-965.0409 36505.022,-922.0672 36364.763,-813.7982 36325.4637,-584.9185 36315.3023,-496.7254"/>
<polygon fill="#000000" stroke="#000000" points="36318.7707,-496.2446 36314.2028,-486.6851 36311.8123,-497.0067 36318.7707,-496.2446"/>
</g>
<!-- Robert O’Callahan and Chris Jones, una
ffiliated; Nathan Froyd, Mozilla Corpora
tion; Kyle Huey, unaffiliated; Albert No
ll, Swisscom AG; Nimrod Partush, Technio
n -->
<g id="node133" class="node">
<title>Robert O’Callahan and Chris Jones, una
ffiliated; Nathan Froyd, Mozilla Corpora
tion; Kyle Huey, unaffiliated; Albert No
ll, Swisscom AG; Nimrod Partush, Technio
n</title>
<ellipse fill="none" stroke="#000000" cx="36697.022" cy="-461.0336" rx="182.7262" ry="55.3091"/>
<text text-anchor="middle" x="36697.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Robert O’Callahan and Chris Jones, una</text>
<text text-anchor="middle" x="36697.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ffiliated; Nathan Froyd, Mozilla Corpora</text>
<text text-anchor="middle" x="36697.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion; Kyle Huey, unaffiliated; Albert No</text>
<text text-anchor="middle" x="36697.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ll, Swisscom AG; Nimrod Partush, Technio</text>
<text text-anchor="middle" x="36697.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n</text>
</g>
<!-- 34&#45;&gt;Robert O’Callahan and Chris Jones, una
ffiliated; Nathan Froyd, Mozilla Corpora
tion; Kyle Huey, unaffiliated; Albert No
ll, Swisscom AG; Nimrod Partush, Technio
n -->
<g id="edge139" class="edge">
<title>34&#45;&gt;Robert O’Callahan and Chris Jones, una
ffiliated; Nathan Froyd, Mozilla Corpora
tion; Kyle Huey, unaffiliated; Albert No
ll, Swisscom AG; Nimrod Partush, Technio
n</title>
<path fill="none" stroke="#000000" d="M36880.4818,-958.3386C36855.4116,-890.3807 36764.6629,-644.3882 36720.9213,-525.8175"/>
<polygon fill="#000000" stroke="#000000" points="36724.091,-524.297 36717.3462,-516.1264 36717.5236,-526.7198 36724.091,-524.297"/>
</g>
<!-- The ability to record and replay program
 executions with low overhead enables ma
ny applications, such as reverse&#45;executi
on debugging, debugging of hard&#45;to repro
duce test failures, and “black box” 
forensic analysis of failures in deploye
d systems. Existing record&#45;and replay ap
proaches limit deployability by recordin
g an entire virtual machine (heavyweight
), modifying the OS kernel (adding deplo
yment and maintenance costs), requiring 
pervasive code instrumentation (imposing
 significant performance and complexity 
overhead), or modifying compilers and ru
ntime systems (limiting generality). We 
investigated whether it is possible to b
uild a practical record&#45;and&#45;replay syste
m avoiding all these issues. The answer 
turns out to be yes—if the CPU and ope
rating system meet certain non&#45;obvious c
onstraints. Fortunately modern Intel CPU
s, Linux kernels and user&#45;space framewor
ks do meet these constraints, although t
his has only become true recently. With 
some novel optimizations, our system RR 
records and replays real&#45;world low&#45;paral
lelism workloads with low overhead, with
 an entirely user&#45;space implementation, 
using stock hardware, compilers, runtime
s and operating systems. RR forms the ba
sis of an open&#45;source reverse&#45;execution 
debugger seeing significant use in pract
ice. We present the design and implement
ation of RR, describe its performance on
 a variety of workloads, and identify co
nstraints on hardware and operating syst
em design required to support our approa
ch. -->
<g id="node134" class="node">
<title>The ability to record and replay program
 executions with low overhead enables ma
ny applications, such as reverse&#45;executi
on debugging, debugging of hard&#45;to repro
duce test failures, and “black box” 
forensic analysis of failures in deploye
d systems. Existing record&#45;and replay ap
proaches limit deployability by recordin
g an entire virtual machine (heavyweight
), modifying the OS kernel (adding deplo
yment and maintenance costs), requiring 
pervasive code instrumentation (imposing
 significant performance and complexity 
overhead), or modifying compilers and ru
ntime systems (limiting generality). We 
investigated whether it is possible to b
uild a practical record&#45;and&#45;replay syste
m avoiding all these issues. The answer 
turns out to be yes—if the CPU and ope
rating system meet certain non&#45;obvious c
onstraints. Fortunately modern Intel CPU
s, Linux kernels and user&#45;space framewor
ks do meet these constraints, although t
his has only become true recently. With 
some novel optimizations, our system RR 
records and replays real&#45;world low&#45;paral
lelism workloads with low overhead, with
 an entirely user&#45;space implementation, 
using stock hardware, compilers, runtime
s and operating systems. RR forms the ba
sis of an open&#45;source reverse&#45;execution 
debugger seeing significant use in pract
ice. We present the design and implement
ation of RR, describe its performance on
 a variety of workloads, and identify co
nstraints on hardware and operating syst
em design required to support our approa
ch.</title>
<ellipse fill="none" stroke="#000000" cx="37077.022" cy="-461.0336" rx="179.14" ry="381.6754"/>
<text text-anchor="middle" x="37077.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The ability to record and replay program</text>
<text text-anchor="middle" x="37077.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> executions with low overhead enables ma</text>
<text text-anchor="middle" x="37077.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ny applications, such as reverse&#45;executi</text>
<text text-anchor="middle" x="37077.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on debugging, debugging of hard&#45;to repro</text>
<text text-anchor="middle" x="37077.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">duce test failures, and “black box” </text>
<text text-anchor="middle" x="37077.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">forensic analysis of failures in deploye</text>
<text text-anchor="middle" x="37077.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d systems. Existing record&#45;and replay ap</text>
<text text-anchor="middle" x="37077.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">proaches limit deployability by recordin</text>
<text text-anchor="middle" x="37077.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g an entire virtual machine (heavyweight</text>
<text text-anchor="middle" x="37077.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">), modifying the OS kernel (adding deplo</text>
<text text-anchor="middle" x="37077.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">yment and maintenance costs), requiring </text>
<text text-anchor="middle" x="37077.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pervasive code instrumentation (imposing</text>
<text text-anchor="middle" x="37077.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> significant performance and complexity </text>
<text text-anchor="middle" x="37077.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">overhead), or modifying compilers and ru</text>
<text text-anchor="middle" x="37077.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntime systems (limiting generality). We </text>
<text text-anchor="middle" x="37077.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">investigated whether it is possible to b</text>
<text text-anchor="middle" x="37077.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uild a practical record&#45;and&#45;replay syste</text>
<text text-anchor="middle" x="37077.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m avoiding all these issues. The answer </text>
<text text-anchor="middle" x="37077.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">turns out to be yes—if the CPU and ope</text>
<text text-anchor="middle" x="37077.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rating system meet certain non&#45;obvious c</text>
<text text-anchor="middle" x="37077.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onstraints. Fortunately modern Intel CPU</text>
<text text-anchor="middle" x="37077.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s, Linux kernels and user&#45;space framewor</text>
<text text-anchor="middle" x="37077.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ks do meet these constraints, although t</text>
<text text-anchor="middle" x="37077.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">his has only become true recently. With </text>
<text text-anchor="middle" x="37077.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">some novel optimizations, our system RR </text>
<text text-anchor="middle" x="37077.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">records and replays real&#45;world low&#45;paral</text>
<text text-anchor="middle" x="37077.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lelism workloads with low overhead, with</text>
<text text-anchor="middle" x="37077.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> an entirely user&#45;space implementation, </text>
<text text-anchor="middle" x="37077.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">using stock hardware, compilers, runtime</text>
<text text-anchor="middle" x="37077.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s and operating systems. RR forms the ba</text>
<text text-anchor="middle" x="37077.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sis of an open&#45;source reverse&#45;execution </text>
<text text-anchor="middle" x="37077.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">debugger seeing significant use in pract</text>
<text text-anchor="middle" x="37077.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ice. We present the design and implement</text>
<text text-anchor="middle" x="37077.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ation of RR, describe its performance on</text>
<text text-anchor="middle" x="37077.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a variety of workloads, and identify co</text>
<text text-anchor="middle" x="37077.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nstraints on hardware and operating syst</text>
<text text-anchor="middle" x="37077.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">em design required to support our approa</text>
<text text-anchor="middle" x="37077.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ch.</text>
</g>
<!-- 34&#45;&gt;The ability to record and replay program
 executions with low overhead enables ma
ny applications, such as reverse&#45;executi
on debugging, debugging of hard&#45;to repro
duce test failures, and “black box” 
forensic analysis of failures in deploye
d systems. Existing record&#45;and replay ap
proaches limit deployability by recordin
g an entire virtual machine (heavyweight
), modifying the OS kernel (adding deplo
yment and maintenance costs), requiring 
pervasive code instrumentation (imposing
 significant performance and complexity 
overhead), or modifying compilers and ru
ntime systems (limiting generality). We 
investigated whether it is possible to b
uild a practical record&#45;and&#45;replay syste
m avoiding all these issues. The answer 
turns out to be yes—if the CPU and ope
rating system meet certain non&#45;obvious c
onstraints. Fortunately modern Intel CPU
s, Linux kernels and user&#45;space framewor
ks do meet these constraints, although t
his has only become true recently. With 
some novel optimizations, our system RR 
records and replays real&#45;world low&#45;paral
lelism workloads with low overhead, with
 an entirely user&#45;space implementation, 
using stock hardware, compilers, runtime
s and operating systems. RR forms the ba
sis of an open&#45;source reverse&#45;execution 
debugger seeing significant use in pract
ice. We present the design and implement
ation of RR, describe its performance on
 a variety of workloads, and identify co
nstraints on hardware and operating syst
em design required to support our approa
ch. -->
<g id="edge140" class="edge">
<title>34&#45;&gt;The ability to record and replay program
 executions with low overhead enables ma
ny applications, such as reverse&#45;executi
on debugging, debugging of hard&#45;to repro
duce test failures, and “black box” 
forensic analysis of failures in deploye
d systems. Existing record&#45;and replay ap
proaches limit deployability by recordin
g an entire virtual machine (heavyweight
), modifying the OS kernel (adding deplo
yment and maintenance costs), requiring 
pervasive code instrumentation (imposing
 significant performance and complexity 
overhead), or modifying compilers and ru
ntime systems (limiting generality). We 
investigated whether it is possible to b
uild a practical record&#45;and&#45;replay syste
m avoiding all these issues. The answer 
turns out to be yes—if the CPU and ope
rating system meet certain non&#45;obvious c
onstraints. Fortunately modern Intel CPU
s, Linux kernels and user&#45;space framewor
ks do meet these constraints, although t
his has only become true recently. With 
some novel optimizations, our system RR 
records and replays real&#45;world low&#45;paral
lelism workloads with low overhead, with
 an entirely user&#45;space implementation, 
using stock hardware, compilers, runtime
s and operating systems. RR forms the ba
sis of an open&#45;source reverse&#45;execution 
debugger seeing significant use in pract
ice. We present the design and implement
ation of RR, describe its performance on
 a variety of workloads, and identify co
nstraints on hardware and operating syst
em design required to support our approa
ch.</title>
<path fill="none" stroke="#000000" d="M36893.5622,-958.3386C36905.6102,-925.6802 36932.8264,-851.9052 36962.7043,-770.915"/>
<polygon fill="#000000" stroke="#000000" points="36965.9924,-772.1142 36966.1699,-761.5209 36959.425,-769.6914 36965.9924,-772.1142"/>
</g>
<!-- Proactive error prediction to improve st
orage system reliability -->
<g id="node136" class="node">
<title>Proactive error prediction to improve st
orage system reliability</title>
<ellipse fill="none" stroke="#000000" cx="37442.022" cy="-461.0336" rx="167.9673" ry="25.4118"/>
<text text-anchor="middle" x="37442.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Proactive error prediction to improve st</text>
<text text-anchor="middle" x="37442.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">orage system reliability</text>
</g>
<!-- 35&#45;&gt;Proactive error prediction to improve st
orage system reliability -->
<g id="edge142" class="edge">
<title>35&#45;&gt;Proactive error prediction to improve st
orage system reliability</title>
<path fill="none" stroke="#000000" d="M37616.7916,-958.3386C37590.6789,-884.0353 37489.7691,-596.8976 37454.3753,-496.1849"/>
<polygon fill="#000000" stroke="#000000" points="37457.5838,-494.7582 37450.9662,-486.4843 37450.9798,-497.0791 37457.5838,-494.7582"/>
</g>
<!-- Farzaneh Mahdisoltani, University of Tor
onto; Ioan Stefanovici, Microsoft Resear
ch; Bianca Schroeder, University of Toro
nto -->
<g id="node137" class="node">
<title>Farzaneh Mahdisoltani, University of Tor
onto; Ioan Stefanovici, Microsoft Resear
ch; Bianca Schroeder, University of Toro
nto</title>
<ellipse fill="none" stroke="#000000" cx="37803.022" cy="-461.0336" rx="175.8508" ry="45.011"/>
<text text-anchor="middle" x="37803.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Farzaneh Mahdisoltani, University of Tor</text>
<text text-anchor="middle" x="37803.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onto; Ioan Stefanovici, Microsoft Resear</text>
<text text-anchor="middle" x="37803.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ch; Bianca Schroeder, University of Toro</text>
<text text-anchor="middle" x="37803.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nto</text>
</g>
<!-- 35&#45;&gt;Farzaneh Mahdisoltani, University of Tor
onto; Ioan Stefanovici, Microsoft Resear
ch; Bianca Schroeder, University of Toro
nto -->
<g id="edge143" class="edge">
<title>35&#45;&gt;Farzaneh Mahdisoltani, University of Tor
onto; Ioan Stefanovici, Microsoft Resear
ch; Bianca Schroeder, University of Toro
nto</title>
<path fill="none" stroke="#000000" d="M37629.218,-958.3386C37653.6657,-888.3865 37744.0404,-629.7974 37783.911,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="37787.2703,-516.7123 37787.2656,-506.1175 37780.6622,-514.4028 37787.2703,-516.7123"/>
</g>
<!-- This paper proposes the use of machine l
earning techniques to make storage syste
ms more reliable in the face of sector e
rrors. Sector errors are partial drive f
ailures, where individual sectors on a d
rive become unavailable, and occur at a 
high rate in both hard disk drives and s
olid state drives. The data in the affec
ted sectors can only be recovered throug
h redundancy in the system (e.g. another
 drive in the same RAID) and is lost if 
the error is encountered while the syste
m operates in degraded mode, e.g. during
 RAID reconstruction.In this paper, we e
xplore a range of different machine lear
ning techniques and show that sector err
ors can be predicted ahead of time with 
high accuracy. Prediction is robust, eve
n when only little training data or only
 training data for a different drive mod
el is available. We also discuss a numbe
r of possible use cases for improving st
orage system reliability through the use
 of sector error predictors. We evaluate
 one such use case in detail: We show th
at the mean time to detecting errors (an
d hence the window of vulnerability to d
ata loss) can be greatly reduced by adap
ting the speed of a scrubber based on er
ror predictions. -->
<g id="node138" class="node">
<title>This paper proposes the use of machine l
earning techniques to make storage syste
ms more reliable in the face of sector e
rrors. Sector errors are partial drive f
ailures, where individual sectors on a d
rive become unavailable, and occur at a 
high rate in both hard disk drives and s
olid state drives. The data in the affec
ted sectors can only be recovered throug
h redundancy in the system (e.g. another
 drive in the same RAID) and is lost if 
the error is encountered while the syste
m operates in degraded mode, e.g. during
 RAID reconstruction.In this paper, we e
xplore a range of different machine lear
ning techniques and show that sector err
ors can be predicted ahead of time with 
high accuracy. Prediction is robust, eve
n when only little training data or only
 training data for a different drive mod
el is available. We also discuss a numbe
r of possible use cases for improving st
orage system reliability through the use
 of sector error predictors. We evaluate
 one such use case in detail: We show th
at the mean time to detecting errors (an
d hence the window of vulnerability to d
ata loss) can be greatly reduced by adap
ting the speed of a scrubber based on er
ror predictions.</title>
<ellipse fill="none" stroke="#000000" cx="38172.022" cy="-461.0336" rx="175.3576" ry="302.7835"/>
<text text-anchor="middle" x="38172.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">This paper proposes the use of machine l</text>
<text text-anchor="middle" x="38172.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">earning techniques to make storage syste</text>
<text text-anchor="middle" x="38172.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ms more reliable in the face of sector e</text>
<text text-anchor="middle" x="38172.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rrors. Sector errors are partial drive f</text>
<text text-anchor="middle" x="38172.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ailures, where individual sectors on a d</text>
<text text-anchor="middle" x="38172.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rive become unavailable, and occur at a </text>
<text text-anchor="middle" x="38172.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">high rate in both hard disk drives and s</text>
<text text-anchor="middle" x="38172.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">olid state drives. The data in the affec</text>
<text text-anchor="middle" x="38172.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ted sectors can only be recovered throug</text>
<text text-anchor="middle" x="38172.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h redundancy in the system (e.g. another</text>
<text text-anchor="middle" x="38172.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> drive in the same RAID) and is lost if </text>
<text text-anchor="middle" x="38172.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the error is encountered while the syste</text>
<text text-anchor="middle" x="38172.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m operates in degraded mode, e.g. during</text>
<text text-anchor="middle" x="38172.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> RAID reconstruction.In this paper, we e</text>
<text text-anchor="middle" x="38172.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">xplore a range of different machine lear</text>
<text text-anchor="middle" x="38172.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ning techniques and show that sector err</text>
<text text-anchor="middle" x="38172.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ors can be predicted ahead of time with </text>
<text text-anchor="middle" x="38172.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">high accuracy. Prediction is robust, eve</text>
<text text-anchor="middle" x="38172.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n when only little training data or only</text>
<text text-anchor="middle" x="38172.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> training data for a different drive mod</text>
<text text-anchor="middle" x="38172.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">el is available. We also discuss a numbe</text>
<text text-anchor="middle" x="38172.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r of possible use cases for improving st</text>
<text text-anchor="middle" x="38172.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">orage system reliability through the use</text>
<text text-anchor="middle" x="38172.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of sector error predictors. We evaluate</text>
<text text-anchor="middle" x="38172.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> one such use case in detail: We show th</text>
<text text-anchor="middle" x="38172.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at the mean time to detecting errors (an</text>
<text text-anchor="middle" x="38172.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d hence the window of vulnerability to d</text>
<text text-anchor="middle" x="38172.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ata loss) can be greatly reduced by adap</text>
<text text-anchor="middle" x="38172.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ting the speed of a scrubber based on er</text>
<text text-anchor="middle" x="38172.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ror predictions.</text>
</g>
<!-- 35&#45;&gt;This paper proposes the use of machine l
earning techniques to make storage syste
ms more reliable in the face of sector e
rrors. Sector errors are partial drive f
ailures, where individual sectors on a d
rive become unavailable, and occur at a 
high rate in both hard disk drives and s
olid state drives. The data in the affec
ted sectors can only be recovered throug
h redundancy in the system (e.g. another
 drive in the same RAID) and is lost if 
the error is encountered while the syste
m operates in degraded mode, e.g. during
 RAID reconstruction.In this paper, we e
xplore a range of different machine lear
ning techniques and show that sector err
ors can be predicted ahead of time with 
high accuracy. Prediction is robust, eve
n when only little training data or only
 training data for a different drive mod
el is available. We also discuss a numbe
r of possible use cases for improving st
orage system reliability through the use
 of sector error predictors. We evaluate
 one such use case in detail: We show th
at the mean time to detecting errors (an
d hence the window of vulnerability to d
ata loss) can be greatly reduced by adap
ting the speed of a scrubber based on er
ror predictions. -->
<g id="edge144" class="edge">
<title>35&#45;&gt;This paper proposes the use of machine l
earning techniques to make storage syste
ms more reliable in the face of sector e
rrors. Sector errors are partial drive f
ailures, where individual sectors on a d
rive become unavailable, and occur at a 
high rate in both hard disk drives and s
olid state drives. The data in the affec
ted sectors can only be recovered throug
h redundancy in the system (e.g. another
 drive in the same RAID) and is lost if 
the error is encountered while the syste
m operates in degraded mode, e.g. during
 RAID reconstruction.In this paper, we e
xplore a range of different machine lear
ning techniques and show that sector err
ors can be predicted ahead of time with 
high accuracy. Prediction is robust, eve
n when only little training data or only
 training data for a different drive mod
el is available. We also discuss a numbe
r of possible use cases for improving st
orage system reliability through the use
 of sector error predictors. We evaluate
 one such use case in detail: We show th
at the mean time to detecting errors (an
d hence the window of vulnerability to d
ata loss) can be greatly reduced by adap
ting the speed of a scrubber based on er
ror predictions.</title>
<path fill="none" stroke="#000000" d="M37650.1033,-975.4731C37725.4607,-973.3031 37935.5099,-963.5823 37988.022,-922.0672 38042.0673,-879.34 38080.3015,-818.3393 38107.3292,-754.6446"/>
<polygon fill="#000000" stroke="#000000" points="38110.6361,-755.8072 38111.2361,-745.2294 38104.1707,-753.1243 38110.6361,-755.8072"/>
</g>
<!-- Towards Production&#45;Run Heisenbugs Reprod
uction on Commercial Hardware -->
<g id="node140" class="node">
<title>Towards Production&#45;Run Heisenbugs Reprod
uction on Commercial Hardware</title>
<ellipse fill="none" stroke="#000000" cx="38557.022" cy="-461.0336" rx="191.0285" ry="25.4118"/>
<text text-anchor="middle" x="38557.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Towards Production&#45;Run Heisenbugs Reprod</text>
<text text-anchor="middle" x="38557.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uction on Commercial Hardware</text>
</g>
<!-- 36&#45;&gt;Towards Production&#45;Run Heisenbugs Reprod
uction on Commercial Hardware -->
<g id="edge146" class="edge">
<title>36&#45;&gt;Towards Production&#45;Run Heisenbugs Reprod
uction on Commercial Hardware</title>
<path fill="none" stroke="#000000" d="M38747.2408,-958.3386C38718.7911,-883.9602 38608.7679,-596.3173 38570.3508,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="38573.5985,-494.5739 38566.7568,-486.4843 38567.0604,-497.0747 38573.5985,-494.5739"/>
</g>
<!-- Shiyou Huang, Bowen Cai, and Jeff Huang,
 Texas A&amp;M University -->
<g id="node141" class="node">
<title>Shiyou Huang, Bowen Cai, and Jeff Huang,
 Texas A&amp;M University</title>
<ellipse fill="none" stroke="#000000" cx="38951.022" cy="-461.0336" rx="185.357" ry="25.4118"/>
<text text-anchor="middle" x="38951.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Shiyou Huang, Bowen Cai, and Jeff Huang,</text>
<text text-anchor="middle" x="38951.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Texas A&amp;M University</text>
</g>
<!-- 36&#45;&gt;Shiyou Huang, Bowen Cai, and Jeff Huang,
 Texas A&amp;M University -->
<g id="edge147" class="edge">
<title>36&#45;&gt;Shiyou Huang, Bowen Cai, and Jeff Huang,
 Texas A&amp;M University</title>
<path fill="none" stroke="#000000" d="M38760.8032,-958.3386C38789.2529,-883.9602 38899.2761,-596.3173 38937.6932,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="38940.9835,-497.0747 38941.2871,-486.4843 38934.4455,-494.5739 38940.9835,-497.0747"/>
</g>
<!-- We present a new technique, H3, for repr
oducing Heisenbugs in production runs on
 commercial hardware. H3 integrates the 
hardware control flow tracing capability
 provided in recent Intel processors wit
h symbolic constraint analysis. Compared
 to a state&#45;of&#45;the&#45;art solution, CLAP, t
his integration allows H3 to reproduce f
ailures with much lower runtime overhead
 and much more compact trace. Moreover, 
it allows us to develop a highly effecti
ve core&#45;based constraint reduction techn
ique that significantly reduces the comp
lexity of the generated symbolic constra
ints. H3 has been implemented for C/C++ 
and evaluated on both popular benchmarks
 and real&#45;world applications. It reprodu
ces real&#45;world Heisenbugs with overhead 
ranging between 1.4%&#45; 23.4%, up to 8X mo
re efficient than CLAP, and incurs only 
4.9% runtime overhead on PARSEC benchmar
ks. -->
<g id="node142" class="node">
<title>We present a new technique, H3, for repr
oducing Heisenbugs in production runs on
 commercial hardware. H3 integrates the 
hardware control flow tracing capability
 provided in recent Intel processors wit
h symbolic constraint analysis. Compared
 to a state&#45;of&#45;the&#45;art solution, CLAP, t
his integration allows H3 to reproduce f
ailures with much lower runtime overhead
 and much more compact trace. Moreover, 
it allows us to develop a highly effecti
ve core&#45;based constraint reduction techn
ique that significantly reduces the comp
lexity of the generated symbolic constra
ints. H3 has been implemented for C/C++ 
and evaluated on both popular benchmarks
 and real&#45;world applications. It reprodu
ces real&#45;world Heisenbugs with overhead 
ranging between 1.4%&#45; 23.4%, up to 8X mo
re efficient than CLAP, and incurs only 
4.9% runtime overhead on PARSEC benchmar
ks.</title>
<ellipse fill="none" stroke="#000000" cx="39351.022" cy="-461.0336" rx="196.617" ry="223.3915"/>
<text text-anchor="middle" x="39351.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">We present a new technique, H3, for repr</text>
<text text-anchor="middle" x="39351.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oducing Heisenbugs in production runs on</text>
<text text-anchor="middle" x="39351.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> commercial hardware. H3 integrates the </text>
<text text-anchor="middle" x="39351.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hardware control flow tracing capability</text>
<text text-anchor="middle" x="39351.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> provided in recent Intel processors wit</text>
<text text-anchor="middle" x="39351.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h symbolic constraint analysis. Compared</text>
<text text-anchor="middle" x="39351.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> to a state&#45;of&#45;the&#45;art solution, CLAP, t</text>
<text text-anchor="middle" x="39351.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">his integration allows H3 to reproduce f</text>
<text text-anchor="middle" x="39351.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ailures with much lower runtime overhead</text>
<text text-anchor="middle" x="39351.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and much more compact trace. Moreover, </text>
<text text-anchor="middle" x="39351.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">it allows us to develop a highly effecti</text>
<text text-anchor="middle" x="39351.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ve core&#45;based constraint reduction techn</text>
<text text-anchor="middle" x="39351.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ique that significantly reduces the comp</text>
<text text-anchor="middle" x="39351.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lexity of the generated symbolic constra</text>
<text text-anchor="middle" x="39351.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ints. H3 has been implemented for C/C++ </text>
<text text-anchor="middle" x="39351.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and evaluated on both popular benchmarks</text>
<text text-anchor="middle" x="39351.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and real&#45;world applications. It reprodu</text>
<text text-anchor="middle" x="39351.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ces real&#45;world Heisenbugs with overhead </text>
<text text-anchor="middle" x="39351.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ranging between 1.4%&#45; 23.4%, up to 8X mo</text>
<text text-anchor="middle" x="39351.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re efficient than CLAP, and incurs only </text>
<text text-anchor="middle" x="39351.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">4.9% runtime overhead on PARSEC benchmar</text>
<text text-anchor="middle" x="39351.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ks.</text>
</g>
<!-- 36&#45;&gt;We present a new technique, H3, for repr
oducing Heisenbugs in production runs on
 commercial hardware. H3 integrates the 
hardware control flow tracing capability
 provided in recent Intel processors wit
h symbolic constraint analysis. Compared
 to a state&#45;of&#45;the&#45;art solution, CLAP, t
his integration allows H3 to reproduce f
ailures with much lower runtime overhead
 and much more compact trace. Moreover, 
it allows us to develop a highly effecti
ve core&#45;based constraint reduction techn
ique that significantly reduces the comp
lexity of the generated symbolic constra
ints. H3 has been implemented for C/C++ 
and evaluated on both popular benchmarks
 and real&#45;world applications. It reprodu
ces real&#45;world Heisenbugs with overhead 
ranging between 1.4%&#45; 23.4%, up to 8X mo
re efficient than CLAP, and incurs only 
4.9% runtime overhead on PARSEC benchmar
ks. -->
<g id="edge148" class="edge">
<title>36&#45;&gt;We present a new technique, H3, for repr
oducing Heisenbugs in production runs on
 commercial hardware. H3 integrates the 
hardware control flow tracing capability
 provided in recent Intel processors wit
h symbolic constraint analysis. Compared
 to a state&#45;of&#45;the&#45;art solution, CLAP, t
his integration allows H3 to reproduce f
ailures with much lower runtime overhead
 and much more compact trace. Moreover, 
it allows us to develop a highly effecti
ve core&#45;based constraint reduction techn
ique that significantly reduces the comp
lexity of the generated symbolic constra
ints. H3 has been implemented for C/C++ 
and evaluated on both popular benchmarks
 and real&#45;world applications. It reprodu
ces real&#45;world Heisenbugs with overhead 
ranging between 1.4%&#45; 23.4%, up to 8X mo
re efficient than CLAP, and incurs only 
4.9% runtime overhead on PARSEC benchmar
ks.</title>
<path fill="none" stroke="#000000" d="M38781.2195,-975.6594C38860.1549,-973.9689 39087.3407,-965.3654 39145.022,-922.0672 39220.8791,-865.1255 39269.4123,-773.9654 39300.1679,-687.6814"/>
<polygon fill="#000000" stroke="#000000" points="39303.5561,-688.5952 39303.5523,-678.0004 39296.9483,-686.2852 39303.5561,-688.5952"/>
</g>
<!-- A DSL Approach to Reconcile Equivalent D
ivergent Program Executions -->
<g id="node144" class="node">
<title>A DSL Approach to Reconcile Equivalent D
ivergent Program Executions</title>
<ellipse fill="none" stroke="#000000" cx="39753.022" cy="-461.0336" rx="186.8275" ry="25.4118"/>
<text text-anchor="middle" x="39753.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">A DSL Approach to Reconcile Equivalent D</text>
<text text-anchor="middle" x="39753.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ivergent Program Executions</text>
</g>
<!-- 37&#45;&gt;A DSL Approach to Reconcile Equivalent D
ivergent Program Executions -->
<g id="edge150" class="edge">
<title>37&#45;&gt;A DSL Approach to Reconcile Equivalent D
ivergent Program Executions</title>
<path fill="none" stroke="#000000" d="M39935.5162,-958.3386C39908.2218,-883.9602 39802.6665,-596.3173 39765.8095,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="39769.0924,-494.6663 39762.3615,-486.4843 39762.5209,-497.0779 39769.0924,-494.6663"/>
</g>
<!-- Luís Pina, Daniel Grumberg, Anastasios 
Andronidis, and Cristian Cadar, Imperial
 College London -->
<g id="node145" class="node">
<title>Luís Pina, Daniel Grumberg, Anastasios 
Andronidis, and Cristian Cadar, Imperial
 College London</title>
<ellipse fill="none" stroke="#000000" cx="40131.022" cy="-461.0336" rx="173.2559" ry="35.2113"/>
<text text-anchor="middle" x="40131.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Luís Pina, Daniel Grumberg, Anastasios </text>
<text text-anchor="middle" x="40131.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Andronidis, and Cristian Cadar, Imperial</text>
<text text-anchor="middle" x="40131.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> College London</text>
</g>
<!-- 37&#45;&gt;Luís Pina, Daniel Grumberg, Anastasios 
Andronidis, and Cristian Cadar, Imperial
 College London -->
<g id="edge151" class="edge">
<title>37&#45;&gt;Luís Pina, Daniel Grumberg, Anastasios 
Andronidis, and Cristian Cadar, Imperial
 College London</title>
<path fill="none" stroke="#000000" d="M39948.5278,-958.3386C39974.9331,-886.383 40074.5838,-614.8303 40114.4191,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="40117.8116,-507.1919 40117.971,-496.5982 40111.2401,-504.7803 40117.8116,-507.1919"/>
</g>
<!-- Multi&#45;Version Execution (MVE) deploys mu
ltiple versions of the same program, typ
ically synchronizing their execution at 
the level of system calls. By default, M
VE requires all deployed versions to iss
ue the same sequence of system calls, wh
ich limits the types of versions which c
an be deployed.In this paper, we propose
 a Domain&#45;Specific Language (DSL) to rec
oncile expected divergences between diff
erent program versions deployed through 
MVE. We evaluate the DSL by adding it to
 an existing MVE system (Varan) and test
ing it via three scenarios: (1) deployin
g the same program under different confi
gurations, (2) deploying different relea
ses of the same program, and (3) deployi
ng dynamic analyses in parallel with the
 native execution. We also present an al
gorithm to automatically extract DSL rul
es from pairs of system call traces. Our
 results show that each scenario require
s a small number of simple rules (at mos
t 14 rules in each case) and that writin
g DSL rules can be partially automated. -->
<g id="node146" class="node">
<title>Multi&#45;Version Execution (MVE) deploys mu
ltiple versions of the same program, typ
ically synchronizing their execution at 
the level of system calls. By default, M
VE requires all deployed versions to iss
ue the same sequence of system calls, wh
ich limits the types of versions which c
an be deployed.In this paper, we propose
 a Domain&#45;Specific Language (DSL) to rec
oncile expected divergences between diff
erent program versions deployed through 
MVE. We evaluate the DSL by adding it to
 an existing MVE system (Varan) and test
ing it via three scenarios: (1) deployin
g the same program under different confi
gurations, (2) deploying different relea
ses of the same program, and (3) deployi
ng dynamic analyses in parallel with the
 native execution. We also present an al
gorithm to automatically extract DSL rul
es from pairs of system call traces. Our
 results show that each scenario require
s a small number of simple rules (at mos
t 14 rules in each case) and that writin
g DSL rules can be partially automated.</title>
<ellipse fill="none" stroke="#000000" cx="40511.022" cy="-461.0336" rx="188.8588" ry="253.2885"/>
<text text-anchor="middle" x="40511.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Multi&#45;Version Execution (MVE) deploys mu</text>
<text text-anchor="middle" x="40511.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ltiple versions of the same program, typ</text>
<text text-anchor="middle" x="40511.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ically synchronizing their execution at </text>
<text text-anchor="middle" x="40511.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the level of system calls. By default, M</text>
<text text-anchor="middle" x="40511.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">VE requires all deployed versions to iss</text>
<text text-anchor="middle" x="40511.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ue the same sequence of system calls, wh</text>
<text text-anchor="middle" x="40511.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ich limits the types of versions which c</text>
<text text-anchor="middle" x="40511.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">an be deployed.In this paper, we propose</text>
<text text-anchor="middle" x="40511.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a Domain&#45;Specific Language (DSL) to rec</text>
<text text-anchor="middle" x="40511.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oncile expected divergences between diff</text>
<text text-anchor="middle" x="40511.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erent program versions deployed through </text>
<text text-anchor="middle" x="40511.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">MVE. We evaluate the DSL by adding it to</text>
<text text-anchor="middle" x="40511.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> an existing MVE system (Varan) and test</text>
<text text-anchor="middle" x="40511.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing it via three scenarios: (1) deployin</text>
<text text-anchor="middle" x="40511.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g the same program under different confi</text>
<text text-anchor="middle" x="40511.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gurations, (2) deploying different relea</text>
<text text-anchor="middle" x="40511.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ses of the same program, and (3) deployi</text>
<text text-anchor="middle" x="40511.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng dynamic analyses in parallel with the</text>
<text text-anchor="middle" x="40511.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> native execution. We also present an al</text>
<text text-anchor="middle" x="40511.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gorithm to automatically extract DSL rul</text>
<text text-anchor="middle" x="40511.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es from pairs of system call traces. Our</text>
<text text-anchor="middle" x="40511.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> results show that each scenario require</text>
<text text-anchor="middle" x="40511.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s a small number of simple rules (at mos</text>
<text text-anchor="middle" x="40511.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t 14 rules in each case) and that writin</text>
<text text-anchor="middle" x="40511.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g DSL rules can be partially automated.</text>
</g>
<!-- 37&#45;&gt;Multi&#45;Version Execution (MVE) deploys mu
ltiple versions of the same program, typ
ically synchronizing their execution at 
the level of system calls. By default, M
VE requires all deployed versions to iss
ue the same sequence of system calls, wh
ich limits the types of versions which c
an be deployed.In this paper, we propose
 a Domain&#45;Specific Language (DSL) to rec
oncile expected divergences between diff
erent program versions deployed through 
MVE. We evaluate the DSL by adding it to
 an existing MVE system (Varan) and test
ing it via three scenarios: (1) deployin
g the same program under different confi
gurations, (2) deploying different relea
ses of the same program, and (3) deployi
ng dynamic analyses in parallel with the
 native execution. We also present an al
gorithm to automatically extract DSL rul
es from pairs of system call traces. Our
 results show that each scenario require
s a small number of simple rules (at mos
t 14 rules in each case) and that writin
g DSL rules can be partially automated. -->
<g id="edge152" class="edge">
<title>37&#45;&gt;Multi&#45;Version Execution (MVE) deploys mu
ltiple versions of the same program, typ
ically synchronizing their execution at 
the level of system calls. By default, M
VE requires all deployed versions to iss
ue the same sequence of system calls, wh
ich limits the types of versions which c
an be deployed.In this paper, we propose
 a Domain&#45;Specific Language (DSL) to rec
oncile expected divergences between diff
erent program versions deployed through 
MVE. We evaluate the DSL by adding it to
 an existing MVE system (Varan) and test
ing it via three scenarios: (1) deployin
g the same program under different confi
gurations, (2) deploying different relea
ses of the same program, and (3) deployi
ng dynamic analyses in parallel with the
 native execution. We also present an al
gorithm to automatically extract DSL rul
es from pairs of system call traces. Our
 results show that each scenario require
s a small number of simple rules (at mos
t 14 rules in each case) and that writin
g DSL rules can be partially automated.</title>
<path fill="none" stroke="#000000" d="M39969.2169,-975.4718C40045.4244,-973.2933 40259.0098,-963.5417 40313.022,-922.0672 40380.1608,-870.5132 40424.8586,-791.6686 40454.4784,-713.68"/>
<polygon fill="#000000" stroke="#000000" points="40457.8079,-714.7681 40458.0163,-704.1753 40451.2476,-712.3261 40457.8079,-714.7681"/>
</g>
<!-- Titan: Fair Packet Scheduling for Commod
ity Multiqueue NICs -->
<g id="node148" class="node">
<title>Titan: Fair Packet Scheduling for Commod
ity Multiqueue NICs</title>
<ellipse fill="none" stroke="#000000" cx="40900.022" cy="-461.0336" rx="182.018" ry="25.4118"/>
<text text-anchor="middle" x="40900.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Titan: Fair Packet Scheduling for Commod</text>
<text text-anchor="middle" x="40900.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ity Multiqueue NICs</text>
</g>
<!-- 38&#45;&gt;Titan: Fair Packet Scheduling for Commod
ity Multiqueue NICs -->
<g id="edge154" class="edge">
<title>38&#45;&gt;Titan: Fair Packet Scheduling for Commod
ity Multiqueue NICs</title>
<path fill="none" stroke="#000000" d="M41082.5162,-958.3386C41055.2218,-883.9602 40949.6665,-596.3173 40912.8095,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="40916.0924,-494.6663 40909.3615,-486.4843 40909.5209,-497.0779 40916.0924,-494.6663"/>
</g>
<!-- Brent Stephens, Arjun Singhvi, Aditya Ak
ella, and Michael Swift, UW&#45;Madison -->
<g id="node149" class="node">
<title>Brent Stephens, Arjun Singhvi, Aditya Ak
ella, and Michael Swift, UW&#45;Madison</title>
<ellipse fill="none" stroke="#000000" cx="41278.022" cy="-461.0336" rx="177.8918" ry="25.4118"/>
<text text-anchor="middle" x="41278.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Brent Stephens, Arjun Singhvi, Aditya Ak</text>
<text text-anchor="middle" x="41278.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ella, and Michael Swift, UW&#45;Madison</text>
</g>
<!-- 38&#45;&gt;Brent Stephens, Arjun Singhvi, Aditya Ak
ella, and Michael Swift, UW&#45;Madison -->
<g id="edge155" class="edge">
<title>38&#45;&gt;Brent Stephens, Arjun Singhvi, Aditya Ak
ella, and Michael Swift, UW&#45;Madison</title>
<path fill="none" stroke="#000000" d="M41095.5278,-958.3386C41122.8222,-883.9602 41228.3774,-596.3173 41265.2344,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="41268.5231,-497.0779 41268.6825,-486.4843 41261.9516,-494.6663 41268.5231,-497.0779"/>
</g>
<!-- The performance of an OS’s networking 
stack can be measured by its achieved th
roughput, CPU utilization, latency, and 
per&#45;flow fairness. To be able to drive i
ncreasing line&#45;rates at 10Gbps and beyon
d, modern OS networking stacks rely on a
 number of important hardware and softwa
re optimizations, including but not limi
ted to using multiple transmit and recei
ve queues and segmentation offloading. U
nfortunately, we have observed that thes
e optimizations lead to substantial flow
&#45;level unfairness.We describe Titan, an 
extension to the Linux networking stack 
that systematically addresses unfairness
 arising in different operating conditio
ns. Across both fine and coarse timescal
es and when NIC queues are undersubscrib
ed and oversubscribed, we find that the 
Titan can reduce unfairness by 58% or mo
re when compared with the best performin
g Linux configuration. We also find that
 improving fairness can lead to a reduct
ion in tail flow completion times for fl
ows in an all&#45;to&#45;all shuffle in a cluste
r of servers. -->
<g id="node150" class="node">
<title>The performance of an OS’s networking 
stack can be measured by its achieved th
roughput, CPU utilization, latency, and 
per&#45;flow fairness. To be able to drive i
ncreasing line&#45;rates at 10Gbps and beyon
d, modern OS networking stacks rely on a
 number of important hardware and softwa
re optimizations, including but not limi
ted to using multiple transmit and recei
ve queues and segmentation offloading. U
nfortunately, we have observed that thes
e optimizations lead to substantial flow
&#45;level unfairness.We describe Titan, an 
extension to the Linux networking stack 
that systematically addresses unfairness
 arising in different operating conditio
ns. Across both fine and coarse timescal
es and when NIC queues are undersubscrib
ed and oversubscribed, we find that the 
Titan can reduce unfairness by 58% or mo
re when compared with the best performin
g Linux configuration. We also find that
 improving fairness can lead to a reduct
ion in tail flow completion times for fl
ows in an all&#45;to&#45;all shuffle in a cluste
r of servers.</title>
<ellipse fill="none" stroke="#000000" cx="41656.022" cy="-461.0336" rx="182.1049" ry="263.0875"/>
<text text-anchor="middle" x="41656.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The performance of an OS’s networking </text>
<text text-anchor="middle" x="41656.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stack can be measured by its achieved th</text>
<text text-anchor="middle" x="41656.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">roughput, CPU utilization, latency, and </text>
<text text-anchor="middle" x="41656.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">per&#45;flow fairness. To be able to drive i</text>
<text text-anchor="middle" x="41656.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ncreasing line&#45;rates at 10Gbps and beyon</text>
<text text-anchor="middle" x="41656.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d, modern OS networking stacks rely on a</text>
<text text-anchor="middle" x="41656.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> number of important hardware and softwa</text>
<text text-anchor="middle" x="41656.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re optimizations, including but not limi</text>
<text text-anchor="middle" x="41656.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ted to using multiple transmit and recei</text>
<text text-anchor="middle" x="41656.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ve queues and segmentation offloading. U</text>
<text text-anchor="middle" x="41656.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nfortunately, we have observed that thes</text>
<text text-anchor="middle" x="41656.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e optimizations lead to substantial flow</text>
<text text-anchor="middle" x="41656.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;level unfairness.We describe Titan, an </text>
<text text-anchor="middle" x="41656.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">extension to the Linux networking stack </text>
<text text-anchor="middle" x="41656.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">that systematically addresses unfairness</text>
<text text-anchor="middle" x="41656.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> arising in different operating conditio</text>
<text text-anchor="middle" x="41656.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns. Across both fine and coarse timescal</text>
<text text-anchor="middle" x="41656.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es and when NIC queues are undersubscrib</text>
<text text-anchor="middle" x="41656.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed and oversubscribed, we find that the </text>
<text text-anchor="middle" x="41656.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Titan can reduce unfairness by 58% or mo</text>
<text text-anchor="middle" x="41656.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re when compared with the best performin</text>
<text text-anchor="middle" x="41656.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g Linux configuration. We also find that</text>
<text text-anchor="middle" x="41656.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> improving fairness can lead to a reduct</text>
<text text-anchor="middle" x="41656.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ion in tail flow completion times for fl</text>
<text text-anchor="middle" x="41656.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ows in an all&#45;to&#45;all shuffle in a cluste</text>
<text text-anchor="middle" x="41656.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r of servers.</text>
</g>
<!-- 38&#45;&gt;The performance of an OS’s networking 
stack can be measured by its achieved th
roughput, CPU utilization, latency, and 
per&#45;flow fairness. To be able to drive i
ncreasing line&#45;rates at 10Gbps and beyon
d, modern OS networking stacks rely on a
 number of important hardware and softwa
re optimizations, including but not limi
ted to using multiple transmit and recei
ve queues and segmentation offloading. U
nfortunately, we have observed that thes
e optimizations lead to substantial flow
&#45;level unfairness.We describe Titan, an 
extension to the Linux networking stack 
that systematically addresses unfairness
 arising in different operating conditio
ns. Across both fine and coarse timescal
es and when NIC queues are undersubscrib
ed and oversubscribed, we find that the 
Titan can reduce unfairness by 58% or mo
re when compared with the best performin
g Linux configuration. We also find that
 improving fairness can lead to a reduct
ion in tail flow completion times for fl
ows in an all&#45;to&#45;all shuffle in a cluste
r of servers. -->
<g id="edge156" class="edge">
<title>38&#45;&gt;The performance of an OS’s networking 
stack can be measured by its achieved th
roughput, CPU utilization, latency, and 
per&#45;flow fairness. To be able to drive i
ncreasing line&#45;rates at 10Gbps and beyon
d, modern OS networking stacks rely on a
 number of important hardware and softwa
re optimizations, including but not limi
ted to using multiple transmit and recei
ve queues and segmentation offloading. U
nfortunately, we have observed that thes
e optimizations lead to substantial flow
&#45;level unfairness.We describe Titan, an 
extension to the Linux networking stack 
that systematically addresses unfairness
 arising in different operating conditio
ns. Across both fine and coarse timescal
es and when NIC queues are undersubscrib
ed and oversubscribed, we find that the 
Titan can reduce unfairness by 58% or mo
re when compared with the best performin
g Linux configuration. We also find that
 improving fairness can lead to a reduct
ion in tail flow completion times for fl
ows in an all&#45;to&#45;all shuffle in a cluste
r of servers.</title>
<path fill="none" stroke="#000000" d="M41116.0563,-975.5705C41192.8719,-973.6467 41410.3985,-964.4904 41465.022,-922.0672 41528.918,-872.4426 41571.6132,-797.6773 41600.0727,-722.7154"/>
<polygon fill="#000000" stroke="#000000" points="41603.444,-723.6908 41603.6467,-713.0979 41596.8824,-721.2524 41603.444,-723.6908"/>
</g>
<!-- MopEye: Opportunistic Monitoring of Per&#45;
app Mobile Network Performance -->
<g id="node152" class="node">
<title>MopEye: Opportunistic Monitoring of Per&#45;
app Mobile Network Performance</title>
<ellipse fill="none" stroke="#000000" cx="42038.022" cy="-461.0336" rx="182.2858" ry="25.4118"/>
<text text-anchor="middle" x="42038.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">MopEye: Opportunistic Monitoring of Per&#45;</text>
<text text-anchor="middle" x="42038.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">app Mobile Network Performance</text>
</g>
<!-- 39&#45;&gt;MopEye: Opportunistic Monitoring of Per&#45;
app Mobile Network Performance -->
<g id="edge158" class="edge">
<title>39&#45;&gt;MopEye: Opportunistic Monitoring of Per&#45;
app Mobile Network Performance</title>
<path fill="none" stroke="#000000" d="M42229.2064,-958.3386C42200.6123,-883.9602 42090.0306,-596.3173 42051.4185,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="42054.6616,-494.5623 42047.8063,-486.4843 42048.1278,-497.0742 42054.6616,-494.5623"/>
</g>
<!-- Daoyuan Wu, Singapore Management Univers
ity; Rocky K. C. Chang, Weichao Li, and 
Eric K. T. Cheng, The Hong Kong Polytech
nic University; Debin Gao, Singapore Man
agement University -->
<g id="node153" class="node">
<title>Daoyuan Wu, Singapore Management Univers
ity; Rocky K. C. Chang, Weichao Li, and 
Eric K. T. Cheng, The Hong Kong Polytech
nic University; Debin Gao, Singapore Man
agement University</title>
<ellipse fill="none" stroke="#000000" cx="42434.022" cy="-461.0336" rx="196.1212" ry="55.3091"/>
<text text-anchor="middle" x="42434.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Daoyuan Wu, Singapore Management Univers</text>
<text text-anchor="middle" x="42434.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ity; Rocky K. C. Chang, Weichao Li, and </text>
<text text-anchor="middle" x="42434.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Eric K. T. Cheng, The Hong Kong Polytech</text>
<text text-anchor="middle" x="42434.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nic University; Debin Gao, Singapore Man</text>
<text text-anchor="middle" x="42434.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">agement University</text>
</g>
<!-- 39&#45;&gt;Daoyuan Wu, Singapore Management Univers
ity; Rocky K. C. Chang, Weichao Li, and 
Eric K. T. Cheng, The Hong Kong Polytech
nic University; Debin Gao, Singapore Man
agement University -->
<g id="edge159" class="edge">
<title>39&#45;&gt;Daoyuan Wu, Singapore Management Univers
ity; Rocky K. C. Chang, Weichao Li, and 
Eric K. T. Cheng, The Hong Kong Polytech
nic University; Debin Gao, Singapore Man
agement University</title>
<path fill="none" stroke="#000000" d="M42242.8376,-958.3386C42268.9896,-890.3125 42363.723,-643.894 42409.2536,-525.4607"/>
<polygon fill="#000000" stroke="#000000" points="42412.5205,-526.7164 42412.8421,-516.1264 42405.9867,-524.2045 42412.5205,-526.7164"/>
</g>
<!-- Crowdsourcing mobile user’s network pe
rformance has become an effective way of
 understanding and improving mobile netw
ork performance and user quality&#45;of&#45;expe
rience. However, the current measurement
 method is still based on the landline m
easurement paradigm in which a measureme
nt app measures the path to fixed (measu
rement or web) servers. In this work, we
 introduce a new paradigm of measuring p
er&#45;app mobile network performance. We de
sign and implement MopEye, an Android ap
p to measure network round&#45;trip delay fo
r each app whenever there is app traffic
. This opportunistic measurement can be 
conducted automatically without user int
ervention. Therefore, it can facilitate 
a large&#45;scale and long&#45;term crowdsourcin
g of mobile network performance. In the 
course of implementing MopEye, we have o
vercome a suite of challenges to make th
e continuous latency monitoring lightwei
ght and accurate. We have deployed MopEy
e to Google Play for an IRB&#45;approved cro
wdsourcing study in a period of ten mont
hs, which obtains over five million meas
urements from 6,266 Android apps on 2,35
1 smartphones. The analysis reveals a nu
mber of new findings on the per&#45;app netw
ork performance and mobile DNS performan
ce. -->
<g id="node154" class="node">
<title>Crowdsourcing mobile user’s network pe
rformance has become an effective way of
 understanding and improving mobile netw
ork performance and user quality&#45;of&#45;expe
rience. However, the current measurement
 method is still based on the landline m
easurement paradigm in which a measureme
nt app measures the path to fixed (measu
rement or web) servers. In this work, we
 introduce a new paradigm of measuring p
er&#45;app mobile network performance. We de
sign and implement MopEye, an Android ap
p to measure network round&#45;trip delay fo
r each app whenever there is app traffic
. This opportunistic measurement can be 
conducted automatically without user int
ervention. Therefore, it can facilitate 
a large&#45;scale and long&#45;term crowdsourcin
g of mobile network performance. In the 
course of implementing MopEye, we have o
vercome a suite of challenges to make th
e continuous latency monitoring lightwei
ght and accurate. We have deployed MopEy
e to Google Play for an IRB&#45;approved cro
wdsourcing study in a period of ten mont
hs, which obtains over five million meas
urements from 6,266 Android apps on 2,35
1 smartphones. The analysis reveals a nu
mber of new findings on the per&#45;app netw
ork performance and mobile DNS performan
ce.</title>
<ellipse fill="none" stroke="#000000" cx="42838.022" cy="-461.0336" rx="189.9349" ry="312.5824"/>
<text text-anchor="middle" x="42838.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Crowdsourcing mobile user’s network pe</text>
<text text-anchor="middle" x="42838.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rformance has become an effective way of</text>
<text text-anchor="middle" x="42838.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> understanding and improving mobile netw</text>
<text text-anchor="middle" x="42838.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ork performance and user quality&#45;of&#45;expe</text>
<text text-anchor="middle" x="42838.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rience. However, the current measurement</text>
<text text-anchor="middle" x="42838.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> method is still based on the landline m</text>
<text text-anchor="middle" x="42838.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">easurement paradigm in which a measureme</text>
<text text-anchor="middle" x="42838.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nt app measures the path to fixed (measu</text>
<text text-anchor="middle" x="42838.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rement or web) servers. In this work, we</text>
<text text-anchor="middle" x="42838.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> introduce a new paradigm of measuring p</text>
<text text-anchor="middle" x="42838.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er&#45;app mobile network performance. We de</text>
<text text-anchor="middle" x="42838.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sign and implement MopEye, an Android ap</text>
<text text-anchor="middle" x="42838.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">p to measure network round&#45;trip delay fo</text>
<text text-anchor="middle" x="42838.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r each app whenever there is app traffic</text>
<text text-anchor="middle" x="42838.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. This opportunistic measurement can be </text>
<text text-anchor="middle" x="42838.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">conducted automatically without user int</text>
<text text-anchor="middle" x="42838.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ervention. Therefore, it can facilitate </text>
<text text-anchor="middle" x="42838.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a large&#45;scale and long&#45;term crowdsourcin</text>
<text text-anchor="middle" x="42838.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g of mobile network performance. In the </text>
<text text-anchor="middle" x="42838.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">course of implementing MopEye, we have o</text>
<text text-anchor="middle" x="42838.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vercome a suite of challenges to make th</text>
<text text-anchor="middle" x="42838.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e continuous latency monitoring lightwei</text>
<text text-anchor="middle" x="42838.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ght and accurate. We have deployed MopEy</text>
<text text-anchor="middle" x="42838.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e to Google Play for an IRB&#45;approved cro</text>
<text text-anchor="middle" x="42838.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">wdsourcing study in a period of ten mont</text>
<text text-anchor="middle" x="42838.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hs, which obtains over five million meas</text>
<text text-anchor="middle" x="42838.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">urements from 6,266 Android apps on 2,35</text>
<text text-anchor="middle" x="42838.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">1 smartphones. The analysis reveals a nu</text>
<text text-anchor="middle" x="42838.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mber of new findings on the per&#45;app netw</text>
<text text-anchor="middle" x="42838.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ork performance and mobile DNS performan</text>
<text text-anchor="middle" x="42838.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ce.</text>
</g>
<!-- 39&#45;&gt;Crowdsourcing mobile user’s network pe
rformance has become an effective way of
 understanding and improving mobile netw
ork performance and user quality&#45;of&#45;expe
rience. However, the current measurement
 method is still based on the landline m
easurement paradigm in which a measureme
nt app measures the path to fixed (measu
rement or web) servers. In this work, we
 introduce a new paradigm of measuring p
er&#45;app mobile network performance. We de
sign and implement MopEye, an Android ap
p to measure network round&#45;trip delay fo
r each app whenever there is app traffic
. This opportunistic measurement can be 
conducted automatically without user int
ervention. Therefore, it can facilitate 
a large&#45;scale and long&#45;term crowdsourcin
g of mobile network performance. In the 
course of implementing MopEye, we have o
vercome a suite of challenges to make th
e continuous latency monitoring lightwei
ght and accurate. We have deployed MopEy
e to Google Play for an IRB&#45;approved cro
wdsourcing study in a period of ten mont
hs, which obtains over five million meas
urements from 6,266 Android apps on 2,35
1 smartphones. The analysis reveals a nu
mber of new findings on the per&#45;app netw
ork performance and mobile DNS performan
ce. -->
<g id="edge160" class="edge">
<title>39&#45;&gt;Crowdsourcing mobile user’s network pe
rformance has become an effective way of
 understanding and improving mobile netw
ork performance and user quality&#45;of&#45;expe
rience. However, the current measurement
 method is still based on the landline m
easurement paradigm in which a measureme
nt app measures the path to fixed (measu
rement or web) servers. In this work, we
 introduce a new paradigm of measuring p
er&#45;app mobile network performance. We de
sign and implement MopEye, an Android ap
p to measure network round&#45;trip delay fo
r each app whenever there is app traffic
. This opportunistic measurement can be 
conducted automatically without user int
ervention. Therefore, it can facilitate 
a large&#45;scale and long&#45;term crowdsourcin
g of mobile network performance. In the 
course of implementing MopEye, we have o
vercome a suite of challenges to make th
e continuous latency monitoring lightwei
ght and accurate. We have deployed MopEy
e to Google Play for an IRB&#45;approved cro
wdsourcing study in a period of ten mont
hs, which obtains over five million meas
urements from 6,266 Android apps on 2,35
1 smartphones. The analysis reveals a nu
mber of new findings on the per&#45;app netw
ork performance and mobile DNS performan
ce.</title>
<path fill="none" stroke="#000000" d="M42262.8723,-974.0013C42348.1413,-967.2319 42608.9525,-944.8437 42639.022,-922.0672 42693.3353,-880.9271 42733.0332,-821.9355 42761.9776,-759.827"/>
<polygon fill="#000000" stroke="#000000" points="42765.2014,-761.193 42766.1705,-750.6426 42758.8336,-758.2859 42765.2014,-761.193"/>
</g>
<!-- Emu: Rapid Prototyping of Networking Ser
vices -->
<g id="node156" class="node">
<title>Emu: Rapid Prototyping of Networking Ser
vices</title>
<ellipse fill="none" stroke="#000000" cx="43230.022" cy="-461.0336" rx="184.03" ry="25.4118"/>
<text text-anchor="middle" x="43230.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Emu: Rapid Prototyping of Networking Ser</text>
<text text-anchor="middle" x="43230.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vices</text>
</g>
<!-- 40&#45;&gt;Emu: Rapid Prototyping of Networking Ser
vices -->
<g id="edge162" class="edge">
<title>40&#45;&gt;Emu: Rapid Prototyping of Networking Ser
vices</title>
<path fill="none" stroke="#000000" d="M43420.2408,-958.3386C43391.7911,-883.9602 43281.7679,-596.3173 43243.3508,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="43246.5985,-494.5739 43239.7568,-486.4843 43240.0604,-497.0747 43246.5985,-494.5739"/>
</g>
<!-- Nik Sultana, Salvator Galea, David Greav
es, Marcin Wojcik, and Jonny Shipton, Un
iversity of Cambridge; Richard Clegg, Qu
een Mary University of London; Luo Mai, 
Imperial College London; Pietro Bressana
 and Robert Soule, Università della Svi
zzera italiana; Richard Mortier, Univers
ity of Cambridge; Paolo Costa, Microsoft
 Research; Peter Pietzuch, Imperial Coll
ege London; Jon Crowcroft, Andrew W Moor
e, and Noa Zilberman, University of Camb
ridge -->
<g id="node157" class="node">
<title>Nik Sultana, Salvator Galea, David Greav
es, Marcin Wojcik, and Jonny Shipton, Un
iversity of Cambridge; Richard Clegg, Qu
een Mary University of London; Luo Mai, 
Imperial College London; Pietro Bressana
 and Robert Soule, Università della Svi
zzera italiana; Richard Mortier, Univers
ity of Cambridge; Paolo Costa, Microsoft
 Research; Peter Pietzuch, Imperial Coll
ege London; Jon Crowcroft, Andrew W Moor
e, and Noa Zilberman, University of Camb
ridge</title>
<ellipse fill="none" stroke="#000000" cx="43625.022" cy="-461.0336" rx="192.8996" ry="124.4016"/>
<text text-anchor="middle" x="43625.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Nik Sultana, Salvator Galea, David Greav</text>
<text text-anchor="middle" x="43625.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es, Marcin Wojcik, and Jonny Shipton, Un</text>
<text text-anchor="middle" x="43625.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iversity of Cambridge; Richard Clegg, Qu</text>
<text text-anchor="middle" x="43625.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">een Mary University of London; Luo Mai, </text>
<text text-anchor="middle" x="43625.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Imperial College London; Pietro Bressana</text>
<text text-anchor="middle" x="43625.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and Robert Soule, Università della Svi</text>
<text text-anchor="middle" x="43625.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">zzera italiana; Richard Mortier, Univers</text>
<text text-anchor="middle" x="43625.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ity of Cambridge; Paolo Costa, Microsoft</text>
<text text-anchor="middle" x="43625.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Research; Peter Pietzuch, Imperial Coll</text>
<text text-anchor="middle" x="43625.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ege London; Jon Crowcroft, Andrew W Moor</text>
<text text-anchor="middle" x="43625.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e, and Noa Zilberman, University of Camb</text>
<text text-anchor="middle" x="43625.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ridge</text>
</g>
<!-- 40&#45;&gt;Nik Sultana, Salvator Galea, David Greav
es, Marcin Wojcik, and Jonny Shipton, Un
iversity of Cambridge; Richard Clegg, Qu
een Mary University of London; Luo Mai, 
Imperial College London; Pietro Bressana
 and Robert Soule, Università della Svi
zzera italiana; Richard Mortier, Univers
ity of Cambridge; Paolo Costa, Microsoft
 Research; Peter Pietzuch, Imperial Coll
ege London; Jon Crowcroft, Andrew W Moor
e, and Noa Zilberman, University of Camb
ridge -->
<g id="edge163" class="edge">
<title>40&#45;&gt;Nik Sultana, Salvator Galea, David Greav
es, Marcin Wojcik, and Jonny Shipton, Un
iversity of Cambridge; Richard Clegg, Qu
een Mary University of London; Luo Mai, 
Imperial College London; Pietro Bressana
 and Robert Soule, Università della Svi
zzera italiana; Richard Mortier, Univers
ity of Cambridge; Paolo Costa, Microsoft
 Research; Peter Pietzuch, Imperial Coll
ege London; Jon Crowcroft, Andrew W Moor
e, and Noa Zilberman, University of Camb
ridge</title>
<path fill="none" stroke="#000000" d="M43433.8376,-958.3386C43455.7797,-901.2632 43526.0001,-718.6073 43574.9314,-591.3281"/>
<polygon fill="#000000" stroke="#000000" points="43578.2423,-592.4695 43578.5639,-581.8795 43571.7085,-589.9576 43578.2423,-592.4695"/>
</g>
<!-- Due to their performance and flexibility
, FPGAs are an attractive platform for t
he execution of network functions. It ha
s been a challenge for a long time thoug
h to make FPGA programming accessible to
 a large audience of developers. An appe
aling solution is to compile code from a
 general&#45;purpose language to hardware us
ing high&#45;level synthesis. Unfortunately,
 current approaches to implement rich ne
twork functionality are insufficient bec
ause they lack: (i) libraries with abstr
actions for common network operations an
d data structures, (ii) bindings to the 
underlying “substrate” on the FPGA, 
and (iii) debugging and profiling suppor
t.This paper describes Emu, a new standa
rd library for an FPGA hardware compiler
 that enables developers to rapidly crea
te and deploy network functionality. Emu
 allows for high&#45;performance designs wit
hout being bound to particular packet pr
ocessing paradigms. Furthermore, it supp
orts running the same programs on CPUs, 
in Mininet, and on FPGAs, providing a be
tter development environment that includ
es advanced debugging capabilities. We d
emonstrate that network functions implem
ented using Emu have only negligible res
ource and performance overheads compared
 with natively&#45;written hardware versions
. -->
<g id="node158" class="node">
<title>Due to their performance and flexibility
, FPGAs are an attractive platform for t
he execution of network functions. It ha
s been a challenge for a long time thoug
h to make FPGA programming accessible to
 a large audience of developers. An appe
aling solution is to compile code from a
 general&#45;purpose language to hardware us
ing high&#45;level synthesis. Unfortunately,
 current approaches to implement rich ne
twork functionality are insufficient bec
ause they lack: (i) libraries with abstr
actions for common network operations an
d data structures, (ii) bindings to the 
underlying “substrate” on the FPGA, 
and (iii) debugging and profiling suppor
t.This paper describes Emu, a new standa
rd library for an FPGA hardware compiler
 that enables developers to rapidly crea
te and deploy network functionality. Emu
 allows for high&#45;performance designs wit
hout being bound to particular packet pr
ocessing paradigms. Furthermore, it supp
orts running the same programs on CPUs, 
in Mininet, and on FPGAs, providing a be
tter development environment that includ
es advanced debugging capabilities. We d
emonstrate that network functions implem
ented using Emu have only negligible res
ource and performance overheads compared
 with natively&#45;written hardware versions
.</title>
<ellipse fill="none" stroke="#000000" cx="44022.022" cy="-461.0336" rx="186.9604" ry="322.3814"/>
<text text-anchor="middle" x="44022.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Due to their performance and flexibility</text>
<text text-anchor="middle" x="44022.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, FPGAs are an attractive platform for t</text>
<text text-anchor="middle" x="44022.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">he execution of network functions. It ha</text>
<text text-anchor="middle" x="44022.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s been a challenge for a long time thoug</text>
<text text-anchor="middle" x="44022.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h to make FPGA programming accessible to</text>
<text text-anchor="middle" x="44022.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a large audience of developers. An appe</text>
<text text-anchor="middle" x="44022.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aling solution is to compile code from a</text>
<text text-anchor="middle" x="44022.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> general&#45;purpose language to hardware us</text>
<text text-anchor="middle" x="44022.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing high&#45;level synthesis. Unfortunately,</text>
<text text-anchor="middle" x="44022.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> current approaches to implement rich ne</text>
<text text-anchor="middle" x="44022.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">twork functionality are insufficient bec</text>
<text text-anchor="middle" x="44022.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ause they lack: (i) libraries with abstr</text>
<text text-anchor="middle" x="44022.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">actions for common network operations an</text>
<text text-anchor="middle" x="44022.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d data structures, (ii) bindings to the </text>
<text text-anchor="middle" x="44022.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">underlying “substrate” on the FPGA, </text>
<text text-anchor="middle" x="44022.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and (iii) debugging and profiling suppor</text>
<text text-anchor="middle" x="44022.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t.This paper describes Emu, a new standa</text>
<text text-anchor="middle" x="44022.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rd library for an FPGA hardware compiler</text>
<text text-anchor="middle" x="44022.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> that enables developers to rapidly crea</text>
<text text-anchor="middle" x="44022.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">te and deploy network functionality. Emu</text>
<text text-anchor="middle" x="44022.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> allows for high&#45;performance designs wit</text>
<text text-anchor="middle" x="44022.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hout being bound to particular packet pr</text>
<text text-anchor="middle" x="44022.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ocessing paradigms. Furthermore, it supp</text>
<text text-anchor="middle" x="44022.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">orts running the same programs on CPUs, </text>
<text text-anchor="middle" x="44022.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">in Mininet, and on FPGAs, providing a be</text>
<text text-anchor="middle" x="44022.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tter development environment that includ</text>
<text text-anchor="middle" x="44022.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es advanced debugging capabilities. We d</text>
<text text-anchor="middle" x="44022.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">emonstrate that network functions implem</text>
<text text-anchor="middle" x="44022.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ented using Emu have only negligible res</text>
<text text-anchor="middle" x="44022.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ource and performance overheads compared</text>
<text text-anchor="middle" x="44022.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> with natively&#45;written hardware versions</text>
<text text-anchor="middle" x="44022.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">.</text>
</g>
<!-- 40&#45;&gt;Due to their performance and flexibility
, FPGAs are an attractive platform for t
he execution of network functions. It ha
s been a challenge for a long time thoug
h to make FPGA programming accessible to
 a large audience of developers. An appe
aling solution is to compile code from a
 general&#45;purpose language to hardware us
ing high&#45;level synthesis. Unfortunately,
 current approaches to implement rich ne
twork functionality are insufficient bec
ause they lack: (i) libraries with abstr
actions for common network operations an
d data structures, (ii) bindings to the 
underlying “substrate” on the FPGA, 
and (iii) debugging and profiling suppor
t.This paper describes Emu, a new standa
rd library for an FPGA hardware compiler
 that enables developers to rapidly crea
te and deploy network functionality. Emu
 allows for high&#45;performance designs wit
hout being bound to particular packet pr
ocessing paradigms. Furthermore, it supp
orts running the same programs on CPUs, 
in Mininet, and on FPGAs, providing a be
tter development environment that includ
es advanced debugging capabilities. We d
emonstrate that network functions implem
ented using Emu have only negligible res
ource and performance overheads compared
 with natively&#45;written hardware versions
. -->
<g id="edge164" class="edge">
<title>40&#45;&gt;Due to their performance and flexibility
, FPGAs are an attractive platform for t
he execution of network functions. It ha
s been a challenge for a long time thoug
h to make FPGA programming accessible to
 a large audience of developers. An appe
aling solution is to compile code from a
 general&#45;purpose language to hardware us
ing high&#45;level synthesis. Unfortunately,
 current approaches to implement rich ne
twork functionality are insufficient bec
ause they lack: (i) libraries with abstr
actions for common network operations an
d data structures, (ii) bindings to the 
underlying “substrate” on the FPGA, 
and (iii) debugging and profiling suppor
t.This paper describes Emu, a new standa
rd library for an FPGA hardware compiler
 that enables developers to rapidly crea
te and deploy network functionality. Emu
 allows for high&#45;performance designs wit
hout being bound to particular packet pr
ocessing paradigms. Furthermore, it supp
orts running the same programs on CPUs, 
in Mininet, and on FPGAs, providing a be
tter development environment that includ
es advanced debugging capabilities. We d
emonstrate that network functions implem
ented using Emu have only negligible res
ource and performance overheads compared
 with natively&#45;written hardware versions
.</title>
<path fill="none" stroke="#000000" d="M43453.9776,-973.974C43538.9419,-967.1654 43797.3016,-944.7746 43827.022,-922.0672 43878.7488,-882.5464 43916.8999,-826.6825 43944.9912,-767.4228"/>
<polygon fill="#000000" stroke="#000000" points="43948.2033,-768.8157 43949.2383,-758.2715 43941.8538,-765.8688 43948.2033,-768.8157"/>
</g>
<!-- Protego: Cloud&#45;Scale Multitenant IPsec G
ateway -->
<g id="node160" class="node">
<title>Protego: Cloud&#45;Scale Multitenant IPsec G
ateway</title>
<ellipse fill="none" stroke="#000000" cx="44405.022" cy="-461.0336" rx="178.4577" ry="25.4118"/>
<text text-anchor="middle" x="44405.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Protego: Cloud&#45;Scale Multitenant IPsec G</text>
<text text-anchor="middle" x="44405.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ateway</text>
</g>
<!-- 41&#45;&gt;Protego: Cloud&#45;Scale Multitenant IPsec G
ateway -->
<g id="edge166" class="edge">
<title>41&#45;&gt;Protego: Cloud&#45;Scale Multitenant IPsec G
ateway</title>
<path fill="none" stroke="#000000" d="M44590.4129,-958.3386C44562.6853,-883.9602 44455.4546,-596.3173 44418.0125,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="44421.2824,-494.6317 44414.5098,-486.4843 44414.7234,-497.0769 44421.2824,-494.6317"/>
</g>
<!-- Jeongseok Son, KAIST and Microsoft Resea
rch; Yongqiang Xiong, Microsoft Research
; Kun Tan, Huawei; Paul Wang and Ze Gan,
 Microsoft Research; Sue Moon, KAIST -->
<g id="node161" class="node">
<title>Jeongseok Son, KAIST and Microsoft Resea
rch; Yongqiang Xiong, Microsoft Research
; Kun Tan, Huawei; Paul Wang and Ze Gan,
 Microsoft Research; Sue Moon, KAIST</title>
<ellipse fill="none" stroke="#000000" cx="44790.022" cy="-461.0336" rx="188.5111" ry="45.011"/>
<text text-anchor="middle" x="44790.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Jeongseok Son, KAIST and Microsoft Resea</text>
<text text-anchor="middle" x="44790.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rch; Yongqiang Xiong, Microsoft Research</text>
<text text-anchor="middle" x="44790.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">; Kun Tan, Huawei; Paul Wang and Ze Gan,</text>
<text text-anchor="middle" x="44790.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Microsoft Research; Sue Moon, KAIST</text>
</g>
<!-- 41&#45;&gt;Jeongseok Son, KAIST and Microsoft Resea
rch; Yongqiang Xiong, Microsoft Research
; Kun Tan, Huawei; Paul Wang and Ze Gan,
 Microsoft Research; Sue Moon, KAIST -->
<g id="edge167" class="edge">
<title>41&#45;&gt;Jeongseok Son, KAIST and Microsoft Resea
rch; Yongqiang Xiong, Microsoft Research
; Kun Tan, Huawei; Paul Wang and Ze Gan,
 Microsoft Research; Sue Moon, KAIST</title>
<path fill="none" stroke="#000000" d="M44603.6655,-958.3386C44629.8788,-888.3865 44726.7806,-629.7974 44769.5307,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="44772.8959,-516.7098 44773.1276,-506.1175 44766.341,-514.2534 44772.8959,-516.7098"/>
</g>
<!-- Virtual cloud network services let users
 have their own private networks in the 
public cloud. IPsec gateways are growing
 in importance accordingly as they provi
de VPN connections for customers to remo
tely access these private networks. Majo
r cloud providers offer IPsec gateway fu
nctions to tenants using virtual machine
s (VMs) running a software IPsec gateway
 inside. However, dedicating individual 
IPsec gateway VMs to each tenant results
 in significant resource waste due to th
e strong isolation mechanism of VMs.In t
his paper, we design Protego, a distribu
ted IPsec gateway service designed for m
ultitenancy. By separating the control p
lane and the data plane of an IPsec gate
way, Protego achieves high availability 
with active redundancy. Furthermore, Pro
tego elastically scales in and out by se
amlessly migrating IPsec tunnels between
 the data nodes without compromising the
ir throughput. Our evaluation and simula
tion based on production data show that 
Protego together with a simple resource 
provisioning algorithm saves more than 8
0% of the resources compared with alloca
ting independent VMs. -->
<g id="node162" class="node">
<title>Virtual cloud network services let users
 have their own private networks in the 
public cloud. IPsec gateways are growing
 in importance accordingly as they provi
de VPN connections for customers to remo
tely access these private networks. Majo
r cloud providers offer IPsec gateway fu
nctions to tenants using virtual machine
s (VMs) running a software IPsec gateway
 inside. However, dedicating individual 
IPsec gateway VMs to each tenant results
 in significant resource waste due to th
e strong isolation mechanism of VMs.In t
his paper, we design Protego, a distribu
ted IPsec gateway service designed for m
ultitenancy. By separating the control p
lane and the data plane of an IPsec gate
way, Protego achieves high availability 
with active redundancy. Furthermore, Pro
tego elastically scales in and out by se
amlessly migrating IPsec tunnels between
 the data nodes without compromising the
ir throughput. Our evaluation and simula
tion based on production data show that 
Protego together with a simple resource 
provisioning algorithm saves more than 8
0% of the resources compared with alloca
ting independent VMs.</title>
<ellipse fill="none" stroke="#000000" cx="45179.022" cy="-461.0336" rx="182.2858" ry="282.6855"/>
<text text-anchor="middle" x="45179.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Virtual cloud network services let users</text>
<text text-anchor="middle" x="45179.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> have their own private networks in the </text>
<text text-anchor="middle" x="45179.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">public cloud. IPsec gateways are growing</text>
<text text-anchor="middle" x="45179.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in importance accordingly as they provi</text>
<text text-anchor="middle" x="45179.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">de VPN connections for customers to remo</text>
<text text-anchor="middle" x="45179.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tely access these private networks. Majo</text>
<text text-anchor="middle" x="45179.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r cloud providers offer IPsec gateway fu</text>
<text text-anchor="middle" x="45179.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nctions to tenants using virtual machine</text>
<text text-anchor="middle" x="45179.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s (VMs) running a software IPsec gateway</text>
<text text-anchor="middle" x="45179.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> inside. However, dedicating individual </text>
<text text-anchor="middle" x="45179.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">IPsec gateway VMs to each tenant results</text>
<text text-anchor="middle" x="45179.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in significant resource waste due to th</text>
<text text-anchor="middle" x="45179.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e strong isolation mechanism of VMs.In t</text>
<text text-anchor="middle" x="45179.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">his paper, we design Protego, a distribu</text>
<text text-anchor="middle" x="45179.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ted IPsec gateway service designed for m</text>
<text text-anchor="middle" x="45179.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ultitenancy. By separating the control p</text>
<text text-anchor="middle" x="45179.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lane and the data plane of an IPsec gate</text>
<text text-anchor="middle" x="45179.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">way, Protego achieves high availability </text>
<text text-anchor="middle" x="45179.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">with active redundancy. Furthermore, Pro</text>
<text text-anchor="middle" x="45179.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tego elastically scales in and out by se</text>
<text text-anchor="middle" x="45179.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">amlessly migrating IPsec tunnels between</text>
<text text-anchor="middle" x="45179.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> the data nodes without compromising the</text>
<text text-anchor="middle" x="45179.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ir throughput. Our evaluation and simula</text>
<text text-anchor="middle" x="45179.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion based on production data show that </text>
<text text-anchor="middle" x="45179.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Protego together with a simple resource </text>
<text text-anchor="middle" x="45179.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">provisioning algorithm saves more than 8</text>
<text text-anchor="middle" x="45179.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">0% of the resources compared with alloca</text>
<text text-anchor="middle" x="45179.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ting independent VMs.</text>
</g>
<!-- 41&#45;&gt;Virtual cloud network services let users
 have their own private networks in the 
public cloud. IPsec gateways are growing
 in importance accordingly as they provi
de VPN connections for customers to remo
tely access these private networks. Majo
r cloud providers offer IPsec gateway fu
nctions to tenants using virtual machine
s (VMs) running a software IPsec gateway
 inside. However, dedicating individual 
IPsec gateway VMs to each tenant results
 in significant resource waste due to th
e strong isolation mechanism of VMs.In t
his paper, we design Protego, a distribu
ted IPsec gateway service designed for m
ultitenancy. By separating the control p
lane and the data plane of an IPsec gate
way, Protego achieves high availability 
with active redundancy. Furthermore, Pro
tego elastically scales in and out by se
amlessly migrating IPsec tunnels between
 the data nodes without compromising the
ir throughput. Our evaluation and simula
tion based on production data show that 
Protego together with a simple resource 
provisioning algorithm saves more than 8
0% of the resources compared with alloca
ting independent VMs. -->
<g id="edge168" class="edge">
<title>41&#45;&gt;Virtual cloud network services let users
 have their own private networks in the 
public cloud. IPsec gateways are growing
 in importance accordingly as they provi
de VPN connections for customers to remo
tely access these private networks. Majo
r cloud providers offer IPsec gateway fu
nctions to tenants using virtual machine
s (VMs) running a software IPsec gateway
 inside. However, dedicating individual 
IPsec gateway VMs to each tenant results
 in significant resource waste due to th
e strong isolation mechanism of VMs.In t
his paper, we design Protego, a distribu
ted IPsec gateway service designed for m
ultitenancy. By separating the control p
lane and the data plane of an IPsec gate
way, Protego achieves high availability 
with active redundancy. Furthermore, Pro
tego elastically scales in and out by se
amlessly migrating IPsec tunnels between
 the data nodes without compromising the
ir throughput. Our evaluation and simula
tion based on production data show that 
Protego together with a simple resource 
provisioning algorithm saves more than 8
0% of the resources compared with alloca
ting independent VMs.</title>
<path fill="none" stroke="#000000" d="M44624.2764,-975.734C44703.368,-974.2488 44930.9403,-966.1529 44988.022,-922.0672 45047.5739,-876.0737 45088.7023,-808.224 45117.0536,-738.6416"/>
<polygon fill="#000000" stroke="#000000" points="45120.3414,-739.8457 45120.7956,-729.2606 45113.8396,-737.2522 45120.3414,-739.8457"/>
</g>
<!-- Cache Modeling and Optimization using Mi
niature Simulations -->
<g id="node164" class="node">
<title>Cache Modeling and Optimization using Mi
niature Simulations</title>
<ellipse fill="none" stroke="#000000" cx="45566.022" cy="-461.0336" rx="186.4091" ry="25.4118"/>
<text text-anchor="middle" x="45566.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Cache Modeling and Optimization using Mi</text>
<text text-anchor="middle" x="45566.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">niature Simulations</text>
</g>
<!-- 42&#45;&gt;Cache Modeling and Optimization using Mi
niature Simulations -->
<g id="edge170" class="edge">
<title>42&#45;&gt;Cache Modeling and Optimization using Mi
niature Simulations</title>
<path fill="none" stroke="#000000" d="M45752.3785,-958.3386C45724.5065,-883.9602 45616.7172,-596.3173 45579.0802,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="45582.3457,-494.6202 45575.5592,-486.4843 45575.7908,-497.0766 45582.3457,-494.6202"/>
</g>
<!-- Carl Waldspurger, Trausti Saemundsson, a
nd Irfan Ahmad, CachePhysics, Inc.; Nohh
yun Park, Datos IO, Inc.Awarded Best Pap
er! -->
<g id="node165" class="node">
<title>Carl Waldspurger, Trausti Saemundsson, a
nd Irfan Ahmad, CachePhysics, Inc.; Nohh
yun Park, Datos IO, Inc.Awarded Best Pap
er!</title>
<ellipse fill="none" stroke="#000000" cx="45952.022" cy="-461.0336" rx="181.4491" ry="45.011"/>
<text text-anchor="middle" x="45952.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Carl Waldspurger, Trausti Saemundsson, a</text>
<text text-anchor="middle" x="45952.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd Irfan Ahmad, CachePhysics, Inc.; Nohh</text>
<text text-anchor="middle" x="45952.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">yun Park, Datos IO, Inc.Awarded Best Pap</text>
<text text-anchor="middle" x="45952.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er!</text>
</g>
<!-- 42&#45;&gt;Carl Waldspurger, Trausti Saemundsson, a
nd Irfan Ahmad, CachePhysics, Inc.; Nohh
yun Park, Datos IO, Inc.Awarded Best Pap
er! -->
<g id="edge171" class="edge">
<title>42&#45;&gt;Carl Waldspurger, Trausti Saemundsson, a
nd Irfan Ahmad, CachePhysics, Inc.; Nohh
yun Park, Datos IO, Inc.Awarded Best Pap
er!</title>
<path fill="none" stroke="#000000" d="M45765.6655,-958.3386C45791.8788,-888.3865 45888.7806,-629.7974 45931.5307,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="45934.8959,-516.7098 45935.1276,-506.1175 45928.341,-514.2534 45934.8959,-516.7098"/>
</g>
<!-- Recent approximation algorithms (e.g., C
ounterStacks, SHARDS and AET) make light
weight, continuously&#45;updated miss ratio 
curves (MRCs) practical for online model
ing and control of LRU caches. For more 
complex cache&#45;replacement policies, scal
ed&#45;down simulation, introduced with SHAR
DS, offers a general method for emulatin
g a given cache size by using a miniatur
e cache processing a small spatially&#45;has
hed sample of requests.We present the fi
rst detailed study evaluating the effect
iveness of this approach for modeling no
n&#45;LRU algorithms, including ARC, LIRS an
d OPT. Experiments with over a hundred r
eal&#45;world traces demonstrate that scaled
&#45;down MRCs are extremely accurate while 
requiring dramatically less space and ti
me than full simulation.We propose an ef
ficient, generic framework for dynamic o
ptimization using multiple scaled&#45;down s
imulations to explore candidate cache co
nfigurations simultaneously. Experiments
 demonstrate significant improvements fr
om automatic adaptation of parameters in
cluding the stack size limit in LIRS, an
d queue sizes in 2Q.Finally, we introduc
e SLIDE, a new approach inspired by Talu
s that uses scaled&#45;down MRCs to remove p
erformance cliffs automatically. SLIDE p
erforms shadow partitioning transparentl
y within a single unified cache, avoidin
g the problem of migrating state between
 distinct caches when partition boundari
es change. Experiments demonstrate that 
SLIDE improves miss ratios for many cach
e policies, with large gains in the pres
ence of cliffs. -->
<g id="node166" class="node">
<title>Recent approximation algorithms (e.g., C
ounterStacks, SHARDS and AET) make light
weight, continuously&#45;updated miss ratio 
curves (MRCs) practical for online model
ing and control of LRU caches. For more 
complex cache&#45;replacement policies, scal
ed&#45;down simulation, introduced with SHAR
DS, offers a general method for emulatin
g a given cache size by using a miniatur
e cache processing a small spatially&#45;has
hed sample of requests.We present the fi
rst detailed study evaluating the effect
iveness of this approach for modeling no
n&#45;LRU algorithms, including ARC, LIRS an
d OPT. Experiments with over a hundred r
eal&#45;world traces demonstrate that scaled
&#45;down MRCs are extremely accurate while 
requiring dramatically less space and ti
me than full simulation.We propose an ef
ficient, generic framework for dynamic o
ptimization using multiple scaled&#45;down s
imulations to explore candidate cache co
nfigurations simultaneously. Experiments
 demonstrate significant improvements fr
om automatic adaptation of parameters in
cluding the stack size limit in LIRS, an
d queue sizes in 2Q.Finally, we introduc
e SLIDE, a new approach inspired by Talu
s that uses scaled&#45;down MRCs to remove p
erformance cliffs automatically. SLIDE p
erforms shadow partitioning transparentl
y within a single unified cache, avoidin
g the problem of migrating state between
 distinct caches when partition boundari
es change. Experiments demonstrate that 
SLIDE improves miss ratios for many cach
e policies, with large gains in the pres
ence of cliffs.</title>
<ellipse fill="none" stroke="#000000" cx="46343.022" cy="-461.0336" rx="192.4813" ry="381.6754"/>
<text text-anchor="middle" x="46343.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Recent approximation algorithms (e.g., C</text>
<text text-anchor="middle" x="46343.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ounterStacks, SHARDS and AET) make light</text>
<text text-anchor="middle" x="46343.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">weight, continuously&#45;updated miss ratio </text>
<text text-anchor="middle" x="46343.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">curves (MRCs) practical for online model</text>
<text text-anchor="middle" x="46343.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing and control of LRU caches. For more </text>
<text text-anchor="middle" x="46343.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">complex cache&#45;replacement policies, scal</text>
<text text-anchor="middle" x="46343.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed&#45;down simulation, introduced with SHAR</text>
<text text-anchor="middle" x="46343.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">DS, offers a general method for emulatin</text>
<text text-anchor="middle" x="46343.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g a given cache size by using a miniatur</text>
<text text-anchor="middle" x="46343.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e cache processing a small spatially&#45;has</text>
<text text-anchor="middle" x="46343.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hed sample of requests.We present the fi</text>
<text text-anchor="middle" x="46343.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rst detailed study evaluating the effect</text>
<text text-anchor="middle" x="46343.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iveness of this approach for modeling no</text>
<text text-anchor="middle" x="46343.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n&#45;LRU algorithms, including ARC, LIRS an</text>
<text text-anchor="middle" x="46343.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d OPT. Experiments with over a hundred r</text>
<text text-anchor="middle" x="46343.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eal&#45;world traces demonstrate that scaled</text>
<text text-anchor="middle" x="46343.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;down MRCs are extremely accurate while </text>
<text text-anchor="middle" x="46343.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">requiring dramatically less space and ti</text>
<text text-anchor="middle" x="46343.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">me than full simulation.We propose an ef</text>
<text text-anchor="middle" x="46343.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ficient, generic framework for dynamic o</text>
<text text-anchor="middle" x="46343.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ptimization using multiple scaled&#45;down s</text>
<text text-anchor="middle" x="46343.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">imulations to explore candidate cache co</text>
<text text-anchor="middle" x="46343.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nfigurations simultaneously. Experiments</text>
<text text-anchor="middle" x="46343.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> demonstrate significant improvements fr</text>
<text text-anchor="middle" x="46343.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">om automatic adaptation of parameters in</text>
<text text-anchor="middle" x="46343.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cluding the stack size limit in LIRS, an</text>
<text text-anchor="middle" x="46343.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d queue sizes in 2Q.Finally, we introduc</text>
<text text-anchor="middle" x="46343.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e SLIDE, a new approach inspired by Talu</text>
<text text-anchor="middle" x="46343.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s that uses scaled&#45;down MRCs to remove p</text>
<text text-anchor="middle" x="46343.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erformance cliffs automatically. SLIDE p</text>
<text text-anchor="middle" x="46343.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erforms shadow partitioning transparentl</text>
<text text-anchor="middle" x="46343.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y within a single unified cache, avoidin</text>
<text text-anchor="middle" x="46343.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g the problem of migrating state between</text>
<text text-anchor="middle" x="46343.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> distinct caches when partition boundari</text>
<text text-anchor="middle" x="46343.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es change. Experiments demonstrate that </text>
<text text-anchor="middle" x="46343.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SLIDE improves miss ratios for many cach</text>
<text text-anchor="middle" x="46343.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e policies, with large gains in the pres</text>
<text text-anchor="middle" x="46343.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ence of cliffs.</text>
</g>
<!-- 42&#45;&gt;Recent approximation algorithms (e.g., C
ounterStacks, SHARDS and AET) make light
weight, continuously&#45;updated miss ratio 
curves (MRCs) practical for online model
ing and control of LRU caches. For more 
complex cache&#45;replacement policies, scal
ed&#45;down simulation, introduced with SHAR
DS, offers a general method for emulatin
g a given cache size by using a miniatur
e cache processing a small spatially&#45;has
hed sample of requests.We present the fi
rst detailed study evaluating the effect
iveness of this approach for modeling no
n&#45;LRU algorithms, including ARC, LIRS an
d OPT. Experiments with over a hundred r
eal&#45;world traces demonstrate that scaled
&#45;down MRCs are extremely accurate while 
requiring dramatically less space and ti
me than full simulation.We propose an ef
ficient, generic framework for dynamic o
ptimization using multiple scaled&#45;down s
imulations to explore candidate cache co
nfigurations simultaneously. Experiments
 demonstrate significant improvements fr
om automatic adaptation of parameters in
cluding the stack size limit in LIRS, an
d queue sizes in 2Q.Finally, we introduc
e SLIDE, a new approach inspired by Talu
s that uses scaled&#45;down MRCs to remove p
erformance cliffs automatically. SLIDE p
erforms shadow partitioning transparentl
y within a single unified cache, avoidin
g the problem of migrating state between
 distinct caches when partition boundari
es change. Experiments demonstrate that 
SLIDE improves miss ratios for many cach
e policies, with large gains in the pres
ence of cliffs. -->
<g id="edge172" class="edge">
<title>42&#45;&gt;Recent approximation algorithms (e.g., C
ounterStacks, SHARDS and AET) make light
weight, continuously&#45;updated miss ratio 
curves (MRCs) practical for online model
ing and control of LRU caches. For more 
complex cache&#45;replacement policies, scal
ed&#45;down simulation, introduced with SHAR
DS, offers a general method for emulatin
g a given cache size by using a miniatur
e cache processing a small spatially&#45;has
hed sample of requests.We present the fi
rst detailed study evaluating the effect
iveness of this approach for modeling no
n&#45;LRU algorithms, including ARC, LIRS an
d OPT. Experiments with over a hundred r
eal&#45;world traces demonstrate that scaled
&#45;down MRCs are extremely accurate while 
requiring dramatically less space and ti
me than full simulation.We propose an ef
ficient, generic framework for dynamic o
ptimization using multiple scaled&#45;down s
imulations to explore candidate cache co
nfigurations simultaneously. Experiments
 demonstrate significant improvements fr
om automatic adaptation of parameters in
cluding the stack size limit in LIRS, an
d queue sizes in 2Q.Finally, we introduc
e SLIDE, a new approach inspired by Talu
s that uses scaled&#45;down MRCs to remove p
erformance cliffs automatically. SLIDE p
erforms shadow partitioning transparentl
y within a single unified cache, avoidin
g the problem of migrating state between
 distinct caches when partition boundari
es change. Experiments demonstrate that 
SLIDE improves miss ratios for many cach
e policies, with large gains in the pres
ence of cliffs.</title>
<path fill="none" stroke="#000000" d="M45786.2389,-975.5957C45864.1225,-973.7366 46085.8858,-964.7304 46142.022,-922.0672 46183.6567,-890.4251 46216.8117,-848.3554 46243.176,-802.4689"/>
<polygon fill="#000000" stroke="#000000" points="46246.3398,-803.9832 46248.1892,-793.551 46240.2378,-800.5529 46246.3398,-803.9832"/>
</g>
<!-- Hyperbolic Caching: Flexible Caching for
 Web Applications -->
<g id="node168" class="node">
<title>Hyperbolic Caching: Flexible Caching for
 Web Applications</title>
<ellipse fill="none" stroke="#000000" cx="46732.022" cy="-461.0336" rx="178.4287" ry="25.4118"/>
<text text-anchor="middle" x="46732.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Hyperbolic Caching: Flexible Caching for</text>
<text text-anchor="middle" x="46732.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Web Applications</text>
</g>
<!-- 43&#45;&gt;Hyperbolic Caching: Flexible Caching for
 Web Applications -->
<g id="edge174" class="edge">
<title>43&#45;&gt;Hyperbolic Caching: Flexible Caching for
 Web Applications</title>
<path fill="none" stroke="#000000" d="M46913.5506,-958.3386C46886.4006,-883.9602 46781.4039,-596.3173 46744.7419,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="46748.0289,-494.6778 46741.3121,-486.4843 46741.4533,-497.0782 46748.0289,-494.6778"/>
</g>
<!-- Aaron Blankstein, Princeton University; 
Siddhartha Sen, Microsoft Research; Mich
ael J. Freedman, Princeton University -->
<g id="node169" class="node">
<title>Aaron Blankstein, Princeton University; 
Siddhartha Sen, Microsoft Research; Mich
ael J. Freedman, Princeton University</title>
<ellipse fill="none" stroke="#000000" cx="47109.022" cy="-461.0336" rx="180.2861" ry="35.2113"/>
<text text-anchor="middle" x="47109.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Aaron Blankstein, Princeton University; </text>
<text text-anchor="middle" x="47109.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Siddhartha Sen, Microsoft Research; Mich</text>
<text text-anchor="middle" x="47109.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ael J. Freedman, Princeton University</text>
</g>
<!-- 43&#45;&gt;Aaron Blankstein, Princeton University; 
Siddhartha Sen, Microsoft Research; Mich
ael J. Freedman, Princeton University -->
<g id="edge175" class="edge">
<title>43&#45;&gt;Aaron Blankstein, Princeton University; 
Siddhartha Sen, Microsoft Research; Mich
ael J. Freedman, Princeton University</title>
<path fill="none" stroke="#000000" d="M46926.5278,-958.3386C46952.9331,-886.383 47052.5838,-614.8303 47092.4191,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="47095.8116,-507.1919 47095.971,-496.5982 47089.2401,-504.7803 47095.8116,-507.1919"/>
</g>
<!-- Today’s web applications rely heavily 
on caching to reduce latency and backend
 load, using services like Redis or Memc
ached that employ inflexible caching alg
orithms. But the needs of each applicati
on vary, and significant performance gai
ns can be achieved with a tailored strat
egy, e.g., incorporating cost of fetchin
g, expiration time, and so forth. Existi
ng strategies are fundamentally limited,
 however, because they rely on data stru
ctures to maintain a total ordering of t
he cached items.Inspired by Redis’s us
e of random sampling for eviction (in li
eu of a data structure) and recent theor
etical justification for this approach, 
we design a new caching algorithm for we
b applications called hyperbolic caching
. Unlike prior schemes, hyperbolic cachi
ng decays item priorities at variable ra
tes and continuously reorders many items
 at once. By combining random sampling w
ith lazy evaluation of the hyperbolic pr
iority function, we gain complete flexib
ility in customizing the function. For e
xample, we describe extensions that inco
rporate item cost, expiration time, and 
windowing. We also introduce the notion 
of a cost class in order to measure the 
costs and manipulate the priorities of a
ll items belonging to a related group.We
 design a hyperbolic caching variant for
 several production systems from leading
 cloud providers. We implement our schem
e in Redis and the Django web framework.
 Using real and simulated traces, we sho
w that hyperbolic caching reduces miss r
ates by ~10&#45;20% over competitive baselin
es tailored to the application, and impr
oves end&#45;toend throughput by ~5&#45;10%. -->
<g id="node170" class="node">
<title>Today’s web applications rely heavily 
on caching to reduce latency and backend
 load, using services like Redis or Memc
ached that employ inflexible caching alg
orithms. But the needs of each applicati
on vary, and significant performance gai
ns can be achieved with a tailored strat
egy, e.g., incorporating cost of fetchin
g, expiration time, and so forth. Existi
ng strategies are fundamentally limited,
 however, because they rely on data stru
ctures to maintain a total ordering of t
he cached items.Inspired by Redis’s us
e of random sampling for eviction (in li
eu of a data structure) and recent theor
etical justification for this approach, 
we design a new caching algorithm for we
b applications called hyperbolic caching
. Unlike prior schemes, hyperbolic cachi
ng decays item priorities at variable ra
tes and continuously reorders many items
 at once. By combining random sampling w
ith lazy evaluation of the hyperbolic pr
iority function, we gain complete flexib
ility in customizing the function. For e
xample, we describe extensions that inco
rporate item cost, expiration time, and 
windowing. We also introduce the notion 
of a cost class in order to measure the 
costs and manipulate the priorities of a
ll items belonging to a related group.We
 design a hyperbolic caching variant for
 several production systems from leading
 cloud providers. We implement our schem
e in Redis and the Django web framework.
 Using real and simulated traces, we sho
w that hyperbolic caching reduces miss r
ates by ~10&#45;20% over competitive baselin
es tailored to the application, and impr
oves end&#45;toend throughput by ~5&#45;10%.</title>
<ellipse fill="none" stroke="#000000" cx="47492.022" cy="-461.0336" rx="184.5517" ry="401.7733"/>
<text text-anchor="middle" x="47492.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Today’s web applications rely heavily </text>
<text text-anchor="middle" x="47492.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on caching to reduce latency and backend</text>
<text text-anchor="middle" x="47492.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> load, using services like Redis or Memc</text>
<text text-anchor="middle" x="47492.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ached that employ inflexible caching alg</text>
<text text-anchor="middle" x="47492.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">orithms. But the needs of each applicati</text>
<text text-anchor="middle" x="47492.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on vary, and significant performance gai</text>
<text text-anchor="middle" x="47492.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns can be achieved with a tailored strat</text>
<text text-anchor="middle" x="47492.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">egy, e.g., incorporating cost of fetchin</text>
<text text-anchor="middle" x="47492.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g, expiration time, and so forth. Existi</text>
<text text-anchor="middle" x="47492.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng strategies are fundamentally limited,</text>
<text text-anchor="middle" x="47492.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> however, because they rely on data stru</text>
<text text-anchor="middle" x="47492.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ctures to maintain a total ordering of t</text>
<text text-anchor="middle" x="47492.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">he cached items.Inspired by Redis’s us</text>
<text text-anchor="middle" x="47492.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e of random sampling for eviction (in li</text>
<text text-anchor="middle" x="47492.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eu of a data structure) and recent theor</text>
<text text-anchor="middle" x="47492.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">etical justification for this approach, </text>
<text text-anchor="middle" x="47492.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">we design a new caching algorithm for we</text>
<text text-anchor="middle" x="47492.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">b applications called hyperbolic caching</text>
<text text-anchor="middle" x="47492.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. Unlike prior schemes, hyperbolic cachi</text>
<text text-anchor="middle" x="47492.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng decays item priorities at variable ra</text>
<text text-anchor="middle" x="47492.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tes and continuously reorders many items</text>
<text text-anchor="middle" x="47492.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> at once. By combining random sampling w</text>
<text text-anchor="middle" x="47492.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ith lazy evaluation of the hyperbolic pr</text>
<text text-anchor="middle" x="47492.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iority function, we gain complete flexib</text>
<text text-anchor="middle" x="47492.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ility in customizing the function. For e</text>
<text text-anchor="middle" x="47492.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">xample, we describe extensions that inco</text>
<text text-anchor="middle" x="47492.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rporate item cost, expiration time, and </text>
<text text-anchor="middle" x="47492.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">windowing. We also introduce the notion </text>
<text text-anchor="middle" x="47492.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of a cost class in order to measure the </text>
<text text-anchor="middle" x="47492.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">costs and manipulate the priorities of a</text>
<text text-anchor="middle" x="47492.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ll items belonging to a related group.We</text>
<text text-anchor="middle" x="47492.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> design a hyperbolic caching variant for</text>
<text text-anchor="middle" x="47492.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> several production systems from leading</text>
<text text-anchor="middle" x="47492.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> cloud providers. We implement our schem</text>
<text text-anchor="middle" x="47492.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e in Redis and the Django web framework.</text>
<text text-anchor="middle" x="47492.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Using real and simulated traces, we sho</text>
<text text-anchor="middle" x="47492.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">w that hyperbolic caching reduces miss r</text>
<text text-anchor="middle" x="47492.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ates by ~10&#45;20% over competitive baselin</text>
<text text-anchor="middle" x="47492.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es tailored to the application, and impr</text>
<text text-anchor="middle" x="47492.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oves end&#45;toend throughput by ~5&#45;10%.</text>
</g>
<!-- 43&#45;&gt;Today’s web applications rely heavily 
on caching to reduce latency and backend
 load, using services like Redis or Memc
ached that employ inflexible caching alg
orithms. But the needs of each applicati
on vary, and significant performance gai
ns can be achieved with a tailored strat
egy, e.g., incorporating cost of fetchin
g, expiration time, and so forth. Existi
ng strategies are fundamentally limited,
 however, because they rely on data stru
ctures to maintain a total ordering of t
he cached items.Inspired by Redis’s us
e of random sampling for eviction (in li
eu of a data structure) and recent theor
etical justification for this approach, 
we design a new caching algorithm for we
b applications called hyperbolic caching
. Unlike prior schemes, hyperbolic cachi
ng decays item priorities at variable ra
tes and continuously reorders many items
 at once. By combining random sampling w
ith lazy evaluation of the hyperbolic pr
iority function, we gain complete flexib
ility in customizing the function. For e
xample, we describe extensions that inco
rporate item cost, expiration time, and 
windowing. We also introduce the notion 
of a cost class in order to measure the 
costs and manipulate the priorities of a
ll items belonging to a related group.We
 design a hyperbolic caching variant for
 several production systems from leading
 cloud providers. We implement our schem
e in Redis and the Django web framework.
 Using real and simulated traces, we sho
w that hyperbolic caching reduces miss r
ates by ~10&#45;20% over competitive baselin
es tailored to the application, and impr
oves end&#45;toend throughput by ~5&#45;10%. -->
<g id="edge176" class="edge">
<title>43&#45;&gt;Today’s web applications rely heavily 
on caching to reduce latency and backend
 load, using services like Redis or Memc
ached that employ inflexible caching alg
orithms. But the needs of each applicati
on vary, and significant performance gai
ns can be achieved with a tailored strat
egy, e.g., incorporating cost of fetchin
g, expiration time, and so forth. Existi
ng strategies are fundamentally limited,
 however, because they rely on data stru
ctures to maintain a total ordering of t
he cached items.Inspired by Redis’s us
e of random sampling for eviction (in li
eu of a data structure) and recent theor
etical justification for this approach, 
we design a new caching algorithm for we
b applications called hyperbolic caching
. Unlike prior schemes, hyperbolic cachi
ng decays item priorities at variable ra
tes and continuously reorders many items
 at once. By combining random sampling w
ith lazy evaluation of the hyperbolic pr
iority function, we gain complete flexib
ility in customizing the function. For e
xample, we describe extensions that inco
rporate item cost, expiration time, and 
windowing. We also introduce the notion 
of a cost class in order to measure the 
costs and manipulate the priorities of a
ll items belonging to a related group.We
 design a hyperbolic caching variant for
 several production systems from leading
 cloud providers. We implement our schem
e in Redis and the Django web framework.
 Using real and simulated traces, we sho
w that hyperbolic caching reduces miss r
ates by ~10&#45;20% over competitive baselin
es tailored to the application, and impr
oves end&#45;toend throughput by ~5&#45;10%.</title>
<path fill="none" stroke="#000000" d="M46947.1876,-975.5752C47024.3781,-973.6642 47242.9801,-964.5387 47298.022,-922.0672 47335.811,-892.9085 47366.316,-855.0175 47390.923,-813.4882"/>
<polygon fill="#000000" stroke="#000000" points="47394.1031,-814.9808 47396.0849,-804.573 47388.0452,-811.4733 47394.1031,-814.9808"/>
</g>
<!-- Execution Templates: Caching Control Pla
ne Decisions for Strong Scaling of Data 
Analytics -->
<g id="node172" class="node">
<title>Execution Templates: Caching Control Pla
ne Decisions for Strong Scaling of Data 
Analytics</title>
<ellipse fill="none" stroke="#000000" cx="47875.022" cy="-461.0336" rx="180.2088" ry="35.2113"/>
<text text-anchor="middle" x="47875.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Execution Templates: Caching Control Pla</text>
<text text-anchor="middle" x="47875.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ne Decisions for Strong Scaling of Data </text>
<text text-anchor="middle" x="47875.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Analytics</text>
</g>
<!-- 44&#45;&gt;Execution Templates: Caching Control Pla
ne Decisions for Strong Scaling of Data 
Analytics -->
<g id="edge178" class="edge">
<title>44&#45;&gt;Execution Templates: Caching Control Pla
ne Decisions for Strong Scaling of Data 
Analytics</title>
<path fill="none" stroke="#000000" d="M48066.2064,-958.3386C48038.5158,-886.3106 47933.9374,-614.2832 47892.2896,-505.9498"/>
<polygon fill="#000000" stroke="#000000" points="47895.5498,-504.6763 47888.6945,-496.5982 47889.016,-507.1882 47895.5498,-504.6763"/>
</g>
<!-- Omid Mashayekhi, Hang Qu, Chinmayee Shah
, and Philip Levis, Stanford University -->
<g id="node173" class="node">
<title>Omid Mashayekhi, Hang Qu, Chinmayee Shah
, and Philip Levis, Stanford University</title>
<ellipse fill="none" stroke="#000000" cx="48271.022" cy="-461.0336" rx="197.995" ry="25.4118"/>
<text text-anchor="middle" x="48271.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Omid Mashayekhi, Hang Qu, Chinmayee Shah</text>
<text text-anchor="middle" x="48271.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, and Philip Levis, Stanford University</text>
</g>
<!-- 44&#45;&gt;Omid Mashayekhi, Hang Qu, Chinmayee Shah
, and Philip Levis, Stanford University -->
<g id="edge179" class="edge">
<title>44&#45;&gt;Omid Mashayekhi, Hang Qu, Chinmayee Shah
, and Philip Levis, Stanford University</title>
<path fill="none" stroke="#000000" d="M48079.8376,-958.3386C48108.4317,-883.9602 48219.0134,-596.3173 48257.6255,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="48260.9162,-497.0742 48261.2377,-486.4843 48254.3824,-494.5623 48260.9162,-497.0742"/>
</g>
<!-- Control planes of cloud frameworks trade
 off between scheduling granularity and 
performance. Centralized systems schedul
e at task granularity, but only schedule
 a few thousand tasks per second. Distri
buted systems schedule hundreds of thous
ands of tasks per second but changing th
e schedule is costly.We present executio
n templates, a control plane abstraction
 that can schedule hundreds of thousands
 of tasks per second while supporting fi
ne&#45;grained, per&#45;task scheduling decision
s. Execution templates leverage a progra
m’s repetitive control flow to cache b
locks of frequently&#45;executed tasks. Exec
uting a task in a template requires send
ing a single message. Large&#45;scale schedu
ling changes install new templates, whil
e small changes apply edits to existing 
templates.Evaluations of execution templ
ates in Nimbus, a data analytics framewo
rk, find that they provide the fine&#45;grai
ned scheduling flexibility of centralize
d control planes while matching the stro
ng scaling of distributed ones. Executio
n templates support complex, real&#45;world 
applications, such as a fluid simulation
 with a triply nested loop and data depe
ndent branches. -->
<g id="node174" class="node">
<title>Control planes of cloud frameworks trade
 off between scheduling granularity and 
performance. Centralized systems schedul
e at task granularity, but only schedule
 a few thousand tasks per second. Distri
buted systems schedule hundreds of thous
ands of tasks per second but changing th
e schedule is costly.We present executio
n templates, a control plane abstraction
 that can schedule hundreds of thousands
 of tasks per second while supporting fi
ne&#45;grained, per&#45;task scheduling decision
s. Execution templates leverage a progra
m’s repetitive control flow to cache b
locks of frequently&#45;executed tasks. Exec
uting a task in a template requires send
ing a single message. Large&#45;scale schedu
ling changes install new templates, whil
e small changes apply edits to existing 
templates.Evaluations of execution templ
ates in Nimbus, a data analytics framewo
rk, find that they provide the fine&#45;grai
ned scheduling flexibility of centralize
d control planes while matching the stro
ng scaling of distributed ones. Executio
n templates support complex, real&#45;world 
applications, such as a fluid simulation
 with a triply nested loop and data depe
ndent branches.</title>
<ellipse fill="none" stroke="#000000" cx="48665.022" cy="-461.0336" rx="178.3901" ry="292.9846"/>
<text text-anchor="middle" x="48665.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Control planes of cloud frameworks trade</text>
<text text-anchor="middle" x="48665.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> off between scheduling granularity and </text>
<text text-anchor="middle" x="48665.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">performance. Centralized systems schedul</text>
<text text-anchor="middle" x="48665.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e at task granularity, but only schedule</text>
<text text-anchor="middle" x="48665.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a few thousand tasks per second. Distri</text>
<text text-anchor="middle" x="48665.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">buted systems schedule hundreds of thous</text>
<text text-anchor="middle" x="48665.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ands of tasks per second but changing th</text>
<text text-anchor="middle" x="48665.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e schedule is costly.We present executio</text>
<text text-anchor="middle" x="48665.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n templates, a control plane abstraction</text>
<text text-anchor="middle" x="48665.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> that can schedule hundreds of thousands</text>
<text text-anchor="middle" x="48665.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of tasks per second while supporting fi</text>
<text text-anchor="middle" x="48665.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ne&#45;grained, per&#45;task scheduling decision</text>
<text text-anchor="middle" x="48665.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s. Execution templates leverage a progra</text>
<text text-anchor="middle" x="48665.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m’s repetitive control flow to cache b</text>
<text text-anchor="middle" x="48665.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">locks of frequently&#45;executed tasks. Exec</text>
<text text-anchor="middle" x="48665.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">uting a task in a template requires send</text>
<text text-anchor="middle" x="48665.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing a single message. Large&#45;scale schedu</text>
<text text-anchor="middle" x="48665.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ling changes install new templates, whil</text>
<text text-anchor="middle" x="48665.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e small changes apply edits to existing </text>
<text text-anchor="middle" x="48665.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">templates.Evaluations of execution templ</text>
<text text-anchor="middle" x="48665.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ates in Nimbus, a data analytics framewo</text>
<text text-anchor="middle" x="48665.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rk, find that they provide the fine&#45;grai</text>
<text text-anchor="middle" x="48665.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ned scheduling flexibility of centralize</text>
<text text-anchor="middle" x="48665.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d control planes while matching the stro</text>
<text text-anchor="middle" x="48665.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng scaling of distributed ones. Executio</text>
<text text-anchor="middle" x="48665.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n templates support complex, real&#45;world </text>
<text text-anchor="middle" x="48665.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">applications, such as a fluid simulation</text>
<text text-anchor="middle" x="48665.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> with a triply nested loop and data depe</text>
<text text-anchor="middle" x="48665.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ndent branches.</text>
</g>
<!-- 44&#45;&gt;Control planes of cloud frameworks trade
 off between scheduling granularity and 
performance. Centralized systems schedul
e at task granularity, but only schedule
 a few thousand tasks per second. Distri
buted systems schedule hundreds of thous
ands of tasks per second but changing th
e schedule is costly.We present executio
n templates, a control plane abstraction
 that can schedule hundreds of thousands
 of tasks per second while supporting fi
ne&#45;grained, per&#45;task scheduling decision
s. Execution templates leverage a progra
m’s repetitive control flow to cache b
locks of frequently&#45;executed tasks. Exec
uting a task in a template requires send
ing a single message. Large&#45;scale schedu
ling changes install new templates, whil
e small changes apply edits to existing 
templates.Evaluations of execution templ
ates in Nimbus, a data analytics framewo
rk, find that they provide the fine&#45;grai
ned scheduling flexibility of centralize
d control planes while matching the stro
ng scaling of distributed ones. Executio
n templates support complex, real&#45;world 
applications, such as a fluid simulation
 with a triply nested loop and data depe
ndent branches. -->
<g id="edge180" class="edge">
<title>44&#45;&gt;Control planes of cloud frameworks trade
 off between scheduling granularity and 
performance. Centralized systems schedul
e at task granularity, but only schedule
 a few thousand tasks per second. Distri
buted systems schedule hundreds of thous
ands of tasks per second but changing th
e schedule is costly.We present executio
n templates, a control plane abstraction
 that can schedule hundreds of thousands
 of tasks per second while supporting fi
ne&#45;grained, per&#45;task scheduling decision
s. Execution templates leverage a progra
m’s repetitive control flow to cache b
locks of frequently&#45;executed tasks. Exec
uting a task in a template requires send
ing a single message. Large&#45;scale schedu
ling changes install new templates, whil
e small changes apply edits to existing 
templates.Evaluations of execution templ
ates in Nimbus, a data analytics framewo
rk, find that they provide the fine&#45;grai
ned scheduling flexibility of centralize
d control planes while matching the stro
ng scaling of distributed ones. Executio
n templates support complex, real&#45;world 
applications, such as a fluid simulation
 with a triply nested loop and data depe
ndent branches.</title>
<path fill="none" stroke="#000000" d="M48100.026,-974.0368C48185.7804,-967.3753 48448.0537,-945.2782 48478.022,-922.0672 48535.0078,-877.9309 48574.7123,-813.5796 48602.3467,-746.8826"/>
<polygon fill="#000000" stroke="#000000" points="48605.6541,-748.0401 48606.1665,-737.4576 48599.1666,-745.4108 48605.6541,-748.0401"/>
</g>
<!-- cHash: Detection of Redundant Compilatio
ns via AST Hashing -->
<g id="node176" class="node">
<title>cHash: Detection of Redundant Compilatio
ns via AST Hashing</title>
<ellipse fill="none" stroke="#000000" cx="49044.022" cy="-461.0336" rx="182.7359" ry="25.4118"/>
<text text-anchor="middle" x="49044.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cHash: Detection of Redundant Compilatio</text>
<text text-anchor="middle" x="49044.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns via AST Hashing</text>
</g>
<!-- 45&#45;&gt;cHash: Detection of Redundant Compilatio
ns via AST Hashing -->
<g id="edge182" class="edge">
<title>45&#45;&gt;cHash: Detection of Redundant Compilatio
ns via AST Hashing</title>
<path fill="none" stroke="#000000" d="M49224.585,-958.3386C49197.6067,-884.0353 49093.3519,-596.8976 49056.7848,-496.1849"/>
<polygon fill="#000000" stroke="#000000" points="49059.9655,-494.6894 49053.2627,-486.4843 49053.3857,-497.0784 49059.9655,-494.6894"/>
</g>
<!-- Christian Dietrich and Valentin Rothberg
, Leibniz Universität Hannover; Ludwig 
Füracker and Andreas Ziegler, Friedrich
&#45;Alexander Universität Erlangen&#45;Nürnbe
rg; Daniel Lohmann, Leibniz Universität
 HannoverAwarded Best Paper! -->
<g id="node177" class="node">
<title>Christian Dietrich and Valentin Rothberg
, Leibniz Universität Hannover; Ludwig 
Füracker and Andreas Ziegler, Friedrich
&#45;Alexander Universität Erlangen&#45;Nürnbe
rg; Daniel Lohmann, Leibniz Universität
 HannoverAwarded Best Paper!</title>
<ellipse fill="none" stroke="#000000" cx="49419.022" cy="-461.0336" rx="173.9452" ry="65.1077"/>
<text text-anchor="middle" x="49419.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Christian Dietrich and Valentin Rothberg</text>
<text text-anchor="middle" x="49419.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, Leibniz Universität Hannover; Ludwig </text>
<text text-anchor="middle" x="49419.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Füracker and Andreas Ziegler, Friedrich</text>
<text text-anchor="middle" x="49419.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;Alexander Universität Erlangen&#45;Nürnbe</text>
<text text-anchor="middle" x="49419.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rg; Daniel Lohmann, Leibniz Universität</text>
<text text-anchor="middle" x="49419.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> HannoverAwarded Best Paper!</text>
</g>
<!-- 45&#45;&gt;Christian Dietrich and Valentin Rothberg
, Leibniz Universität Hannover; Ludwig 
Füracker and Andreas Ziegler, Friedrich
&#45;Alexander Universität Erlangen&#45;Nürnbe
rg; Daniel Lohmann, Leibniz Universität
 HannoverAwarded Best Paper! -->
<g id="edge183" class="edge">
<title>45&#45;&gt;Christian Dietrich and Valentin Rothberg
, Leibniz Universität Hannover; Ludwig 
Füracker and Andreas Ziegler, Friedrich
&#45;Alexander Universität Erlangen&#45;Nürnbe
rg; Daniel Lohmann, Leibniz Universität
 HannoverAwarded Best Paper!</title>
<path fill="none" stroke="#000000" d="M49237.4934,-958.3386C49261.6645,-892.1208 49347.5373,-656.8687 49391.96,-535.171"/>
<polygon fill="#000000" stroke="#000000" points="49395.3346,-536.1331 49395.4758,-525.5392 49388.759,-533.7328 49395.3346,-536.1331"/>
</g>
<!-- Software projects that use a compiled la
nguage are built hundreds of thousands o
f times during their lifespan. Hence, th
e compiler is invoked over and over agai
n on an incrementally changing source ba
se. As previous work has shown, up to 97
 percent of these invocations are redund
ant and do not lead to an altered compil
ation result. In order to avoid such red
undant builds, many developers use cachi
ng tools that are based on textual hashi
ng of the source files. However, these t
ools fail in the presence of modificatio
ns that leave the compilation result unc
hanged. Especially for C projects, where
 module&#45;interface definitions are import
ed textually with the C preprocessor, mo
difications to header files lead to many
 redundant compilations.In this paper, w
e present the cHash approach and compile
r extension to quickly detect modificati
ons on the language level that will not 
lead to a changed compilation result. By
 calculating a hash over the abstract sy
ntax tree, we achieve a high precision a
t comparatively low costs. While cHash i
s light&#45;weight and build system agnostic
, it can cancel 80 percent of all compil
er invocations early and reduce the buil
d&#45;time of incremental builds by up to 51
 percent. In comparison to the state&#45;of&#45;
the&#45;art CCache tool, cHash is at least 3
0 percent more precise in detecting redu
ndant compilations. -->
<g id="node178" class="node">
<title>Software projects that use a compiled la
nguage are built hundreds of thousands o
f times during their lifespan. Hence, th
e compiler is invoked over and over agai
n on an incrementally changing source ba
se. As previous work has shown, up to 97
 percent of these invocations are redund
ant and do not lead to an altered compil
ation result. In order to avoid such red
undant builds, many developers use cachi
ng tools that are based on textual hashi
ng of the source files. However, these t
ools fail in the presence of modificatio
ns that leave the compilation result unc
hanged. Especially for C projects, where
 module&#45;interface definitions are import
ed textually with the C preprocessor, mo
difications to header files lead to many
 redundant compilations.In this paper, w
e present the cHash approach and compile
r extension to quickly detect modificati
ons on the language level that will not 
lead to a changed compilation result. By
 calculating a hash over the abstract sy
ntax tree, we achieve a high precision a
t comparatively low costs. While cHash i
s light&#45;weight and build system agnostic
, it can cancel 80 percent of all compil
er invocations early and reduce the buil
d&#45;time of incremental builds by up to 51
 percent. In comparison to the state&#45;of&#45;
the&#45;art CCache tool, cHash is at least 3
0 percent more precise in detecting redu
ndant compilations.</title>
<ellipse fill="none" stroke="#000000" cx="49789.022" cy="-461.0336" rx="178.3707" ry="342.4795"/>
<text text-anchor="middle" x="49789.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Software projects that use a compiled la</text>
<text text-anchor="middle" x="49789.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nguage are built hundreds of thousands o</text>
<text text-anchor="middle" x="49789.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f times during their lifespan. Hence, th</text>
<text text-anchor="middle" x="49789.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e compiler is invoked over and over agai</text>
<text text-anchor="middle" x="49789.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n on an incrementally changing source ba</text>
<text text-anchor="middle" x="49789.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">se. As previous work has shown, up to 97</text>
<text text-anchor="middle" x="49789.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> percent of these invocations are redund</text>
<text text-anchor="middle" x="49789.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ant and do not lead to an altered compil</text>
<text text-anchor="middle" x="49789.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ation result. In order to avoid such red</text>
<text text-anchor="middle" x="49789.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">undant builds, many developers use cachi</text>
<text text-anchor="middle" x="49789.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng tools that are based on textual hashi</text>
<text text-anchor="middle" x="49789.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng of the source files. However, these t</text>
<text text-anchor="middle" x="49789.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ools fail in the presence of modificatio</text>
<text text-anchor="middle" x="49789.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns that leave the compilation result unc</text>
<text text-anchor="middle" x="49789.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hanged. Especially for C projects, where</text>
<text text-anchor="middle" x="49789.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> module&#45;interface definitions are import</text>
<text text-anchor="middle" x="49789.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed textually with the C preprocessor, mo</text>
<text text-anchor="middle" x="49789.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">difications to header files lead to many</text>
<text text-anchor="middle" x="49789.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> redundant compilations.In this paper, w</text>
<text text-anchor="middle" x="49789.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e present the cHash approach and compile</text>
<text text-anchor="middle" x="49789.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r extension to quickly detect modificati</text>
<text text-anchor="middle" x="49789.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ons on the language level that will not </text>
<text text-anchor="middle" x="49789.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lead to a changed compilation result. By</text>
<text text-anchor="middle" x="49789.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> calculating a hash over the abstract sy</text>
<text text-anchor="middle" x="49789.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntax tree, we achieve a high precision a</text>
<text text-anchor="middle" x="49789.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t comparatively low costs. While cHash i</text>
<text text-anchor="middle" x="49789.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s light&#45;weight and build system agnostic</text>
<text text-anchor="middle" x="49789.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, it can cancel 80 percent of all compil</text>
<text text-anchor="middle" x="49789.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er invocations early and reduce the buil</text>
<text text-anchor="middle" x="49789.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d&#45;time of incremental builds by up to 51</text>
<text text-anchor="middle" x="49789.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> percent. In comparison to the state&#45;of&#45;</text>
<text text-anchor="middle" x="49789.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the&#45;art CCache tool, cHash is at least 3</text>
<text text-anchor="middle" x="49789.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">0 percent more precise in detecting redu</text>
<text text-anchor="middle" x="49789.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ndant compilations.</text>
</g>
<!-- 45&#45;&gt;Software projects that use a compiled la
nguage are built hundreds of thousands o
f times during their lifespan. Hence, th
e compiler is invoked over and over agai
n on an incrementally changing source ba
se. As previous work has shown, up to 97
 percent of these invocations are redund
ant and do not lead to an altered compil
ation result. In order to avoid such red
undant builds, many developers use cachi
ng tools that are based on textual hashi
ng of the source files. However, these t
ools fail in the presence of modificatio
ns that leave the compilation result unc
hanged. Especially for C projects, where
 module&#45;interface definitions are import
ed textually with the C preprocessor, mo
difications to header files lead to many
 redundant compilations.In this paper, w
e present the cHash approach and compile
r extension to quickly detect modificati
ons on the language level that will not 
lead to a changed compilation result. By
 calculating a hash over the abstract sy
ntax tree, we achieve a high precision a
t comparatively low costs. While cHash i
s light&#45;weight and build system agnostic
, it can cancel 80 percent of all compil
er invocations early and reduce the buil
d&#45;time of incremental builds by up to 51
 percent. In comparison to the state&#45;of&#45;
the&#45;art CCache tool, cHash is at least 3
0 percent more precise in detecting redu
ndant compilations. -->
<g id="edge184" class="edge">
<title>45&#45;&gt;Software projects that use a compiled la
nguage are built hundreds of thousands o
f times during their lifespan. Hence, th
e compiler is invoked over and over agai
n on an incrementally changing source ba
se. As previous work has shown, up to 97
 percent of these invocations are redund
ant and do not lead to an altered compil
ation result. In order to avoid such red
undant builds, many developers use cachi
ng tools that are based on textual hashi
ng of the source files. However, these t
ools fail in the presence of modificatio
ns that leave the compilation result unc
hanged. Especially for C projects, where
 module&#45;interface definitions are import
ed textually with the C preprocessor, mo
difications to header files lead to many
 redundant compilations.In this paper, w
e present the cHash approach and compile
r extension to quickly detect modificati
ons on the language level that will not 
lead to a changed compilation result. By
 calculating a hash over the abstract sy
ntax tree, we achieve a high precision a
t comparatively low costs. While cHash i
s light&#45;weight and build system agnostic
, it can cancel 80 percent of all compil
er invocations early and reduce the buil
d&#45;time of incremental builds by up to 51
 percent. In comparison to the state&#45;of&#45;
the&#45;art CCache tool, cHash is at least 3
0 percent more precise in detecting redu
ndant compilations.</title>
<path fill="none" stroke="#000000" d="M49258.2593,-975.5265C49334.5793,-973.4929 49548.4339,-964.0882 49602.022,-922.0672 49648.7815,-885.4008 49683.9141,-835.147 49710.2918,-781.2565"/>
<polygon fill="#000000" stroke="#000000" points="49713.4548,-782.7551 49714.6163,-772.2241 49707.1411,-779.7322 49713.4548,-782.7551"/>
</g>
<!-- Application Crash Consistency and Perfor
mance with CCFSLink to Paper -->
<g id="node180" class="node">
<title>Application Crash Consistency and Perfor
mance with CCFSLink to Paper</title>
<ellipse fill="none" stroke="#000000" cx="50164.022" cy="-461.0336" rx="178.4481" ry="25.4118"/>
<text text-anchor="middle" x="50164.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Application Crash Consistency and Perfor</text>
<text text-anchor="middle" x="50164.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mance with CCFSLink to Paper</text>
</g>
<!-- 46&#45;&gt;Application Crash Consistency and Perfor
mance with CCFSLink to Paper -->
<g id="edge186" class="edge">
<title>46&#45;&gt;Application Crash Consistency and Perfor
mance with CCFSLink to Paper</title>
<path fill="none" stroke="#000000" d="M50349.4129,-958.3386C50321.6853,-883.9602 50214.4546,-596.3173 50177.0125,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="50180.2824,-494.6317 50173.5098,-486.4843 50173.7234,-497.0769 50180.2824,-494.6317"/>
</g>
<!-- Thanumalayan Sankaranarayana Pillai, Ram
natthan Alagappan, and Lanyue Lu, Univer
sity of Wisconsin—Madison; Vijay Chida
mbaram, The University of Texas at Austi
n; Andrea C. Arpaci&#45;Dusseau and Remzi H.
 Arpaci&#45;Dusseau, University of Wisconsin
—MadisonBest Paper at FAST &#39;17: Link t
o Paper -->
<g id="node181" class="node">
<title>Thanumalayan Sankaranarayana Pillai, Ram
natthan Alagappan, and Lanyue Lu, Univer
sity of Wisconsin—Madison; Vijay Chida
mbaram, The University of Texas at Austi
n; Andrea C. Arpaci&#45;Dusseau and Remzi H.
 Arpaci&#45;Dusseau, University of Wisconsin
—MadisonBest Paper at FAST &#39;17: Link t
o Paper</title>
<ellipse fill="none" stroke="#000000" cx="50548.022" cy="-461.0336" rx="187.4755" ry="84.7059"/>
<text text-anchor="middle" x="50548.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Thanumalayan Sankaranarayana Pillai, Ram</text>
<text text-anchor="middle" x="50548.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">natthan Alagappan, and Lanyue Lu, Univer</text>
<text text-anchor="middle" x="50548.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sity of Wisconsin—Madison; Vijay Chida</text>
<text text-anchor="middle" x="50548.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mbaram, The University of Texas at Austi</text>
<text text-anchor="middle" x="50548.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n; Andrea C. Arpaci&#45;Dusseau and Remzi H.</text>
<text text-anchor="middle" x="50548.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Arpaci&#45;Dusseau, University of Wisconsin</text>
<text text-anchor="middle" x="50548.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">—MadisonBest Paper at FAST &#39;17: Link t</text>
<text text-anchor="middle" x="50548.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o Paper</text>
</g>
<!-- 46&#45;&gt;Thanumalayan Sankaranarayana Pillai, Ram
natthan Alagappan, and Lanyue Lu, Univer
sity of Wisconsin—Madison; Vijay Chida
mbaram, The University of Texas at Austi
n; Andrea C. Arpaci&#45;Dusseau and Remzi H.
 Arpaci&#45;Dusseau, University of Wisconsin
—MadisonBest Paper at FAST &#39;17: Link t
o Paper -->
<g id="edge187" class="edge">
<title>46&#45;&gt;Thanumalayan Sankaranarayana Pillai, Ram
natthan Alagappan, and Lanyue Lu, Univer
sity of Wisconsin—Madison; Vijay Chida
mbaram, The University of Texas at Austi
n; Andrea C. Arpaci&#45;Dusseau and Remzi H.
 Arpaci&#45;Dusseau, University of Wisconsin
—MadisonBest Paper at FAST &#39;17: Link t
o Paper</title>
<path fill="none" stroke="#000000" d="M50362.6311,-958.3386C50386.072,-895.4591 50466.334,-680.1591 50513.2135,-554.4064"/>
<polygon fill="#000000" stroke="#000000" points="50516.5942,-555.3573 50516.8078,-544.7646 50510.0351,-552.9121 50516.5942,-555.3573"/>
</g>
<!-- Recent research has shown that applicati
ons often incorrectly implement crash co
nsistency. We present ccfs, a file syste
m that improves the correctness of appli
cation&#45;level crash consistency protocols
 while maintaining high performance. A k
ey idea in ccfs is the abstraction of a 
stream. Within a stream, updates are com
mitted in program order, thus helping co
rrectness; across streams, there are no 
ordering restrictions, thus enabling sch
eduling flexibility and high performance
. We empirically demonstrate that applic
ations running atop ccfs achieve high le
vels of crash consistency. Further, we s
how that ccfs performance under standard
 filesystem benchmarks is excellent, in 
the worst case on par with the highest p
erforming modes of Linux ext4, and in so
me cases notably better. Overall, we dem
onstrate that both application correctne
ss and high performance can be realized 
in a modern file system. -->
<g id="node182" class="node">
<title>Recent research has shown that applicati
ons often incorrectly implement crash co
nsistency. We present ccfs, a file syste
m that improves the correctness of appli
cation&#45;level crash consistency protocols
 while maintaining high performance. A k
ey idea in ccfs is the abstraction of a 
stream. Within a stream, updates are com
mitted in program order, thus helping co
rrectness; across streams, there are no 
ordering restrictions, thus enabling sch
eduling flexibility and high performance
. We empirically demonstrate that applic
ations running atop ccfs achieve high le
vels of crash consistency. Further, we s
how that ccfs performance under standard
 filesystem benchmarks is excellent, in 
the worst case on par with the highest p
erforming modes of Linux ext4, and in so
me cases notably better. Overall, we dem
onstrate that both application correctne
ss and high performance can be realized 
in a modern file system.</title>
<ellipse fill="none" stroke="#000000" cx="50931.022" cy="-461.0336" rx="177.7176" ry="233.1906"/>
<text text-anchor="middle" x="50931.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Recent research has shown that applicati</text>
<text text-anchor="middle" x="50931.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ons often incorrectly implement crash co</text>
<text text-anchor="middle" x="50931.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nsistency. We present ccfs, a file syste</text>
<text text-anchor="middle" x="50931.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m that improves the correctness of appli</text>
<text text-anchor="middle" x="50931.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cation&#45;level crash consistency protocols</text>
<text text-anchor="middle" x="50931.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> while maintaining high performance. A k</text>
<text text-anchor="middle" x="50931.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ey idea in ccfs is the abstraction of a </text>
<text text-anchor="middle" x="50931.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stream. Within a stream, updates are com</text>
<text text-anchor="middle" x="50931.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mitted in program order, thus helping co</text>
<text text-anchor="middle" x="50931.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rrectness; across streams, there are no </text>
<text text-anchor="middle" x="50931.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ordering restrictions, thus enabling sch</text>
<text text-anchor="middle" x="50931.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eduling flexibility and high performance</text>
<text text-anchor="middle" x="50931.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. We empirically demonstrate that applic</text>
<text text-anchor="middle" x="50931.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ations running atop ccfs achieve high le</text>
<text text-anchor="middle" x="50931.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vels of crash consistency. Further, we s</text>
<text text-anchor="middle" x="50931.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">how that ccfs performance under standard</text>
<text text-anchor="middle" x="50931.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> filesystem benchmarks is excellent, in </text>
<text text-anchor="middle" x="50931.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the worst case on par with the highest p</text>
<text text-anchor="middle" x="50931.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erforming modes of Linux ext4, and in so</text>
<text text-anchor="middle" x="50931.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">me cases notably better. Overall, we dem</text>
<text text-anchor="middle" x="50931.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onstrate that both application correctne</text>
<text text-anchor="middle" x="50931.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ss and high performance can be realized </text>
<text text-anchor="middle" x="50931.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">in a modern file system.</text>
</g>
<!-- 46&#45;&gt;Recent research has shown that applicati
ons often incorrectly implement crash co
nsistency. We present ccfs, a file syste
m that improves the correctness of appli
cation&#45;level crash consistency protocols
 while maintaining high performance. A k
ey idea in ccfs is the abstraction of a 
stream. Within a stream, updates are com
mitted in program order, thus helping co
rrectness; across streams, there are no 
ordering restrictions, thus enabling sch
eduling flexibility and high performance
. We empirically demonstrate that applic
ations running atop ccfs achieve high le
vels of crash consistency. Further, we s
how that ccfs performance under standard
 filesystem benchmarks is excellent, in 
the worst case on par with the highest p
erforming modes of Linux ext4, and in so
me cases notably better. Overall, we dem
onstrate that both application correctne
ss and high performance can be realized 
in a modern file system. -->
<g id="edge188" class="edge">
<title>46&#45;&gt;Recent research has shown that applicati
ons often incorrectly implement crash co
nsistency. We present ccfs, a file syste
m that improves the correctness of appli
cation&#45;level crash consistency protocols
 while maintaining high performance. A k
ey idea in ccfs is the abstraction of a 
stream. Within a stream, updates are com
mitted in program order, thus helping co
rrectness; across streams, there are no 
ordering restrictions, thus enabling sch
eduling flexibility and high performance
. We empirically demonstrate that applic
ations running atop ccfs achieve high le
vels of crash consistency. Further, we s
how that ccfs performance under standard
 filesystem benchmarks is excellent, in 
the worst case on par with the highest p
erforming modes of Linux ext4, and in so
me cases notably better. Overall, we dem
onstrate that both application correctne
ss and high performance can be realized 
in a modern file system.</title>
<path fill="none" stroke="#000000" d="M50383.0841,-975.7253C50461.6152,-974.216 50687.556,-966.0607 50744.022,-922.0672 50814.7955,-866.9266 50858.9227,-780.6314 50886.3754,-697.5415"/>
<polygon fill="#000000" stroke="#000000" points="50889.73,-698.5428 50889.4757,-687.951 50883.0694,-696.3895 50889.73,-698.5428"/>
</g>
<!-- Push&#45;Button Verification of File Systems
 via Crash RefinementLink to Paper -->
<g id="node184" class="node">
<title>Push&#45;Button Verification of File Systems
 via Crash RefinementLink to Paper</title>
<ellipse fill="none" stroke="#000000" cx="51300.022" cy="-461.0336" rx="173.2683" ry="25.4118"/>
<text text-anchor="middle" x="51300.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Push&#45;Button Verification of File Systems</text>
<text text-anchor="middle" x="51300.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> via Crash RefinementLink to Paper</text>
</g>
<!-- 47&#45;&gt;Push&#45;Button Verification of File Systems
 via Crash RefinementLink to Paper -->
<g id="edge190" class="edge">
<title>47&#45;&gt;Push&#45;Button Verification of File Systems
 via Crash RefinementLink to Paper</title>
<path fill="none" stroke="#000000" d="M51478.6539,-958.3386C51451.9641,-884.0353 51348.8243,-596.8976 51312.6483,-496.1849"/>
<polygon fill="#000000" stroke="#000000" points="51315.8384,-494.7123 51309.1639,-486.4843 51309.2505,-497.0787 51315.8384,-494.7123"/>
</g>
<!-- Helgi Sigurbjarnarson, James Bornholt, E
mina Torlak, and Xi Wang, University of 
WashingtonBest Paper at OSDI &#39;16: Link t
o Paper -->
<g id="node185" class="node">
<title>Helgi Sigurbjarnarson, James Bornholt, E
mina Torlak, and Xi Wang, University of 
WashingtonBest Paper at OSDI &#39;16: Link t
o Paper</title>
<ellipse fill="none" stroke="#000000" cx="51671.022" cy="-461.0336" rx="179.4589" ry="45.011"/>
<text text-anchor="middle" x="51671.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Helgi Sigurbjarnarson, James Bornholt, E</text>
<text text-anchor="middle" x="51671.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mina Torlak, and Xi Wang, University of </text>
<text text-anchor="middle" x="51671.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">WashingtonBest Paper at OSDI &#39;16: Link t</text>
<text text-anchor="middle" x="51671.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o Paper</text>
</g>
<!-- 47&#45;&gt;Helgi Sigurbjarnarson, James Bornholt, E
mina Torlak, and Xi Wang, University of 
WashingtonBest Paper at OSDI &#39;16: Link t
o Paper -->
<g id="edge191" class="edge">
<title>47&#45;&gt;Helgi Sigurbjarnarson, James Bornholt, E
mina Torlak, and Xi Wang, University of 
WashingtonBest Paper at OSDI &#39;16: Link t
o Paper</title>
<path fill="none" stroke="#000000" d="M51491.4245,-958.3386C51516.6871,-888.3865 51610.0744,-629.7974 51651.2739,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="51654.6355,-516.7118 51654.7403,-506.1175 51648.0517,-514.3341 51654.6355,-516.7118"/>
</g>
<!-- The file system is an essential operatin
g system component for persisting data o
n storage devices. Writing bug&#45;free file
 systems is non&#45;trivial, as they must co
rrectly implement and maintain complex o
n&#45;disk data structures even in the prese
nce of system crashes and reorderings of
 disk operations.This paper presents Ygg
drasil, a toolkit for writing file syste
ms with push&#45;button verification: Yggdra
sil requires no manual annotations or pr
oofs about the implementation code, and 
it produces a counterexample if there is
 a bug. Yggdrasil achieves this automati
on through a novel definition of file sy
stem correctness called crash refinement
, which requires the set of possible dis
k states produced by an implementation (
including states produced by crashes) to
 be a subset of those allowed by the spe
cification. Crash refinement is amenable
 to fully automated satisfiability modul
o theories (SMT) reasoning, and enables 
developers to implement file systems in 
a modular way for verification.With Yggd
rasil, we have implemented and verified 
the Yxv6 journaling file system, the Ycp
 file copy utility, and the Ylog persist
ent log. Our experience shows that the e
ase of proof and counterexample&#45;based de
bugging support make Yggdrasil practical
 for building reliable storage applicati
ons. -->
<g id="node186" class="node">
<title>The file system is an essential operatin
g system component for persisting data o
n storage devices. Writing bug&#45;free file
 systems is non&#45;trivial, as they must co
rrectly implement and maintain complex o
n&#45;disk data structures even in the prese
nce of system crashes and reorderings of
 disk operations.This paper presents Ygg
drasil, a toolkit for writing file syste
ms with push&#45;button verification: Yggdra
sil requires no manual annotations or pr
oofs about the implementation code, and 
it produces a counterexample if there is
 a bug. Yggdrasil achieves this automati
on through a novel definition of file sy
stem correctness called crash refinement
, which requires the set of possible dis
k states produced by an implementation (
including states produced by crashes) to
 be a subset of those allowed by the spe
cification. Crash refinement is amenable
 to fully automated satisfiability modul
o theories (SMT) reasoning, and enables 
developers to implement file systems in 
a modular way for verification.With Yggd
rasil, we have implemented and verified 
the Yxv6 journaling file system, the Ycp
 file copy utility, and the Ylog persist
ent log. Our experience shows that the e
ase of proof and counterexample&#45;based de
bugging support make Yggdrasil practical
 for building reliable storage applicati
ons.</title>
<ellipse fill="none" stroke="#000000" cx="52048.022" cy="-461.0336" rx="179.6551" ry="332.1805"/>
<text text-anchor="middle" x="52048.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">The file system is an essential operatin</text>
<text text-anchor="middle" x="52048.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g system component for persisting data o</text>
<text text-anchor="middle" x="52048.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n storage devices. Writing bug&#45;free file</text>
<text text-anchor="middle" x="52048.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> systems is non&#45;trivial, as they must co</text>
<text text-anchor="middle" x="52048.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rrectly implement and maintain complex o</text>
<text text-anchor="middle" x="52048.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n&#45;disk data structures even in the prese</text>
<text text-anchor="middle" x="52048.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nce of system crashes and reorderings of</text>
<text text-anchor="middle" x="52048.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> disk operations.This paper presents Ygg</text>
<text text-anchor="middle" x="52048.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">drasil, a toolkit for writing file syste</text>
<text text-anchor="middle" x="52048.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ms with push&#45;button verification: Yggdra</text>
<text text-anchor="middle" x="52048.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sil requires no manual annotations or pr</text>
<text text-anchor="middle" x="52048.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oofs about the implementation code, and </text>
<text text-anchor="middle" x="52048.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">it produces a counterexample if there is</text>
<text text-anchor="middle" x="52048.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a bug. Yggdrasil achieves this automati</text>
<text text-anchor="middle" x="52048.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on through a novel definition of file sy</text>
<text text-anchor="middle" x="52048.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stem correctness called crash refinement</text>
<text text-anchor="middle" x="52048.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, which requires the set of possible dis</text>
<text text-anchor="middle" x="52048.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">k states produced by an implementation (</text>
<text text-anchor="middle" x="52048.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">including states produced by crashes) to</text>
<text text-anchor="middle" x="52048.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> be a subset of those allowed by the spe</text>
<text text-anchor="middle" x="52048.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cification. Crash refinement is amenable</text>
<text text-anchor="middle" x="52048.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> to fully automated satisfiability modul</text>
<text text-anchor="middle" x="52048.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o theories (SMT) reasoning, and enables </text>
<text text-anchor="middle" x="52048.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">developers to implement file systems in </text>
<text text-anchor="middle" x="52048.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a modular way for verification.With Yggd</text>
<text text-anchor="middle" x="52048.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rasil, we have implemented and verified </text>
<text text-anchor="middle" x="52048.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the Yxv6 journaling file system, the Ycp</text>
<text text-anchor="middle" x="52048.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> file copy utility, and the Ylog persist</text>
<text text-anchor="middle" x="52048.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ent log. Our experience shows that the e</text>
<text text-anchor="middle" x="52048.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ase of proof and counterexample&#45;based de</text>
<text text-anchor="middle" x="52048.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">bugging support make Yggdrasil practical</text>
<text text-anchor="middle" x="52048.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> for building reliable storage applicati</text>
<text text-anchor="middle" x="52048.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ons.</text>
</g>
<!-- 47&#45;&gt;The file system is an essential operatin
g system component for persisting data o
n storage devices. Writing bug&#45;free file
 systems is non&#45;trivial, as they must co
rrectly implement and maintain complex o
n&#45;disk data structures even in the prese
nce of system crashes and reorderings of
 disk operations.This paper presents Ygg
drasil, a toolkit for writing file syste
ms with push&#45;button verification: Yggdra
sil requires no manual annotations or pr
oofs about the implementation code, and 
it produces a counterexample if there is
 a bug. Yggdrasil achieves this automati
on through a novel definition of file sy
stem correctness called crash refinement
, which requires the set of possible dis
k states produced by an implementation (
including states produced by crashes) to
 be a subset of those allowed by the spe
cification. Crash refinement is amenable
 to fully automated satisfiability modul
o theories (SMT) reasoning, and enables 
developers to implement file systems in 
a modular way for verification.With Yggd
rasil, we have implemented and verified 
the Yxv6 journaling file system, the Ycp
 file copy utility, and the Ylog persist
ent log. Our experience shows that the e
ase of proof and counterexample&#45;based de
bugging support make Yggdrasil practical
 for building reliable storage applicati
ons. -->
<g id="edge192" class="edge">
<title>47&#45;&gt;The file system is an essential operatin
g system component for persisting data o
n storage devices. Writing bug&#45;free file
 systems is non&#45;trivial, as they must co
rrectly implement and maintain complex o
n&#45;disk data structures even in the prese
nce of system crashes and reorderings of
 disk operations.This paper presents Ygg
drasil, a toolkit for writing file syste
ms with push&#45;button verification: Yggdra
sil requires no manual annotations or pr
oofs about the implementation code, and 
it produces a counterexample if there is
 a bug. Yggdrasil achieves this automati
on through a novel definition of file sy
stem correctness called crash refinement
, which requires the set of possible dis
k states produced by an implementation (
including states produced by crashes) to
 be a subset of those allowed by the spe
cification. Crash refinement is amenable
 to fully automated satisfiability modul
o theories (SMT) reasoning, and enables 
developers to implement file systems in 
a modular way for verification.With Yggd
rasil, we have implemented and verified 
the Yxv6 journaling file system, the Ycp
 file copy utility, and the Ylog persist
ent log. Our experience shows that the e
ase of proof and counterexample&#45;based de
bugging support make Yggdrasil practical
 for building reliable storage applicati
ons.</title>
<path fill="none" stroke="#000000" d="M51512.1951,-975.5537C51588.8671,-973.5886 51804.8421,-964.34 51859.022,-922.0672 51907.8996,-883.9315 51944.223,-831.0167 51971.1905,-774.5861"/>
<polygon fill="#000000" stroke="#000000" points="51974.3734,-776.042 51975.4388,-765.5009 51968.0324,-773.0769 51974.3734,-776.042"/>
</g>
<!-- Early Detection of Configuration Errors 
to Reduce Failure DamageLink to Paper -->
<g id="node188" class="node">
<title>Early Detection of Configuration Errors 
to Reduce Failure DamageLink to Paper</title>
<ellipse fill="none" stroke="#000000" cx="52417.022" cy="-461.0336" rx="171.6816" ry="25.4118"/>
<text text-anchor="middle" x="52417.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Early Detection of Configuration Errors </text>
<text text-anchor="middle" x="52417.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to Reduce Failure DamageLink to Paper</text>
</g>
<!-- 48&#45;&gt;Early Detection of Configuration Errors 
to Reduce Failure DamageLink to Paper -->
<g id="edge194" class="edge">
<title>48&#45;&gt;Early Detection of Configuration Errors 
to Reduce Failure DamageLink to Paper</title>
<path fill="none" stroke="#000000" d="M52596.6195,-958.3386C52569.7854,-884.0353 52466.0881,-596.8976 52429.7166,-496.1849"/>
<polygon fill="#000000" stroke="#000000" points="52432.9019,-494.7008 52426.2133,-486.4843 52426.3181,-497.0786 52432.9019,-494.7008"/>
</g>
<!-- Tianyin Xu, Xinxin Jin, Peng Huang, and 
Yuanyuan Zhou, University of California,
 San Diego; Shan Lu, University of Chica
go; Long Jin, University of California, 
San Diego; Shankar Pasupathy, NetApp, In
c.Best Paper at OSDI &#39;16: Link to Paper -->
<g id="node189" class="node">
<title>Tianyin Xu, Xinxin Jin, Peng Huang, and 
Yuanyuan Zhou, University of California,
 San Diego; Shan Lu, University of Chica
go; Long Jin, University of California, 
San Diego; Shankar Pasupathy, NetApp, In
c.Best Paper at OSDI &#39;16: Link to Paper</title>
<ellipse fill="none" stroke="#000000" cx="52789.022" cy="-461.0336" rx="182.5204" ry="65.1077"/>
<text text-anchor="middle" x="52789.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Tianyin Xu, Xinxin Jin, Peng Huang, and </text>
<text text-anchor="middle" x="52789.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Yuanyuan Zhou, University of California,</text>
<text text-anchor="middle" x="52789.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> San Diego; Shan Lu, University of Chica</text>
<text text-anchor="middle" x="52789.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">go; Long Jin, University of California, </text>
<text text-anchor="middle" x="52789.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">San Diego; Shankar Pasupathy, NetApp, In</text>
<text text-anchor="middle" x="52789.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">c.Best Paper at OSDI &#39;16: Link to Paper</text>
</g>
<!-- 48&#45;&gt;Tianyin Xu, Xinxin Jin, Peng Huang, and 
Yuanyuan Zhou, University of California,
 San Diego; Shan Lu, University of Chica
go; Long Jin, University of California, 
San Diego; Shankar Pasupathy, NetApp, In
c.Best Paper at OSDI &#39;16: Link to Paper -->
<g id="edge195" class="edge">
<title>48&#45;&gt;Tianyin Xu, Xinxin Jin, Peng Huang, and 
Yuanyuan Zhou, University of California,
 San Diego; Shan Lu, University of Chica
go; Long Jin, University of California, 
San Diego; Shankar Pasupathy, NetApp, In
c.Best Paper at OSDI &#39;16: Link to Paper</title>
<path fill="none" stroke="#000000" d="M52609.4245,-958.3386C52633.3074,-892.2069 52718.077,-657.4803 52762.0763,-535.6463"/>
<polygon fill="#000000" stroke="#000000" points="52765.4544,-536.5964 52765.5592,-526.002 52758.8705,-534.2186 52765.4544,-536.5964"/>
</g>
<!--  Early detection is the key to minimizin
g failure damage induced by configuratio
n errors, especially those errors in con
figurations that control failure handlin
g and fault tolerance. Since such config
urations are not needed for initializati
on, many systems do not check their sett
ings early (e.g., at startup time). Cons
equently, the errors become latent until
 their manifestations cause severe damag
e, such as breaking the failure handling
. Such latent errors are likely to escap
e from sysadmins’ observation and test
ing, and be deployed to production at sc
ale.Our study shows that many of today’s mature, widely&#45;used software systems 
are subject to latent configuration erro
rs (referred to as LC errors) in their c
ritically important configurations—tho
se related to the system’s reliability
, availability, and serviceability. One 
root cause is that many (14.0%–93.2%) 
of these configurations do not have any 
special code for checking the correctnes
s of their settings at the system’s in
itialization time.To help software syste
ms detect LC errors early, we present a 
tool named PCHECK that analyzes the sour
ce code and automatically generates conf
iguration checking code (called checkers
). The checkers emulate the late executi
on that uses configuration values, and d
etect LC errors if the error manifestati
ons are captured during the emulated exe
cution. Our results show that PCHECK can
 help systems detect 75+% of real&#45;world 
LC errors at the initialization phase, i
ncluding 37 new LC errors that have not 
been exposed before. Compared with exist
ing detection tools, it can detect 31% m
ore LC errors. -->
<g id="node190" class="node">
<title> Early detection is the key to minimizin
g failure damage induced by configuratio
n errors, especially those errors in con
figurations that control failure handlin
g and fault tolerance. Since such config
urations are not needed for initializati
on, many systems do not check their sett
ings early (e.g., at startup time). Cons
equently, the errors become latent until
 their manifestations cause severe damag
e, such as breaking the failure handling
. Such latent errors are likely to escap
e from sysadmins’ observation and test
ing, and be deployed to production at sc
ale.Our study shows that many of today’s mature, widely&#45;used software systems 
are subject to latent configuration erro
rs (referred to as LC errors) in their c
ritically important configurations—tho
se related to the system’s reliability
, availability, and serviceability. One 
root cause is that many (14.0%–93.2%) 
of these configurations do not have any 
special code for checking the correctnes
s of their settings at the system’s in
itialization time.To help software syste
ms detect LC errors early, we present a 
tool named PCHECK that analyzes the sour
ce code and automatically generates conf
iguration checking code (called checkers
). The checkers emulate the late executi
on that uses configuration values, and d
etect LC errors if the error manifestati
ons are captured during the emulated exe
cution. Our results show that PCHECK can
 help systems detect 75+% of real&#45;world 
LC errors at the initialization phase, i
ncluding 37 new LC errors that have not 
been exposed before. Compared with exist
ing detection tools, it can detect 31% m
ore LC errors.</title>
<ellipse fill="none" stroke="#000000" cx="53321.022" cy="-461.0336" rx="331.7331" ry="401.7733"/>
<text text-anchor="middle" x="53321.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Early detection is the key to minimizin</text>
<text text-anchor="middle" x="53321.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g failure damage induced by configuratio</text>
<text text-anchor="middle" x="53321.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n errors, especially those errors in con</text>
<text text-anchor="middle" x="53321.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">figurations that control failure handlin</text>
<text text-anchor="middle" x="53321.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g and fault tolerance. Since such config</text>
<text text-anchor="middle" x="53321.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">urations are not needed for initializati</text>
<text text-anchor="middle" x="53321.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on, many systems do not check their sett</text>
<text text-anchor="middle" x="53321.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ings early (e.g., at startup time). Cons</text>
<text text-anchor="middle" x="53321.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">equently, the errors become latent until</text>
<text text-anchor="middle" x="53321.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> their manifestations cause severe damag</text>
<text text-anchor="middle" x="53321.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e, such as breaking the failure handling</text>
<text text-anchor="middle" x="53321.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. Such latent errors are likely to escap</text>
<text text-anchor="middle" x="53321.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e from sysadmins’ observation and test</text>
<text text-anchor="middle" x="53321.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing, and be deployed to production at sc</text>
<text text-anchor="middle" x="53321.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ale.Our study shows that many of today’s mature, widely&#45;used software systems </text>
<text text-anchor="middle" x="53321.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">are subject to latent configuration erro</text>
<text text-anchor="middle" x="53321.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rs (referred to as LC errors) in their c</text>
<text text-anchor="middle" x="53321.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ritically important configurations—tho</text>
<text text-anchor="middle" x="53321.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">se related to the system’s reliability</text>
<text text-anchor="middle" x="53321.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, availability, and serviceability. One </text>
<text text-anchor="middle" x="53321.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">root cause is that many (14.0%–93.2%) </text>
<text text-anchor="middle" x="53321.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of these configurations do not have any </text>
<text text-anchor="middle" x="53321.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">special code for checking the correctnes</text>
<text text-anchor="middle" x="53321.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s of their settings at the system’s in</text>
<text text-anchor="middle" x="53321.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">itialization time.To help software syste</text>
<text text-anchor="middle" x="53321.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ms detect LC errors early, we present a </text>
<text text-anchor="middle" x="53321.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tool named PCHECK that analyzes the sour</text>
<text text-anchor="middle" x="53321.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ce code and automatically generates conf</text>
<text text-anchor="middle" x="53321.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iguration checking code (called checkers</text>
<text text-anchor="middle" x="53321.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">). The checkers emulate the late executi</text>
<text text-anchor="middle" x="53321.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on that uses configuration values, and d</text>
<text text-anchor="middle" x="53321.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">etect LC errors if the error manifestati</text>
<text text-anchor="middle" x="53321.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ons are captured during the emulated exe</text>
<text text-anchor="middle" x="53321.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cution. Our results show that PCHECK can</text>
<text text-anchor="middle" x="53321.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> help systems detect 75+% of real&#45;world </text>
<text text-anchor="middle" x="53321.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">LC errors at the initialization phase, i</text>
<text text-anchor="middle" x="53321.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ncluding 37 new LC errors that have not </text>
<text text-anchor="middle" x="53321.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">been exposed before. Compared with exist</text>
<text text-anchor="middle" x="53321.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing detection tools, it can detect 31% m</text>
<text text-anchor="middle" x="53321.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ore LC errors.</text>
</g>
<!-- 48&#45;&gt; Early detection is the key to minimizin
g failure damage induced by configuratio
n errors, especially those errors in con
figurations that control failure handlin
g and fault tolerance. Since such config
urations are not needed for initializati
on, many systems do not check their sett
ings early (e.g., at startup time). Cons
equently, the errors become latent until
 their manifestations cause severe damag
e, such as breaking the failure handling
. Such latent errors are likely to escap
e from sysadmins’ observation and test
ing, and be deployed to production at sc
ale.Our study shows that many of today’s mature, widely&#45;used software systems 
are subject to latent configuration erro
rs (referred to as LC errors) in their c
ritically important configurations—tho
se related to the system’s reliability
, availability, and serviceability. One 
root cause is that many (14.0%–93.2%) 
of these configurations do not have any 
special code for checking the correctnes
s of their settings at the system’s in
itialization time.To help software syste
ms detect LC errors early, we present a 
tool named PCHECK that analyzes the sour
ce code and automatically generates conf
iguration checking code (called checkers
). The checkers emulate the late executi
on that uses configuration values, and d
etect LC errors if the error manifestati
ons are captured during the emulated exe
cution. Our results show that PCHECK can
 help systems detect 75+% of real&#45;world 
LC errors at the initialization phase, i
ncluding 37 new LC errors that have not 
been exposed before. Compared with exist
ing detection tools, it can detect 31% m
ore LC errors. -->
<g id="edge196" class="edge">
<title>48&#45;&gt; Early detection is the key to minimizin
g failure damage induced by configuratio
n errors, especially those errors in con
figurations that control failure handlin
g and fault tolerance. Since such config
urations are not needed for initializati
on, many systems do not check their sett
ings early (e.g., at startup time). Cons
equently, the errors become latent until
 their manifestations cause severe damag
e, such as breaking the failure handling
. Such latent errors are likely to escap
e from sysadmins’ observation and test
ing, and be deployed to production at sc
ale.Our study shows that many of today’s mature, widely&#45;used software systems 
are subject to latent configuration erro
rs (referred to as LC errors) in their c
ritically important configurations—tho
se related to the system’s reliability
, availability, and serviceability. One 
root cause is that many (14.0%–93.2%) 
of these configurations do not have any 
special code for checking the correctnes
s of their settings at the system’s in
itialization time.To help software syste
ms detect LC errors early, we present a 
tool named PCHECK that analyzes the sour
ce code and automatically generates conf
iguration checking code (called checkers
). The checkers emulate the late executi
on that uses configuration values, and d
etect LC errors if the error manifestati
ons are captured during the emulated exe
cution. Our results show that PCHECK can
 help systems detect 75+% of real&#45;world 
LC errors at the initialization phase, i
ncluding 37 new LC errors that have not 
been exposed before. Compared with exist
ing detection tools, it can detect 31% m
ore LC errors.</title>
<path fill="none" stroke="#000000" d="M52630.0057,-974.8952C52706.2163,-971.1718 52921.4137,-957.6872 52981.022,-922.0672 53034.607,-890.0466 53082.3548,-846.0127 53123.9065,-797.7815"/>
<polygon fill="#000000" stroke="#000000" points="53126.7077,-799.8902 53130.522,-790.0058 53121.3762,-795.3542 53126.7077,-799.8902"/>
</g>
<!-- Fast, Lean, and Accurate: Modeling Passw
ord Guessability Using Neural NetworksLi
nk to Paper -->
<g id="node192" class="node">
<title>Fast, Lean, and Accurate: Modeling Passw
ord Guessability Using Neural NetworksLi
nk to Paper</title>
<ellipse fill="none" stroke="#000000" cx="53852.022" cy="-461.0336" rx="181.5512" ry="35.2113"/>
<text text-anchor="middle" x="53852.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Fast, Lean, and Accurate: Modeling Passw</text>
<text text-anchor="middle" x="53852.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ord Guessability Using Neural NetworksLi</text>
<text text-anchor="middle" x="53852.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nk to Paper</text>
</g>
<!-- 49&#45;&gt;Fast, Lean, and Accurate: Modeling Passw
ord Guessability Using Neural NetworksLi
nk to Paper -->
<g id="edge198" class="edge">
<title>49&#45;&gt;Fast, Lean, and Accurate: Modeling Passw
ord Guessability Using Neural NetworksLi
nk to Paper</title>
<path fill="none" stroke="#000000" d="M54034.5162,-958.3386C54008.1109,-886.383 53908.4602,-614.8303 53868.6249,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="53871.8038,-504.7803 53865.073,-496.5982 53865.2323,-507.1919 53871.8038,-504.7803"/>
</g>
<!-- William Melicher, Blase Ur, Sean M. Segr
eti, Saranga Komanduri, Lujo Bauer, Nico
las Christin, and Lorrie Faith Cranor, C
arnegie Mellon UniversityBest Paper at U
SENIX Security &#39;16: Link to Paper -->
<g id="node193" class="node">
<title>William Melicher, Blase Ur, Sean M. Segr
eti, Saranga Komanduri, Lujo Bauer, Nico
las Christin, and Lorrie Faith Cranor, C
arnegie Mellon UniversityBest Paper at U
SENIX Security &#39;16: Link to Paper</title>
<ellipse fill="none" stroke="#000000" cx="54231.022" cy="-461.0336" rx="179.4274" ry="55.3091"/>
<text text-anchor="middle" x="54231.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">William Melicher, Blase Ur, Sean M. Segr</text>
<text text-anchor="middle" x="54231.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eti, Saranga Komanduri, Lujo Bauer, Nico</text>
<text text-anchor="middle" x="54231.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">las Christin, and Lorrie Faith Cranor, C</text>
<text text-anchor="middle" x="54231.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">arnegie Mellon UniversityBest Paper at U</text>
<text text-anchor="middle" x="54231.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SENIX Security &#39;16: Link to Paper</text>
</g>
<!-- 49&#45;&gt;William Melicher, Blase Ur, Sean M. Segr
eti, Saranga Komanduri, Lujo Bauer, Nico
las Christin, and Lorrie Faith Cranor, C
arnegie Mellon UniversityBest Paper at U
SENIX Security &#39;16: Link to Paper -->
<g id="edge199" class="edge">
<title>49&#45;&gt;William Melicher, Blase Ur, Sean M. Segr
eti, Saranga Komanduri, Lujo Bauer, Nico
las Christin, and Lorrie Faith Cranor, C
arnegie Mellon UniversityBest Paper at U
SENIX Security &#39;16: Link to Paper</title>
<path fill="none" stroke="#000000" d="M54047.5622,-958.3386C54072.6324,-890.3807 54163.381,-644.3882 54207.1227,-525.8175"/>
<polygon fill="#000000" stroke="#000000" points="54210.5204,-526.7198 54210.6978,-516.1264 54203.953,-524.297 54210.5204,-526.7198"/>
</g>
<!-- Human&#45;chosen text passwords, today’s d
ominant form of authentication, are vuln
erable to guessing attacks. Unfortunatel
y, existing approaches for evaluating pa
ssword strength by modeling adversarial 
password guessing are either inaccurate 
or orders of magnitude too large and too
 slow for real&#45;time, client&#45;side passwor
d checking. We propose using artificial 
neural networks to model text passwords’
 resistance to guessing attacks and ex
plore how different architectures and tr
aining methods impact neural networks’ guessing effectiveness. We show that ne
ural networks can often guess passwords 
more effectively than state&#45;of&#45;the&#45;art a
pproaches, such as probabilistic context
&#45;free grammars and Markov models. We als
o show that our neural networks can be h
ighly compressed—to as little as hundr
eds of kilobytes— without substantiall
y worsening guessing effectiveness. Buil
ding on these results, we implement in J
avaScript the first principled client&#45;si
de model of password guessing, which ana
lyzes a password’s resistance to a gue
ssing attack of arbitrary duration with 
sub&#45;second latency. Together, our contri
butions enable more accurate and practic
al password checking than was previously
 possible. -->
<g id="node194" class="node">
<title>Human&#45;chosen text passwords, today’s d
ominant form of authentication, are vuln
erable to guessing attacks. Unfortunatel
y, existing approaches for evaluating pa
ssword strength by modeling adversarial 
password guessing are either inaccurate 
or orders of magnitude too large and too
 slow for real&#45;time, client&#45;side passwor
d checking. We propose using artificial 
neural networks to model text passwords’
 resistance to guessing attacks and ex
plore how different architectures and tr
aining methods impact neural networks’ guessing effectiveness. We show that ne
ural networks can often guess passwords 
more effectively than state&#45;of&#45;the&#45;art a
pproaches, such as probabilistic context
&#45;free grammars and Markov models. We als
o show that our neural networks can be h
ighly compressed—to as little as hundr
eds of kilobytes— without substantiall
y worsening guessing effectiveness. Buil
ding on these results, we implement in J
avaScript the first principled client&#45;si
de model of password guessing, which ana
lyzes a password’s resistance to a gue
ssing attack of arbitrary duration with 
sub&#45;second latency. Together, our contri
butions enable more accurate and practic
al password checking than was previously
 possible.</title>
<ellipse fill="none" stroke="#000000" cx="54760.022" cy="-461.0336" rx="331.2304" ry="302.7835"/>
<text text-anchor="middle" x="54760.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Human&#45;chosen text passwords, today’s d</text>
<text text-anchor="middle" x="54760.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ominant form of authentication, are vuln</text>
<text text-anchor="middle" x="54760.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">erable to guessing attacks. Unfortunatel</text>
<text text-anchor="middle" x="54760.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y, existing approaches for evaluating pa</text>
<text text-anchor="middle" x="54760.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ssword strength by modeling adversarial </text>
<text text-anchor="middle" x="54760.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">password guessing are either inaccurate </text>
<text text-anchor="middle" x="54760.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">or orders of magnitude too large and too</text>
<text text-anchor="middle" x="54760.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> slow for real&#45;time, client&#45;side passwor</text>
<text text-anchor="middle" x="54760.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d checking. We propose using artificial </text>
<text text-anchor="middle" x="54760.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">neural networks to model text passwords’</text>
<text text-anchor="middle" x="54760.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> resistance to guessing attacks and ex</text>
<text text-anchor="middle" x="54760.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">plore how different architectures and tr</text>
<text text-anchor="middle" x="54760.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aining methods impact neural networks’ guessing effectiveness. We show that ne</text>
<text text-anchor="middle" x="54760.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ural networks can often guess passwords </text>
<text text-anchor="middle" x="54760.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">more effectively than state&#45;of&#45;the&#45;art a</text>
<text text-anchor="middle" x="54760.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pproaches, such as probabilistic context</text>
<text text-anchor="middle" x="54760.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;free grammars and Markov models. We als</text>
<text text-anchor="middle" x="54760.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o show that our neural networks can be h</text>
<text text-anchor="middle" x="54760.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ighly compressed—to as little as hundr</text>
<text text-anchor="middle" x="54760.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eds of kilobytes— without substantiall</text>
<text text-anchor="middle" x="54760.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y worsening guessing effectiveness. Buil</text>
<text text-anchor="middle" x="54760.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ding on these results, we implement in J</text>
<text text-anchor="middle" x="54760.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">avaScript the first principled client&#45;si</text>
<text text-anchor="middle" x="54760.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">de model of password guessing, which ana</text>
<text text-anchor="middle" x="54760.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lyzes a password’s resistance to a gue</text>
<text text-anchor="middle" x="54760.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ssing attack of arbitrary duration with </text>
<text text-anchor="middle" x="54760.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sub&#45;second latency. Together, our contri</text>
<text text-anchor="middle" x="54760.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">butions enable more accurate and practic</text>
<text text-anchor="middle" x="54760.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">al password checking than was previously</text>
<text text-anchor="middle" x="54760.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> possible.</text>
</g>
<!-- 49&#45;&gt;Human&#45;chosen text passwords, today’s d
ominant form of authentication, are vuln
erable to guessing attacks. Unfortunatel
y, existing approaches for evaluating pa
ssword strength by modeling adversarial 
password guessing are either inaccurate 
or orders of magnitude too large and too
 slow for real&#45;time, client&#45;side passwor
d checking. We propose using artificial 
neural networks to model text passwords’
 resistance to guessing attacks and ex
plore how different architectures and tr
aining methods impact neural networks’ guessing effectiveness. We show that ne
ural networks can often guess passwords 
more effectively than state&#45;of&#45;the&#45;art a
pproaches, such as probabilistic context
&#45;free grammars and Markov models. We als
o show that our neural networks can be h
ighly compressed—to as little as hundr
eds of kilobytes— without substantiall
y worsening guessing effectiveness. Buil
ding on these results, we implement in J
avaScript the first principled client&#45;si
de model of password guessing, which ana
lyzes a password’s resistance to a gue
ssing attack of arbitrary duration with 
sub&#45;second latency. Together, our contri
butions enable more accurate and practic
al password checking than was previously
 possible. -->
<g id="edge200" class="edge">
<title>49&#45;&gt;Human&#45;chosen text passwords, today’s d
ominant form of authentication, are vuln
erable to guessing attacks. Unfortunatel
y, existing approaches for evaluating pa
ssword strength by modeling adversarial 
password guessing are either inaccurate 
or orders of magnitude too large and too
 slow for real&#45;time, client&#45;side passwor
d checking. We propose using artificial 
neural networks to model text passwords’
 resistance to guessing attacks and ex
plore how different architectures and tr
aining methods impact neural networks’ guessing effectiveness. We show that ne
ural networks can often guess passwords 
more effectively than state&#45;of&#45;the&#45;art a
pproaches, such as probabilistic context
&#45;free grammars and Markov models. We als
o show that our neural networks can be h
ighly compressed—to as little as hundr
eds of kilobytes— without substantiall
y worsening guessing effectiveness. Buil
ding on these results, we implement in J
avaScript the first principled client&#45;si
de model of password guessing, which ana
lyzes a password’s resistance to a gue
ssing attack of arbitrary duration with 
sub&#45;second latency. Together, our contri
butions enable more accurate and practic
al password checking than was previously
 possible.</title>
<path fill="none" stroke="#000000" d="M54068.0033,-974.8911C54144.2072,-971.1566 54359.3887,-957.6454 54419.022,-922.0672 54493.1677,-877.8308 54556.2114,-810.6562 54607.1659,-741.1616"/>
<polygon fill="#000000" stroke="#000000" points="54610.282,-742.8265 54613.3199,-732.6765 54604.6155,-738.7167 54610.282,-742.8265"/>
</g>
<!-- Giza: Erasure Coding Objects across Glob
al Data Centers -->
<g id="node196" class="node">
<title>Giza: Erasure Coding Objects across Glob
al Data Centers</title>
<ellipse fill="none" stroke="#000000" cx="55289.022" cy="-461.0336" rx="179.0724" ry="25.4118"/>
<text text-anchor="middle" x="55289.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Giza: Erasure Coding Objects across Glob</text>
<text text-anchor="middle" x="55289.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">al Data Centers</text>
</g>
<!-- 50&#45;&gt;Giza: Erasure Coding Objects across Glob
al Data Centers -->
<g id="edge202" class="edge">
<title>50&#45;&gt;Giza: Erasure Coding Objects across Glob
al Data Centers</title>
<path fill="none" stroke="#000000" d="M55476.3441,-958.3386C55448.3276,-883.9602 55339.9799,-596.3173 55302.1478,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="55305.409,-494.6086 55298.6086,-486.4843 55298.8583,-497.0762 55305.409,-494.6086"/>
</g>
<!-- Yu Lin Chen, NYU &amp; Microsoft Corporation
; Shuai Mu and Jinyang Li, NYU; Cheng Hu
ang, Jin Li, Aaron Ogus, and Douglas Phi
llips, Microsoft Corporation -->
<g id="node197" class="node">
<title>Yu Lin Chen, NYU &amp; Microsoft Corporation
; Shuai Mu and Jinyang Li, NYU; Cheng Hu
ang, Jin Li, Aaron Ogus, and Douglas Phi
llips, Microsoft Corporation</title>
<ellipse fill="none" stroke="#000000" cx="55677.022" cy="-461.0336" rx="190.1239" ry="45.011"/>
<text text-anchor="middle" x="55677.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Yu Lin Chen, NYU &amp; Microsoft Corporation</text>
<text text-anchor="middle" x="55677.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">; Shuai Mu and Jinyang Li, NYU; Cheng Hu</text>
<text text-anchor="middle" x="55677.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ang, Jin Li, Aaron Ogus, and Douglas Phi</text>
<text text-anchor="middle" x="55677.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">llips, Microsoft Corporation</text>
</g>
<!-- 50&#45;&gt;Yu Lin Chen, NYU &amp; Microsoft Corporation
; Shuai Mu and Jinyang Li, NYU; Cheng Hu
ang, Jin Li, Aaron Ogus, and Douglas Phi
llips, Microsoft Corporation -->
<g id="edge203" class="edge">
<title>50&#45;&gt;Yu Lin Chen, NYU &amp; Microsoft Corporation
; Shuai Mu and Jinyang Li, NYU; Cheng Hu
ang, Jin Li, Aaron Ogus, and Douglas Phi
llips, Microsoft Corporation</title>
<path fill="none" stroke="#000000" d="M55489.6999,-958.3386C55516.0491,-888.3865 55613.453,-629.7974 55656.4246,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="55659.7904,-516.7094 55660.0401,-506.1175 55653.2397,-514.2419 55659.7904,-516.7094"/>
</g>
<!-- Microsoft Azure Storage is a global clou
d storage system with a footprint in 38 
geographic regions. To protect customer 
data against catastrophic data center fa
ilures, it optionally replicates data to
 secondary DCs hundreds ofmiles away. Us
ing Microsoft OneDrive as an example, th
is paper illustrates the characteristics
 of typical cloud storage workloads and 
the opportunity to lower storage cost fo
r geo&#45;redundancy with erasure coding.The
 paper presents the design, implementati
on and evaluation of Giza – a strongly
 consistent, versioned object store that
 applies erasure coding across global da
ta centers. The key technical challenge 
Giza addresses isto achieve single cross
&#45;DC round trip latency for the common co
ntention&#45;free workload, while also maint
aining strong consistency when there are
 conflicting access. Giza addresses the 
challenge with a novel implementationof 
well&#45;known distributed consensus algorit
hms tailored for restricted cloud storag
e APIs. Giza is deployed to 11 DCs acros
s 3 continents and experimental results 
demonstrate that it achieves our design 
goals. -->
<g id="node198" class="node">
<title>Microsoft Azure Storage is a global clou
d storage system with a footprint in 38 
geographic regions. To protect customer 
data against catastrophic data center fa
ilures, it optionally replicates data to
 secondary DCs hundreds ofmiles away. Us
ing Microsoft OneDrive as an example, th
is paper illustrates the characteristics
 of typical cloud storage workloads and 
the opportunity to lower storage cost fo
r geo&#45;redundancy with erasure coding.The
 paper presents the design, implementati
on and evaluation of Giza – a strongly
 consistent, versioned object store that
 applies erasure coding across global da
ta centers. The key technical challenge 
Giza addresses isto achieve single cross
&#45;DC round trip latency for the common co
ntention&#45;free workload, while also maint
aining strong consistency when there are
 conflicting access. Giza addresses the 
challenge with a novel implementationof 
well&#45;known distributed consensus algorit
hms tailored for restricted cloud storag
e APIs. Giza is deployed to 11 DCs acros
s 3 continents and experimental results 
demonstrate that it achieves our design 
goals.</title>
<ellipse fill="none" stroke="#000000" cx="56069.022" cy="-461.0336" rx="183.7053" ry="282.6855"/>
<text text-anchor="middle" x="56069.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Microsoft Azure Storage is a global clou</text>
<text text-anchor="middle" x="56069.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d storage system with a footprint in 38 </text>
<text text-anchor="middle" x="56069.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">geographic regions. To protect customer </text>
<text text-anchor="middle" x="56069.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">data against catastrophic data center fa</text>
<text text-anchor="middle" x="56069.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ilures, it optionally replicates data to</text>
<text text-anchor="middle" x="56069.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> secondary DCs hundreds ofmiles away. Us</text>
<text text-anchor="middle" x="56069.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing Microsoft OneDrive as an example, th</text>
<text text-anchor="middle" x="56069.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">is paper illustrates the characteristics</text>
<text text-anchor="middle" x="56069.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of typical cloud storage workloads and </text>
<text text-anchor="middle" x="56069.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the opportunity to lower storage cost fo</text>
<text text-anchor="middle" x="56069.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r geo&#45;redundancy with erasure coding.The</text>
<text text-anchor="middle" x="56069.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> paper presents the design, implementati</text>
<text text-anchor="middle" x="56069.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on and evaluation of Giza – a strongly</text>
<text text-anchor="middle" x="56069.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> consistent, versioned object store that</text>
<text text-anchor="middle" x="56069.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> applies erasure coding across global da</text>
<text text-anchor="middle" x="56069.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ta centers. The key technical challenge </text>
<text text-anchor="middle" x="56069.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Giza addresses isto achieve single cross</text>
<text text-anchor="middle" x="56069.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;DC round trip latency for the common co</text>
<text text-anchor="middle" x="56069.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntention&#45;free workload, while also maint</text>
<text text-anchor="middle" x="56069.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aining strong consistency when there are</text>
<text text-anchor="middle" x="56069.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> conflicting access. Giza addresses the </text>
<text text-anchor="middle" x="56069.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">challenge with a novel implementationof </text>
<text text-anchor="middle" x="56069.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">well&#45;known distributed consensus algorit</text>
<text text-anchor="middle" x="56069.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hms tailored for restricted cloud storag</text>
<text text-anchor="middle" x="56069.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e APIs. Giza is deployed to 11 DCs acros</text>
<text text-anchor="middle" x="56069.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s 3 continents and experimental results </text>
<text text-anchor="middle" x="56069.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">demonstrate that it achieves our design </text>
<text text-anchor="middle" x="56069.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">goals.</text>
</g>
<!-- 50&#45;&gt;Microsoft Azure Storage is a global clou
d storage system with a footprint in 38 
geographic regions. To protect customer 
data against catastrophic data center fa
ilures, it optionally replicates data to
 secondary DCs hundreds ofmiles away. Us
ing Microsoft OneDrive as an example, th
is paper illustrates the characteristics
 of typical cloud storage workloads and 
the opportunity to lower storage cost fo
r geo&#45;redundancy with erasure coding.The
 paper presents the design, implementati
on and evaluation of Giza – a strongly
 consistent, versioned object store that
 applies erasure coding across global da
ta centers. The key technical challenge 
Giza addresses isto achieve single cross
&#45;DC round trip latency for the common co
ntention&#45;free workload, while also maint
aining strong consistency when there are
 conflicting access. Giza addresses the 
challenge with a novel implementationof 
well&#45;known distributed consensus algorit
hms tailored for restricted cloud storag
e APIs. Giza is deployed to 11 DCs acros
s 3 continents and experimental results 
demonstrate that it achieves our design 
goals. -->
<g id="edge204" class="edge">
<title>50&#45;&gt;Microsoft Azure Storage is a global clou
d storage system with a footprint in 38 
geographic regions. To protect customer 
data against catastrophic data center fa
ilures, it optionally replicates data to
 secondary DCs hundreds ofmiles away. Us
ing Microsoft OneDrive as an example, th
is paper illustrates the characteristics
 of typical cloud storage workloads and 
the opportunity to lower storage cost fo
r geo&#45;redundancy with erasure coding.The
 paper presents the design, implementati
on and evaluation of Giza – a strongly
 consistent, versioned object store that
 applies erasure coding across global da
ta centers. The key technical challenge 
Giza addresses isto achieve single cross
&#45;DC round trip latency for the common co
ntention&#45;free workload, while also maint
aining strong consistency when there are
 conflicting access. Giza addresses the 
challenge with a novel implementationof 
well&#45;known distributed consensus algorit
hms tailored for restricted cloud storag
e APIs. Giza is deployed to 11 DCs acros
s 3 continents and experimental results 
demonstrate that it achieves our design 
goals.</title>
<path fill="none" stroke="#000000" d="M55510.1246,-975.7483C55589.336,-974.3018 55818.4885,-966.3007 55876.022,-922.0672 55935.8489,-876.0705 55977.3011,-808.1164 56005.9586,-738.4327"/>
<polygon fill="#000000" stroke="#000000" points="56009.2529,-739.6217 56009.7417,-729.0381 56002.7596,-737.0069 56009.2529,-739.6217"/>
</g>
<!-- SmartCuckoo: A Fast and Cost&#45;Efficient H
ashing Index Scheme for Cloud Storage Sy
stems -->
<g id="node200" class="node">
<title>SmartCuckoo: A Fast and Cost&#45;Efficient H
ashing Index Scheme for Cloud Storage Sy
stems</title>
<ellipse fill="none" stroke="#000000" cx="56453.022" cy="-461.0336" rx="182.1532" ry="35.2113"/>
<text text-anchor="middle" x="56453.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SmartCuckoo: A Fast and Cost&#45;Efficient H</text>
<text text-anchor="middle" x="56453.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ashing Index Scheme for Cloud Storage Sy</text>
<text text-anchor="middle" x="56453.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stems</text>
</g>
<!-- 51&#45;&gt;SmartCuckoo: A Fast and Cost&#45;Efficient H
ashing Index Scheme for Cloud Storage Sy
stems -->
<g id="edge206" class="edge">
<title>51&#45;&gt;SmartCuckoo: A Fast and Cost&#45;Efficient H
ashing Index Scheme for Cloud Storage Sy
stems</title>
<path fill="none" stroke="#000000" d="M56643.2408,-958.3386C56615.6901,-886.3106 56511.6398,-614.2832 56470.2024,-505.9498"/>
<polygon fill="#000000" stroke="#000000" points="56473.4671,-504.6879 56466.6254,-496.5982 56466.929,-507.1887 56473.4671,-504.6879"/>
</g>
<!-- Yuanyuan Sun and Yu Hua, Huazhong Univer
sity of Science and Technology; Song Jia
ng, University of Texas, Arlington; Qiuy
u Li, Shunde Cao, and Pengfei Zuo, Huazh
ong University of Science and Technology -->
<g id="node201" class="node">
<title>Yuanyuan Sun and Yu Hua, Huazhong Univer
sity of Science and Technology; Song Jia
ng, University of Texas, Arlington; Qiuy
u Li, Shunde Cao, and Pengfei Zuo, Huazh
ong University of Science and Technology</title>
<ellipse fill="none" stroke="#000000" cx="56847.022" cy="-461.0336" rx="193.4631" ry="55.3091"/>
<text text-anchor="middle" x="56847.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Yuanyuan Sun and Yu Hua, Huazhong Univer</text>
<text text-anchor="middle" x="56847.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sity of Science and Technology; Song Jia</text>
<text text-anchor="middle" x="56847.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng, University of Texas, Arlington; Qiuy</text>
<text text-anchor="middle" x="56847.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">u Li, Shunde Cao, and Pengfei Zuo, Huazh</text>
<text text-anchor="middle" x="56847.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ong University of Science and Technology</text>
</g>
<!-- 51&#45;&gt;Yuanyuan Sun and Yu Hua, Huazhong Univer
sity of Science and Technology; Song Jia
ng, University of Texas, Arlington; Qiuy
u Li, Shunde Cao, and Pengfei Zuo, Huazh
ong University of Science and Technology -->
<g id="edge207" class="edge">
<title>51&#45;&gt;Yuanyuan Sun and Yu Hua, Huazhong Univer
sity of Science and Technology; Song Jia
ng, University of Texas, Arlington; Qiuy
u Li, Shunde Cao, and Pengfei Zuo, Huazh
ong University of Science and Technology</title>
<path fill="none" stroke="#000000" d="M56656.8032,-958.3386C56682.797,-890.3807 56776.889,-644.3882 56822.2422,-525.8175"/>
<polygon fill="#000000" stroke="#000000" points="56825.6454,-526.7169 56825.949,-516.1264 56819.1074,-524.2161 56825.6454,-526.7169"/>
</g>
<!-- Fast query services are important to imp
rove overall per&#45; formance of large&#45;scal
e storage systems when handling a large 
number of files. Open&#45;addressing cuckoo 
hash schemes have been widely used to su
pport query services due to the salient 
features of simplicity and ease of use. 
Conventional schemes are unfortunately i
nadequate to address the potential probl
em of having endless loops during item i
nsertion, which degrades the query perfo
rmance. To address the problem, we propo
se a cost&#45; efficient cuckoo hashing sche
me, named SmartCuckoo. The idea behind S
martCuckoo is to represent the hashing r
elationship as a directed pseudoforest a
nd use it to track item placements for a
ccurately predetermining the occurrence 
of endless loop. SmartCuckoo can efficie
ntly predetermine insertion failures wit
hout paying a high cost of carrying out 
step&#45;by&#45;step probing. We have implemente
d SmartCuckoo in a large&#45;scale cloud sto
rage system. Extensive evaluations using
 three real&#45; world traces and the YCSB b
enchmark demonstrate the efficiency and 
efficacy of SmartCuckoo. We have release
d the source code of SmartCuckoo for pub
lic use. -->
<g id="node202" class="node">
<title>Fast query services are important to imp
rove overall per&#45; formance of large&#45;scal
e storage systems when handling a large 
number of files. Open&#45;addressing cuckoo 
hash schemes have been widely used to su
pport query services due to the salient 
features of simplicity and ease of use. 
Conventional schemes are unfortunately i
nadequate to address the potential probl
em of having endless loops during item i
nsertion, which degrades the query perfo
rmance. To address the problem, we propo
se a cost&#45; efficient cuckoo hashing sche
me, named SmartCuckoo. The idea behind S
martCuckoo is to represent the hashing r
elationship as a directed pseudoforest a
nd use it to track item placements for a
ccurately predetermining the occurrence 
of endless loop. SmartCuckoo can efficie
ntly predetermine insertion failures wit
hout paying a high cost of carrying out 
step&#45;by&#45;step probing. We have implemente
d SmartCuckoo in a large&#45;scale cloud sto
rage system. Extensive evaluations using
 three real&#45; world traces and the YCSB b
enchmark demonstrate the efficiency and 
efficacy of SmartCuckoo. We have release
d the source code of SmartCuckoo for pub
lic use.</title>
<ellipse fill="none" stroke="#000000" cx="57246.022" cy="-461.0336" rx="188.3799" ry="292.9846"/>
<text text-anchor="middle" x="57246.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Fast query services are important to imp</text>
<text text-anchor="middle" x="57246.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rove overall per&#45; formance of large&#45;scal</text>
<text text-anchor="middle" x="57246.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e storage systems when handling a large </text>
<text text-anchor="middle" x="57246.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">number of files. Open&#45;addressing cuckoo </text>
<text text-anchor="middle" x="57246.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hash schemes have been widely used to su</text>
<text text-anchor="middle" x="57246.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pport query services due to the salient </text>
<text text-anchor="middle" x="57246.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">features of simplicity and ease of use. </text>
<text text-anchor="middle" x="57246.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Conventional schemes are unfortunately i</text>
<text text-anchor="middle" x="57246.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nadequate to address the potential probl</text>
<text text-anchor="middle" x="57246.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">em of having endless loops during item i</text>
<text text-anchor="middle" x="57246.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nsertion, which degrades the query perfo</text>
<text text-anchor="middle" x="57246.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rmance. To address the problem, we propo</text>
<text text-anchor="middle" x="57246.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">se a cost&#45; efficient cuckoo hashing sche</text>
<text text-anchor="middle" x="57246.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">me, named SmartCuckoo. The idea behind S</text>
<text text-anchor="middle" x="57246.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">martCuckoo is to represent the hashing r</text>
<text text-anchor="middle" x="57246.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">elationship as a directed pseudoforest a</text>
<text text-anchor="middle" x="57246.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd use it to track item placements for a</text>
<text text-anchor="middle" x="57246.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ccurately predetermining the occurrence </text>
<text text-anchor="middle" x="57246.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of endless loop. SmartCuckoo can efficie</text>
<text text-anchor="middle" x="57246.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntly predetermine insertion failures wit</text>
<text text-anchor="middle" x="57246.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hout paying a high cost of carrying out </text>
<text text-anchor="middle" x="57246.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">step&#45;by&#45;step probing. We have implemente</text>
<text text-anchor="middle" x="57246.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d SmartCuckoo in a large&#45;scale cloud sto</text>
<text text-anchor="middle" x="57246.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rage system. Extensive evaluations using</text>
<text text-anchor="middle" x="57246.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> three real&#45; world traces and the YCSB b</text>
<text text-anchor="middle" x="57246.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">enchmark demonstrate the efficiency and </text>
<text text-anchor="middle" x="57246.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">efficacy of SmartCuckoo. We have release</text>
<text text-anchor="middle" x="57246.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d the source code of SmartCuckoo for pub</text>
<text text-anchor="middle" x="57246.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lic use.</text>
</g>
<!-- 51&#45;&gt;Fast query services are important to imp
rove overall per&#45; formance of large&#45;scal
e storage systems when handling a large 
number of files. Open&#45;addressing cuckoo 
hash schemes have been widely used to su
pport query services due to the salient 
features of simplicity and ease of use. 
Conventional schemes are unfortunately i
nadequate to address the potential probl
em of having endless loops during item i
nsertion, which degrades the query perfo
rmance. To address the problem, we propo
se a cost&#45; efficient cuckoo hashing sche
me, named SmartCuckoo. The idea behind S
martCuckoo is to represent the hashing r
elationship as a directed pseudoforest a
nd use it to track item placements for a
ccurately predetermining the occurrence 
of endless loop. SmartCuckoo can efficie
ntly predetermine insertion failures wit
hout paying a high cost of carrying out 
step&#45;by&#45;step probing. We have implemente
d SmartCuckoo in a large&#45;scale cloud sto
rage system. Extensive evaluations using
 three real&#45; world traces and the YCSB b
enchmark demonstrate the efficiency and 
efficacy of SmartCuckoo. We have release
d the source code of SmartCuckoo for pub
lic use. -->
<g id="edge208" class="edge">
<title>51&#45;&gt;Fast query services are important to imp
rove overall per&#45; formance of large&#45;scal
e storage systems when handling a large 
number of files. Open&#45;addressing cuckoo 
hash schemes have been widely used to su
pport query services due to the salient 
features of simplicity and ease of use. 
Conventional schemes are unfortunately i
nadequate to address the potential probl
em of having endless loops during item i
nsertion, which degrades the query perfo
rmance. To address the problem, we propo
se a cost&#45; efficient cuckoo hashing sche
me, named SmartCuckoo. The idea behind S
martCuckoo is to represent the hashing r
elationship as a directed pseudoforest a
nd use it to track item placements for a
ccurately predetermining the occurrence 
of endless loop. SmartCuckoo can efficie
ntly predetermine insertion failures wit
hout paying a high cost of carrying out 
step&#45;by&#45;step probing. We have implemente
d SmartCuckoo in a large&#45;scale cloud sto
rage system. Extensive evaluations using
 three real&#45; world traces and the YCSB b
enchmark demonstrate the efficiency and 
efficacy of SmartCuckoo. We have release
d the source code of SmartCuckoo for pub
lic use.</title>
<path fill="none" stroke="#000000" d="M56676.9069,-973.9653C56761.6491,-967.1304 57019.3367,-944.6692 57049.022,-922.0672 57107.2268,-877.7508 57148.4473,-812.8401 57177.562,-745.6345"/>
<polygon fill="#000000" stroke="#000000" points="57180.9072,-746.711 57181.5903,-736.1382 57174.463,-743.9773 57180.9072,-746.711"/>
</g>
<!-- Repair Pipelining for Erasure&#45;Coded Stor
age -->
<g id="node204" class="node">
<title>Repair Pipelining for Erasure&#45;Coded Stor
age</title>
<ellipse fill="none" stroke="#000000" cx="57628.022" cy="-461.0336" rx="175.9379" ry="25.4118"/>
<text text-anchor="middle" x="57628.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Repair Pipelining for Erasure&#45;Coded Stor</text>
<text text-anchor="middle" x="57628.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">age</text>
</g>
<!-- 52&#45;&gt;Repair Pipelining for Erasure&#45;Coded Stor
age -->
<g id="edge210" class="edge">
<title>52&#45;&gt;Repair Pipelining for Erasure&#45;Coded Stor
age</title>
<path fill="none" stroke="#000000" d="M57809.5506,-958.3386C57782.4006,-883.9602 57677.4039,-596.3173 57640.7419,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="57644.0289,-494.6778 57637.3121,-486.4843 57637.4533,-497.0782 57644.0289,-494.6778"/>
</g>
<!-- Runhui Li, Xiaolu Li, Patrick P. C. Lee,
 and Qun Huang, The Chinese University o
f Hong Kong -->
<g id="node205" class="node">
<title>Runhui Li, Xiaolu Li, Patrick P. C. Lee,
 and Qun Huang, The Chinese University o
f Hong Kong</title>
<ellipse fill="none" stroke="#000000" cx="58004.022" cy="-461.0336" rx="182.8976" ry="35.2113"/>
<text text-anchor="middle" x="58004.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Runhui Li, Xiaolu Li, Patrick P. C. Lee,</text>
<text text-anchor="middle" x="58004.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and Qun Huang, The Chinese University o</text>
<text text-anchor="middle" x="58004.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f Hong Kong</text>
</g>
<!-- 52&#45;&gt;Runhui Li, Xiaolu Li, Patrick P. C. Lee,
 and Qun Huang, The Chinese University o
f Hong Kong -->
<g id="edge211" class="edge">
<title>52&#45;&gt;Runhui Li, Xiaolu Li, Patrick P. C. Lee,
 and Qun Huang, The Chinese University o
f Hong Kong</title>
<path fill="none" stroke="#000000" d="M57822.4934,-958.3386C57848.759,-886.383 57947.8824,-614.8303 57987.507,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="57990.8988,-507.1921 57991.04,-496.5982 57984.3232,-504.7918 57990.8988,-507.1921"/>
</g>
<!-- We propose repair pipelining, a techniqu
e that speeds up the repair performance 
in general erasure&#45;coded storage. By pip
elining the repair of failed data in sma
ll&#45;size units across storage nodes, repa
ir pipelining reduces the repair time to
 approximately the same as the normal re
ad time to the same amount of data in ho
mogeneous environments. We further exten
d repair pipelining for heterogeneous en
vironments. We implement a repair pipeli
ning prototype called ECPipe and integra
te it as a middleware system into two op
en&#45;source distributed storage systems HD
FS and QFS. Experiments on a local testb
ed and Amazon EC2 show that repair pipel
ining significantly improves the perform
ance of both degraded reads and full&#45;nod
e recovery over existing repair techniqu
es. -->
<g id="node206" class="node">
<title>We propose repair pipelining, a techniqu
e that speeds up the repair performance 
in general erasure&#45;coded storage. By pip
elining the repair of failed data in sma
ll&#45;size units across storage nodes, repa
ir pipelining reduces the repair time to
 approximately the same as the normal re
ad time to the same amount of data in ho
mogeneous environments. We further exten
d repair pipelining for heterogeneous en
vironments. We implement a repair pipeli
ning prototype called ECPipe and integra
te it as a middleware system into two op
en&#45;source distributed storage systems HD
FS and QFS. Experiments on a local testb
ed and Amazon EC2 show that repair pipel
ining significantly improves the perform
ance of both degraded reads and full&#45;nod
e recovery over existing repair techniqu
es.</title>
<ellipse fill="none" stroke="#000000" cx="58389.022" cy="-461.0336" rx="183.6211" ry="203.7936"/>
<text text-anchor="middle" x="58389.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">We propose repair pipelining, a techniqu</text>
<text text-anchor="middle" x="58389.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e that speeds up the repair performance </text>
<text text-anchor="middle" x="58389.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">in general erasure&#45;coded storage. By pip</text>
<text text-anchor="middle" x="58389.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">elining the repair of failed data in sma</text>
<text text-anchor="middle" x="58389.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ll&#45;size units across storage nodes, repa</text>
<text text-anchor="middle" x="58389.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ir pipelining reduces the repair time to</text>
<text text-anchor="middle" x="58389.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> approximately the same as the normal re</text>
<text text-anchor="middle" x="58389.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ad time to the same amount of data in ho</text>
<text text-anchor="middle" x="58389.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mogeneous environments. We further exten</text>
<text text-anchor="middle" x="58389.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d repair pipelining for heterogeneous en</text>
<text text-anchor="middle" x="58389.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vironments. We implement a repair pipeli</text>
<text text-anchor="middle" x="58389.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ning prototype called ECPipe and integra</text>
<text text-anchor="middle" x="58389.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">te it as a middleware system into two op</text>
<text text-anchor="middle" x="58389.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">en&#45;source distributed storage systems HD</text>
<text text-anchor="middle" x="58389.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">FS and QFS. Experiments on a local testb</text>
<text text-anchor="middle" x="58389.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed and Amazon EC2 show that repair pipel</text>
<text text-anchor="middle" x="58389.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ining significantly improves the perform</text>
<text text-anchor="middle" x="58389.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ance of both degraded reads and full&#45;nod</text>
<text text-anchor="middle" x="58389.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e recovery over existing repair techniqu</text>
<text text-anchor="middle" x="58389.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es.</text>
</g>
<!-- 52&#45;&gt;We propose repair pipelining, a techniqu
e that speeds up the repair performance 
in general erasure&#45;coded storage. By pip
elining the repair of failed data in sma
ll&#45;size units across storage nodes, repa
ir pipelining reduces the repair time to
 approximately the same as the normal re
ad time to the same amount of data in ho
mogeneous environments. We further exten
d repair pipelining for heterogeneous en
vironments. We implement a repair pipeli
ning prototype called ECPipe and integra
te it as a middleware system into two op
en&#45;source distributed storage systems HD
FS and QFS. Experiments on a local testb
ed and Amazon EC2 show that repair pipel
ining significantly improves the perform
ance of both degraded reads and full&#45;nod
e recovery over existing repair techniqu
es. -->
<g id="edge212" class="edge">
<title>52&#45;&gt;We propose repair pipelining, a techniqu
e that speeds up the repair performance 
in general erasure&#45;coded storage. By pip
elining the repair of failed data in sma
ll&#45;size units across storage nodes, repa
ir pipelining reduces the repair time to
 approximately the same as the normal re
ad time to the same amount of data in ho
mogeneous environments. We further exten
d repair pipelining for heterogeneous en
vironments. We implement a repair pipeli
ning prototype called ECPipe and integra
te it as a middleware system into two op
en&#45;source distributed storage systems HD
FS and QFS. Experiments on a local testb
ed and Amazon EC2 show that repair pipel
ining significantly improves the perform
ance of both degraded reads and full&#45;nod
e recovery over existing repair techniqu
es.</title>
<path fill="none" stroke="#000000" d="M57843.0573,-975.6064C57920.4167,-973.7762 58140.6524,-964.8405 58196.022,-922.0672 58275.1926,-860.9076 58322.1979,-761.3239 58349.952,-670.3315"/>
<polygon fill="#000000" stroke="#000000" points="58353.3188,-671.2888 58352.8268,-660.7054 58346.6115,-669.2856 58353.3188,-671.2888"/>
</g>
<!-- PARIX: Speculative Partial Writes in Era
sure&#45;Coded Systems -->
<g id="node208" class="node">
<title>PARIX: Speculative Partial Writes in Era
sure&#45;Coded Systems</title>
<ellipse fill="none" stroke="#000000" cx="58765.022" cy="-461.0336" rx="174.5304" ry="25.4118"/>
<text text-anchor="middle" x="58765.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">PARIX: Speculative Partial Writes in Era</text>
<text text-anchor="middle" x="58765.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sure&#45;Coded Systems</text>
</g>
<!-- 53&#45;&gt;PARIX: Speculative Partial Writes in Era
sure&#45;Coded Systems -->
<g id="edge214" class="edge">
<title>53&#45;&gt;PARIX: Speculative Partial Writes in Era
sure&#45;Coded Systems</title>
<path fill="none" stroke="#000000" d="M58951.3785,-958.3386C58923.5065,-883.9602 58815.7172,-596.3173 58778.0802,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="58781.3457,-494.6202 58774.5592,-486.4843 58774.7908,-497.0766 58781.3457,-494.6202"/>
</g>
<!-- Huiba Li, mos.meituan.com; Yiming Zhang,
 NUDT; Zhiming Zhang, mos.meituan.com; S
hengyun Liu, Dongsheng Li, Xiaohui Liu, 
and Yuxing Peng, NUDT -->
<g id="node209" class="node">
<title>Huiba Li, mos.meituan.com; Yiming Zhang,
 NUDT; Zhiming Zhang, mos.meituan.com; S
hengyun Liu, Dongsheng Li, Xiaohui Liu, 
and Yuxing Peng, NUDT</title>
<ellipse fill="none" stroke="#000000" cx="59151.022" cy="-461.0336" rx="193.7874" ry="45.011"/>
<text text-anchor="middle" x="59151.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Huiba Li, mos.meituan.com; Yiming Zhang,</text>
<text text-anchor="middle" x="59151.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> NUDT; Zhiming Zhang, mos.meituan.com; S</text>
<text text-anchor="middle" x="59151.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hengyun Liu, Dongsheng Li, Xiaohui Liu, </text>
<text text-anchor="middle" x="59151.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and Yuxing Peng, NUDT</text>
</g>
<!-- 53&#45;&gt;Huiba Li, mos.meituan.com; Yiming Zhang,
 NUDT; Zhiming Zhang, mos.meituan.com; S
hengyun Liu, Dongsheng Li, Xiaohui Liu, 
and Yuxing Peng, NUDT -->
<g id="edge215" class="edge">
<title>53&#45;&gt;Huiba Li, mos.meituan.com; Yiming Zhang,
 NUDT; Zhiming Zhang, mos.meituan.com; S
hengyun Liu, Dongsheng Li, Xiaohui Liu, 
and Yuxing Peng, NUDT</title>
<path fill="none" stroke="#000000" d="M58964.6655,-958.3386C58990.8788,-888.3865 59087.7806,-629.7974 59130.5307,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="59133.8959,-516.7098 59134.1276,-506.1175 59127.341,-514.2534 59133.8959,-516.7098"/>
</g>
<!-- Erasure coding (EC) has been widely used
 in cloud storage systems because it eff
ectively reduces storage redundancy whil
e providing the same level of durability
. However, EC introduces significant ove
rhead to small write operations which pe
rform partial write to an entire EC grou
p. This has been a major barrier for EC 
to be widely adopted in small&#45;write&#45;inte
nsive systems such as virtual disk servi
ce. Parity logging (PL) appends parity c
hanges to a journal to accelerate partia
l writes. However, since previous PL sch
emes have to perform a time&#45;consuming wr
ite&#45;after&#45;read for each partial write, i
.e., read the current value of the data 
and then compute and write the parity de
lta, their write performance is still mu
ch lower than that of replication&#45;based 
storage.This paper presents PARIX, a spe
culative partial write scheme for fast p
arity logging. We transform the original
 formula of parity calculation, so as to
 use the data deltas (between the curren
t/original data values), instead of the 
parity deltas, to calculate the parities
 during journal replay. For each partial
 write, this allows PARIX to speculative
ly log only the current value of the dat
a. The original value is needed only onc
e in a journal when performing the first
 write to the data. For a series of n pa
rtial writes to the same data, PARIX per
forms pure write (instead of write&#45;after
&#45;read) for the last n−1 ones while onl
y introducing a small penalty of an extr
a network RTT (round&#45;trip time) to the f
irst one. Evaluation results show that P
ARIX remarkably outperforms state&#45;of&#45;the
&#45;art PL schemes in partial write perform
ance. -->
<g id="node210" class="node">
<title>Erasure coding (EC) has been widely used
 in cloud storage systems because it eff
ectively reduces storage redundancy whil
e providing the same level of durability
. However, EC introduces significant ove
rhead to small write operations which pe
rform partial write to an entire EC grou
p. This has been a major barrier for EC 
to be widely adopted in small&#45;write&#45;inte
nsive systems such as virtual disk servi
ce. Parity logging (PL) appends parity c
hanges to a journal to accelerate partia
l writes. However, since previous PL sch
emes have to perform a time&#45;consuming wr
ite&#45;after&#45;read for each partial write, i
.e., read the current value of the data 
and then compute and write the parity de
lta, their write performance is still mu
ch lower than that of replication&#45;based 
storage.This paper presents PARIX, a spe
culative partial write scheme for fast p
arity logging. We transform the original
 formula of parity calculation, so as to
 use the data deltas (between the curren
t/original data values), instead of the 
parity deltas, to calculate the parities
 during journal replay. For each partial
 write, this allows PARIX to speculative
ly log only the current value of the dat
a. The original value is needed only onc
e in a journal when performing the first
 write to the data. For a series of n pa
rtial writes to the same data, PARIX per
forms pure write (instead of write&#45;after
&#45;read) for the last n−1 ones while onl
y introducing a small penalty of an extr
a network RTT (round&#45;trip time) to the f
irst one. Evaluation results show that P
ARIX remarkably outperforms state&#45;of&#45;the
&#45;art PL schemes in partial write perform
ance.</title>
<ellipse fill="none" stroke="#000000" cx="59547.022" cy="-461.0336" rx="183.9013" ry="411.5723"/>
<text text-anchor="middle" x="59547.022" y="-736.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Erasure coding (EC) has been widely used</text>
<text text-anchor="middle" x="59547.022" y="-722.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> in cloud storage systems because it eff</text>
<text text-anchor="middle" x="59547.022" y="-708.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ectively reduces storage redundancy whil</text>
<text text-anchor="middle" x="59547.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e providing the same level of durability</text>
<text text-anchor="middle" x="59547.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. However, EC introduces significant ove</text>
<text text-anchor="middle" x="59547.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rhead to small write operations which pe</text>
<text text-anchor="middle" x="59547.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rform partial write to an entire EC grou</text>
<text text-anchor="middle" x="59547.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">p. This has been a major barrier for EC </text>
<text text-anchor="middle" x="59547.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to be widely adopted in small&#45;write&#45;inte</text>
<text text-anchor="middle" x="59547.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nsive systems such as virtual disk servi</text>
<text text-anchor="middle" x="59547.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ce. Parity logging (PL) appends parity c</text>
<text text-anchor="middle" x="59547.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hanges to a journal to accelerate partia</text>
<text text-anchor="middle" x="59547.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">l writes. However, since previous PL sch</text>
<text text-anchor="middle" x="59547.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">emes have to perform a time&#45;consuming wr</text>
<text text-anchor="middle" x="59547.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ite&#45;after&#45;read for each partial write, i</text>
<text text-anchor="middle" x="59547.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">.e., read the current value of the data </text>
<text text-anchor="middle" x="59547.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and then compute and write the parity de</text>
<text text-anchor="middle" x="59547.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lta, their write performance is still mu</text>
<text text-anchor="middle" x="59547.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ch lower than that of replication&#45;based </text>
<text text-anchor="middle" x="59547.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">storage.This paper presents PARIX, a spe</text>
<text text-anchor="middle" x="59547.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">culative partial write scheme for fast p</text>
<text text-anchor="middle" x="59547.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">arity logging. We transform the original</text>
<text text-anchor="middle" x="59547.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> formula of parity calculation, so as to</text>
<text text-anchor="middle" x="59547.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> use the data deltas (between the curren</text>
<text text-anchor="middle" x="59547.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t/original data values), instead of the </text>
<text text-anchor="middle" x="59547.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">parity deltas, to calculate the parities</text>
<text text-anchor="middle" x="59547.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> during journal replay. For each partial</text>
<text text-anchor="middle" x="59547.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> write, this allows PARIX to speculative</text>
<text text-anchor="middle" x="59547.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ly log only the current value of the dat</text>
<text text-anchor="middle" x="59547.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a. The original value is needed only onc</text>
<text text-anchor="middle" x="59547.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e in a journal when performing the first</text>
<text text-anchor="middle" x="59547.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> write to the data. For a series of n pa</text>
<text text-anchor="middle" x="59547.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rtial writes to the same data, PARIX per</text>
<text text-anchor="middle" x="59547.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">forms pure write (instead of write&#45;after</text>
<text text-anchor="middle" x="59547.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;read) for the last n−1 ones while onl</text>
<text text-anchor="middle" x="59547.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y introducing a small penalty of an extr</text>
<text text-anchor="middle" x="59547.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a network RTT (round&#45;trip time) to the f</text>
<text text-anchor="middle" x="59547.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000">irst one. Evaluation results show that P</text>
<text text-anchor="middle" x="59547.022" y="-204.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ARIX remarkably outperforms state&#45;of&#45;the</text>
<text text-anchor="middle" x="59547.022" y="-190.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;art PL schemes in partial write perform</text>
<text text-anchor="middle" x="59547.022" y="-176.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ance.</text>
</g>
<!-- 53&#45;&gt;Erasure coding (EC) has been widely used
 in cloud storage systems because it eff
ectively reduces storage redundancy whil
e providing the same level of durability
. However, EC introduces significant ove
rhead to small write operations which pe
rform partial write to an entire EC grou
p. This has been a major barrier for EC 
to be widely adopted in small&#45;write&#45;inte
nsive systems such as virtual disk servi
ce. Parity logging (PL) appends parity c
hanges to a journal to accelerate partia
l writes. However, since previous PL sch
emes have to perform a time&#45;consuming wr
ite&#45;after&#45;read for each partial write, i
.e., read the current value of the data 
and then compute and write the parity de
lta, their write performance is still mu
ch lower than that of replication&#45;based 
storage.This paper presents PARIX, a spe
culative partial write scheme for fast p
arity logging. We transform the original
 formula of parity calculation, so as to
 use the data deltas (between the curren
t/original data values), instead of the 
parity deltas, to calculate the parities
 during journal replay. For each partial
 write, this allows PARIX to speculative
ly log only the current value of the dat
a. The original value is needed only onc
e in a journal when performing the first
 write to the data. For a series of n pa
rtial writes to the same data, PARIX per
forms pure write (instead of write&#45;after
&#45;read) for the last n−1 ones while onl
y introducing a small penalty of an extr
a network RTT (round&#45;trip time) to the f
irst one. Evaluation results show that P
ARIX remarkably outperforms state&#45;of&#45;the
&#45;art PL schemes in partial write perform
ance. -->
<g id="edge216" class="edge">
<title>53&#45;&gt;Erasure coding (EC) has been widely used
 in cloud storage systems because it eff
ectively reduces storage redundancy whil
e providing the same level of durability
. However, EC introduces significant ove
rhead to small write operations which pe
rform partial write to an entire EC grou
p. This has been a major barrier for EC 
to be widely adopted in small&#45;write&#45;inte
nsive systems such as virtual disk servi
ce. Parity logging (PL) appends parity c
hanges to a journal to accelerate partia
l writes. However, since previous PL sch
emes have to perform a time&#45;consuming wr
ite&#45;after&#45;read for each partial write, i
.e., read the current value of the data 
and then compute and write the parity de
lta, their write performance is still mu
ch lower than that of replication&#45;based 
storage.This paper presents PARIX, a spe
culative partial write scheme for fast p
arity logging. We transform the original
 formula of parity calculation, so as to
 use the data deltas (between the curren
t/original data values), instead of the 
parity deltas, to calculate the parities
 during journal replay. For each partial
 write, this allows PARIX to speculative
ly log only the current value of the dat
a. The original value is needed only onc
e in a journal when performing the first
 write to the data. For a series of n pa
rtial writes to the same data, PARIX per
forms pure write (instead of write&#45;after
&#45;read) for the last n−1 ones while onl
y introducing a small penalty of an extr
a network RTT (round&#45;trip time) to the f
irst one. Evaluation results show that P
ARIX remarkably outperforms state&#45;of&#45;the
&#45;art PL schemes in partial write perform
ance.</title>
<path fill="none" stroke="#000000" d="M58985.0085,-973.9376C59069.4385,-967.0632 59324.6844,-944.599 59354.022,-922.0672 59390.3297,-894.1823 59419.8695,-858.209 59443.8888,-818.6657"/>
<polygon fill="#000000" stroke="#000000" points="59447.1541,-820.0211 59449.2443,-809.6344 59441.1332,-816.4506 59447.1541,-820.0211"/>
</g>
<!-- E&#45;Team: Practical Energy Accounting for 
Multi&#45;Core Systems -->
<g id="node212" class="node">
<title>E&#45;Team: Practical Energy Accounting for 
Multi&#45;Core Systems</title>
<ellipse fill="none" stroke="#000000" cx="59927.022" cy="-461.0336" rx="177.7107" ry="25.4118"/>
<text text-anchor="middle" x="59927.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">E&#45;Team: Practical Energy Accounting for </text>
<text text-anchor="middle" x="59927.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Multi&#45;Core Systems</text>
</g>
<!-- 54&#45;&gt;E&#45;Team: Practical Energy Accounting for 
Multi&#45;Core Systems -->
<g id="edge218" class="edge">
<title>54&#45;&gt;E&#45;Team: Practical Energy Accounting for 
Multi&#45;Core Systems</title>
<path fill="none" stroke="#000000" d="M60112.4129,-958.3386C60084.6853,-883.9602 59977.4546,-596.3173 59940.0125,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="59943.2824,-494.6317 59936.5098,-486.4843 59936.7234,-497.0769 59943.2824,-494.6317"/>
</g>
<!-- Till Smejkal and Marcus Hähnel, TU Dres
den; Thomas Ilsche, Center for Informati
on Services and High Performance Computi
ng (ZIH) Technische Universität Dresde
n; Michael Roitzsch, TU Dresden; Wolfgan
g E. Nagel, Center for Information Servi
ces and High Performance Computing (ZIH)
 Technische Universität Dresden; Herma
nn Härtig, TU Dresden -->
<g id="node213" class="node">
<title>Till Smejkal and Marcus Hähnel, TU Dres
den; Thomas Ilsche, Center for Informati
on Services and High Performance Computi
ng (ZIH) Technische Universität Dresde
n; Michael Roitzsch, TU Dresden; Wolfgan
g E. Nagel, Center for Information Servi
ces and High Performance Computing (ZIH)
 Technische Universität Dresden; Herma
nn Härtig, TU Dresden</title>
<ellipse fill="none" stroke="#000000" cx="60311.022" cy="-461.0336" rx="188.7595" ry="94.5053"/>
<text text-anchor="middle" x="60311.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Till Smejkal and Marcus Hähnel, TU Dres</text>
<text text-anchor="middle" x="60311.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">den; Thomas Ilsche, Center for Informati</text>
<text text-anchor="middle" x="60311.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on Services and High Performance Computi</text>
<text text-anchor="middle" x="60311.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng (ZIH) Technische Universität Dresde</text>
<text text-anchor="middle" x="60311.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n; Michael Roitzsch, TU Dresden; Wolfgan</text>
<text text-anchor="middle" x="60311.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g E. Nagel, Center for Information Servi</text>
<text text-anchor="middle" x="60311.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ces and High Performance Computing (ZIH)</text>
<text text-anchor="middle" x="60311.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Technische Universität Dresden; Herma</text>
<text text-anchor="middle" x="60311.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nn Härtig, TU Dresden</text>
</g>
<!-- 54&#45;&gt;Till Smejkal and Marcus Hähnel, TU Dres
den; Thomas Ilsche, Center for Informati
on Services and High Performance Computi
ng (ZIH) Technische Universität Dresde
n; Michael Roitzsch, TU Dresden; Wolfgan
g E. Nagel, Center for Information Servi
ces and High Performance Computing (ZIH)
 Technische Universität Dresden; Herma
nn Härtig, TU Dresden -->
<g id="edge219" class="edge">
<title>54&#45;&gt;Till Smejkal and Marcus Hähnel, TU Dres
den; Thomas Ilsche, Center for Informati
on Services and High Performance Computi
ng (ZIH) Technische Universität Dresde
n; Michael Roitzsch, TU Dresden; Wolfgan
g E. Nagel, Center for Information Servi
ces and High Performance Computing (ZIH)
 Technische Universität Dresden; Herma
nn Härtig, TU Dresden</title>
<path fill="none" stroke="#000000" d="M60125.6311,-958.3386C60148.4775,-897.0537 60225.2996,-690.981 60272.584,-564.1424"/>
<polygon fill="#000000" stroke="#000000" points="60276.0043,-564.9871 60276.2179,-554.3944 60269.4452,-562.5419 60276.0043,-564.9871"/>
</g>
<!-- Energy&#45;based billing as well as energy&#45;e
fficient software require accurate knowl
edge of energy consumption. Model&#45;based 
energy accounting and external measureme
nt hardware are the main methods to obta
in energy data, but cost and the need fo
r frequent recalibration have impeded th
eir large&#45;scale adoption. Running Averag
e Power Limit (RAPL) by Intel® enables 
non&#45;intrusive, off&#45;the&#45;shelf energy moni
toring, but only on a per&#45;socket level. 
To enable apportioning of energy to indi
vidual applications we present E&#45;Team, a
 non&#45;intrusive, scheduler&#45;based, easy&#45;to
&#45;use energy&#45;accounting mechanism. By lev
eraging RAPL, our method can be used on 
any Intel system built after 2011 withou
t the need for external infrastructure, 
application modification, or model calib
ration. E&#45;Team allows starting and stopp
ing measurements at arbitrary points in 
time while maintaining a low performance
 overhead. E&#45;Team provides high accuracy
, compared to external instrumentation, 
with an error of less than 3:5 %. -->
<g id="node214" class="node">
<title>Energy&#45;based billing as well as energy&#45;e
fficient software require accurate knowl
edge of energy consumption. Model&#45;based 
energy accounting and external measureme
nt hardware are the main methods to obta
in energy data, but cost and the need fo
r frequent recalibration have impeded th
eir large&#45;scale adoption. Running Averag
e Power Limit (RAPL) by Intel® enables 
non&#45;intrusive, off&#45;the&#45;shelf energy moni
toring, but only on a per&#45;socket level. 
To enable apportioning of energy to indi
vidual applications we present E&#45;Team, a
 non&#45;intrusive, scheduler&#45;based, easy&#45;to
&#45;use energy&#45;accounting mechanism. By lev
eraging RAPL, our method can be used on 
any Intel system built after 2011 withou
t the need for external infrastructure, 
application modification, or model calib
ration. E&#45;Team allows starting and stopp
ing measurements at arbitrary points in 
time while maintaining a low performance
 overhead. E&#45;Team provides high accuracy
, compared to external instrumentation, 
with an error of less than 3:5 %.</title>
<ellipse fill="none" stroke="#000000" cx="60700.022" cy="-461.0336" rx="182.8686" ry="253.2885"/>
<text text-anchor="middle" x="60700.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Energy&#45;based billing as well as energy&#45;e</text>
<text text-anchor="middle" x="60700.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">fficient software require accurate knowl</text>
<text text-anchor="middle" x="60700.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">edge of energy consumption. Model&#45;based </text>
<text text-anchor="middle" x="60700.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">energy accounting and external measureme</text>
<text text-anchor="middle" x="60700.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nt hardware are the main methods to obta</text>
<text text-anchor="middle" x="60700.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">in energy data, but cost and the need fo</text>
<text text-anchor="middle" x="60700.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r frequent recalibration have impeded th</text>
<text text-anchor="middle" x="60700.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eir large&#45;scale adoption. Running Averag</text>
<text text-anchor="middle" x="60700.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e Power Limit (RAPL) by Intel® enables </text>
<text text-anchor="middle" x="60700.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">non&#45;intrusive, off&#45;the&#45;shelf energy moni</text>
<text text-anchor="middle" x="60700.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">toring, but only on a per&#45;socket level. </text>
<text text-anchor="middle" x="60700.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">To enable apportioning of energy to indi</text>
<text text-anchor="middle" x="60700.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vidual applications we present E&#45;Team, a</text>
<text text-anchor="middle" x="60700.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> non&#45;intrusive, scheduler&#45;based, easy&#45;to</text>
<text text-anchor="middle" x="60700.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;use energy&#45;accounting mechanism. By lev</text>
<text text-anchor="middle" x="60700.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eraging RAPL, our method can be used on </text>
<text text-anchor="middle" x="60700.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">any Intel system built after 2011 withou</text>
<text text-anchor="middle" x="60700.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t the need for external infrastructure, </text>
<text text-anchor="middle" x="60700.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">application modification, or model calib</text>
<text text-anchor="middle" x="60700.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ration. E&#45;Team allows starting and stopp</text>
<text text-anchor="middle" x="60700.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing measurements at arbitrary points in </text>
<text text-anchor="middle" x="60700.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">time while maintaining a low performance</text>
<text text-anchor="middle" x="60700.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> overhead. E&#45;Team provides high accuracy</text>
<text text-anchor="middle" x="60700.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, compared to external instrumentation, </text>
<text text-anchor="middle" x="60700.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">with an error of less than 3:5 %.</text>
</g>
<!-- 54&#45;&gt;Energy&#45;based billing as well as energy&#45;e
fficient software require accurate knowl
edge of energy consumption. Model&#45;based 
energy accounting and external measureme
nt hardware are the main methods to obta
in energy data, but cost and the need fo
r frequent recalibration have impeded th
eir large&#45;scale adoption. Running Averag
e Power Limit (RAPL) by Intel® enables 
non&#45;intrusive, off&#45;the&#45;shelf energy moni
toring, but only on a per&#45;socket level. 
To enable apportioning of energy to indi
vidual applications we present E&#45;Team, a
 non&#45;intrusive, scheduler&#45;based, easy&#45;to
&#45;use energy&#45;accounting mechanism. By lev
eraging RAPL, our method can be used on 
any Intel system built after 2011 withou
t the need for external infrastructure, 
application modification, or model calib
ration. E&#45;Team allows starting and stopp
ing measurements at arbitrary points in 
time while maintaining a low performance
 overhead. E&#45;Team provides high accuracy
, compared to external instrumentation, 
with an error of less than 3:5 %. -->
<g id="edge220" class="edge">
<title>54&#45;&gt;Energy&#45;based billing as well as energy&#45;e
fficient software require accurate knowl
edge of energy consumption. Model&#45;based 
energy accounting and external measureme
nt hardware are the main methods to obta
in energy data, but cost and the need fo
r frequent recalibration have impeded th
eir large&#45;scale adoption. Running Averag
e Power Limit (RAPL) by Intel® enables 
non&#45;intrusive, off&#45;the&#45;shelf energy moni
toring, but only on a per&#45;socket level. 
To enable apportioning of energy to indi
vidual applications we present E&#45;Team, a
 non&#45;intrusive, scheduler&#45;based, easy&#45;to
&#45;use energy&#45;accounting mechanism. By lev
eraging RAPL, our method can be used on 
any Intel system built after 2011 withou
t the need for external infrastructure, 
application modification, or model calib
ration. E&#45;Team allows starting and stopp
ing measurements at arbitrary points in 
time while maintaining a low performance
 overhead. E&#45;Team provides high accuracy
, compared to external instrumentation, 
with an error of less than 3:5 %.</title>
<path fill="none" stroke="#000000" d="M60146.2071,-975.7245C60225.0978,-974.213 60452.0912,-966.0521 60509.022,-922.0672 60575.4794,-870.722 60618.9935,-792.1593 60647.4107,-714.3526"/>
<polygon fill="#000000" stroke="#000000" points="60650.7302,-715.4642 60650.8019,-704.8696 60644.139,-713.1071 60650.7302,-715.4642"/>
</g>
<!-- Scalable NUMA&#45;aware Blocking Synchroniza
tion Primitives -->
<g id="node216" class="node">
<title>Scalable NUMA&#45;aware Blocking Synchroniza
tion Primitives</title>
<ellipse fill="none" stroke="#000000" cx="61096.022" cy="-461.0336" rx="195.4461" ry="25.4118"/>
<text text-anchor="middle" x="61096.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Scalable NUMA&#45;aware Blocking Synchroniza</text>
<text text-anchor="middle" x="61096.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion Primitives</text>
</g>
<!-- 55&#45;&gt;Scalable NUMA&#45;aware Blocking Synchroniza
tion Primitives -->
<g id="edge222" class="edge">
<title>55&#45;&gt;Scalable NUMA&#45;aware Blocking Synchroniza
tion Primitives</title>
<path fill="none" stroke="#000000" d="M61291.1853,-958.636C61262.2059,-884.7479 61149.188,-596.5894 61109.7174,-495.9524"/>
<polygon fill="#000000" stroke="#000000" points="61112.9345,-494.5691 61106.0248,-486.5375 61106.4178,-497.125 61112.9345,-494.5691"/>
</g>
<!-- Sanidhya Kashyap, Changwoo Min, and Taes
oo Kim, Georgia Institute of Technology -->
<g id="node217" class="node">
<title>Sanidhya Kashyap, Changwoo Min, and Taes
oo Kim, Georgia Institute of Technology</title>
<ellipse fill="none" stroke="#000000" cx="61501.022" cy="-461.0336" rx="191.763" ry="25.4118"/>
<text text-anchor="middle" x="61501.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Sanidhya Kashyap, Changwoo Min, and Taes</text>
<text text-anchor="middle" x="61501.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oo Kim, Georgia Institute of Technology</text>
</g>
<!-- 55&#45;&gt;Sanidhya Kashyap, Changwoo Min, and Taes
oo Kim, Georgia Institute of Technology -->
<g id="edge223" class="edge">
<title>55&#45;&gt;Sanidhya Kashyap, Changwoo Min, and Taes
oo Kim, Georgia Institute of Technology</title>
<path fill="none" stroke="#000000" d="M61304.8925,-958.636C61334.0154,-884.7479 61447.5928,-596.5894 61487.2588,-495.9524"/>
<polygon fill="#000000" stroke="#000000" points="61490.5589,-497.1243 61490.9697,-486.5375 61484.0465,-494.5574 61490.5589,-497.1243"/>
</g>
<!-- Application scalability is a critical as
pect to efficiently use NUMA machines wi
th many cores. To achieve that, various 
techniques ranging from task placement t
o data sharding are used in practice. Ho
wever, from the perspective of an operat
ing system, these techniques often do no
t work as expected because various subsy
stems in the OS interact and share data 
structures among themselves, resulting i
n scalability bottlenecks. Although curr
ent OSes attempt to tackle this problem 
by introducing a wide range of synchroni
zation primitives such as spinlock and m
utex, the widely used synchronization me
chanisms are not designed to handle both
 under&#45; and over&#45;subscribed scenarios in
 a scalable fashion. In particular, the 
current blocking synchronization primiti
ves that are designed to address both sc
enarios are NUMA oblivious, meaning that
 they suffer from cache&#45;line contention 
in an undersubscribed situation, and eve
n worse, inherently spur long scheduler 
intervention, which leads to sub&#45;optimal
 performance in an over&#45;subscribed situa
tion.In this work, we present several de
sign choices to implement scalable block
ing synchronization primitives that can 
address both under&#45; and over&#45;subscribed 
scenarios. Such design decisions include
 memory&#45;efficient NUMA&#45;aware locks (favo
rable for deployment) and scheduling&#45;awa
re, scalable parking and wake&#45;up strateg
ies. To validate our design choices, we 
implement two new blocking synchronizati
on primitives, which are variants of mut
ex and read&#45;write semaphore in the Linux
 kernel. Our evaluation shows that these
 locks can scale real&#45;world applications
 by 1.2–1.6× and some of the file sys
tem operations up to 4.7× in both under
&#45; and over&#45;subscribed scenarios. Moreove
r, they use 1.5–10× less memory than 
the state&#45;of&#45; the&#45;art NUMA&#45;aware locks o
n a 120&#45;core machine. -->
<g id="node218" class="node">
<title>Application scalability is a critical as
pect to efficiently use NUMA machines wi
th many cores. To achieve that, various 
techniques ranging from task placement t
o data sharding are used in practice. Ho
wever, from the perspective of an operat
ing system, these techniques often do no
t work as expected because various subsy
stems in the OS interact and share data 
structures among themselves, resulting i
n scalability bottlenecks. Although curr
ent OSes attempt to tackle this problem 
by introducing a wide range of synchroni
zation primitives such as spinlock and m
utex, the widely used synchronization me
chanisms are not designed to handle both
 under&#45; and over&#45;subscribed scenarios in
 a scalable fashion. In particular, the 
current blocking synchronization primiti
ves that are designed to address both sc
enarios are NUMA oblivious, meaning that
 they suffer from cache&#45;line contention 
in an undersubscribed situation, and eve
n worse, inherently spur long scheduler 
intervention, which leads to sub&#45;optimal
 performance in an over&#45;subscribed situa
tion.In this work, we present several de
sign choices to implement scalable block
ing synchronization primitives that can 
address both under&#45; and over&#45;subscribed 
scenarios. Such design decisions include
 memory&#45;efficient NUMA&#45;aware locks (favo
rable for deployment) and scheduling&#45;awa
re, scalable parking and wake&#45;up strateg
ies. To validate our design choices, we 
implement two new blocking synchronizati
on primitives, which are variants of mut
ex and read&#45;write semaphore in the Linux
 kernel. Our evaluation shows that these
 locks can scale real&#45;world applications
 by 1.2–1.6× and some of the file sys
tem operations up to 4.7× in both under
&#45; and over&#45;subscribed scenarios. Moreove
r, they use 1.5–10× less memory than 
the state&#45;of&#45; the&#45;art NUMA&#45;aware locks o
n a 120&#45;core machine.</title>
<ellipse fill="none" stroke="#000000" cx="61900.022" cy="-461.0336" rx="188.7815" ry="461.0672"/>
<text text-anchor="middle" x="61900.022" y="-771.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Application scalability is a critical as</text>
<text text-anchor="middle" x="61900.022" y="-757.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pect to efficiently use NUMA machines wi</text>
<text text-anchor="middle" x="61900.022" y="-743.8336" font-family="Times,serif" font-size="14.00" fill="#000000">th many cores. To achieve that, various </text>
<text text-anchor="middle" x="61900.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000">techniques ranging from task placement t</text>
<text text-anchor="middle" x="61900.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o data sharding are used in practice. Ho</text>
<text text-anchor="middle" x="61900.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">wever, from the perspective of an operat</text>
<text text-anchor="middle" x="61900.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing system, these techniques often do no</text>
<text text-anchor="middle" x="61900.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t work as expected because various subsy</text>
<text text-anchor="middle" x="61900.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stems in the OS interact and share data </text>
<text text-anchor="middle" x="61900.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">structures among themselves, resulting i</text>
<text text-anchor="middle" x="61900.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n scalability bottlenecks. Although curr</text>
<text text-anchor="middle" x="61900.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ent OSes attempt to tackle this problem </text>
<text text-anchor="middle" x="61900.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">by introducing a wide range of synchroni</text>
<text text-anchor="middle" x="61900.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">zation primitives such as spinlock and m</text>
<text text-anchor="middle" x="61900.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">utex, the widely used synchronization me</text>
<text text-anchor="middle" x="61900.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">chanisms are not designed to handle both</text>
<text text-anchor="middle" x="61900.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> under&#45; and over&#45;subscribed scenarios in</text>
<text text-anchor="middle" x="61900.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a scalable fashion. In particular, the </text>
<text text-anchor="middle" x="61900.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">current blocking synchronization primiti</text>
<text text-anchor="middle" x="61900.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ves that are designed to address both sc</text>
<text text-anchor="middle" x="61900.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">enarios are NUMA oblivious, meaning that</text>
<text text-anchor="middle" x="61900.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> they suffer from cache&#45;line contention </text>
<text text-anchor="middle" x="61900.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">in an undersubscribed situation, and eve</text>
<text text-anchor="middle" x="61900.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n worse, inherently spur long scheduler </text>
<text text-anchor="middle" x="61900.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">intervention, which leads to sub&#45;optimal</text>
<text text-anchor="middle" x="61900.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> performance in an over&#45;subscribed situa</text>
<text text-anchor="middle" x="61900.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion.In this work, we present several de</text>
<text text-anchor="middle" x="61900.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sign choices to implement scalable block</text>
<text text-anchor="middle" x="61900.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing synchronization primitives that can </text>
<text text-anchor="middle" x="61900.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">address both under&#45; and over&#45;subscribed </text>
<text text-anchor="middle" x="61900.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">scenarios. Such design decisions include</text>
<text text-anchor="middle" x="61900.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> memory&#45;efficient NUMA&#45;aware locks (favo</text>
<text text-anchor="middle" x="61900.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rable for deployment) and scheduling&#45;awa</text>
<text text-anchor="middle" x="61900.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re, scalable parking and wake&#45;up strateg</text>
<text text-anchor="middle" x="61900.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ies. To validate our design choices, we </text>
<text text-anchor="middle" x="61900.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">implement two new blocking synchronizati</text>
<text text-anchor="middle" x="61900.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on primitives, which are variants of mut</text>
<text text-anchor="middle" x="61900.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ex and read&#45;write semaphore in the Linux</text>
<text text-anchor="middle" x="61900.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> kernel. Our evaluation shows that these</text>
<text text-anchor="middle" x="61900.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> locks can scale real&#45;world applications</text>
<text text-anchor="middle" x="61900.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> by 1.2–1.6× and some of the file sys</text>
<text text-anchor="middle" x="61900.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tem operations up to 4.7× in both under</text>
<text text-anchor="middle" x="61900.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45; and over&#45;subscribed scenarios. Moreove</text>
<text text-anchor="middle" x="61900.022" y="-169.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r, they use 1.5–10× less memory than </text>
<text text-anchor="middle" x="61900.022" y="-155.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the state&#45;of&#45; the&#45;art NUMA&#45;aware locks o</text>
<text text-anchor="middle" x="61900.022" y="-141.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n a 120&#45;core machine.</text>
</g>
<!-- 55&#45;&gt;Application scalability is a critical as
pect to efficiently use NUMA machines wi
th many cores. To achieve that, various 
techniques ranging from task placement t
o data sharding are used in practice. Ho
wever, from the perspective of an operat
ing system, these techniques often do no
t work as expected because various subsy
stems in the OS interact and share data 
structures among themselves, resulting i
n scalability bottlenecks. Although curr
ent OSes attempt to tackle this problem 
by introducing a wide range of synchroni
zation primitives such as spinlock and m
utex, the widely used synchronization me
chanisms are not designed to handle both
 under&#45; and over&#45;subscribed scenarios in
 a scalable fashion. In particular, the 
current blocking synchronization primiti
ves that are designed to address both sc
enarios are NUMA oblivious, meaning that
 they suffer from cache&#45;line contention 
in an undersubscribed situation, and eve
n worse, inherently spur long scheduler 
intervention, which leads to sub&#45;optimal
 performance in an over&#45;subscribed situa
tion.In this work, we present several de
sign choices to implement scalable block
ing synchronization primitives that can 
address both under&#45; and over&#45;subscribed 
scenarios. Such design decisions include
 memory&#45;efficient NUMA&#45;aware locks (favo
rable for deployment) and scheduling&#45;awa
re, scalable parking and wake&#45;up strateg
ies. To validate our design choices, we 
implement two new blocking synchronizati
on primitives, which are variants of mut
ex and read&#45;write semaphore in the Linux
 kernel. Our evaluation shows that these
 locks can scale real&#45;world applications
 by 1.2–1.6× and some of the file sys
tem operations up to 4.7× in both under
&#45; and over&#45;subscribed scenarios. Moreove
r, they use 1.5–10× less memory than 
the state&#45;of&#45; the&#45;art NUMA&#45;aware locks o
n a 120&#45;core machine. -->
<g id="edge224" class="edge">
<title>55&#45;&gt;Application scalability is a critical as
pect to efficiently use NUMA machines wi
th many cores. To achieve that, various 
techniques ranging from task placement t
o data sharding are used in practice. Ho
wever, from the perspective of an operat
ing system, these techniques often do no
t work as expected because various subsy
stems in the OS interact and share data 
structures among themselves, resulting i
n scalability bottlenecks. Although curr
ent OSes attempt to tackle this problem 
by introducing a wide range of synchroni
zation primitives such as spinlock and m
utex, the widely used synchronization me
chanisms are not designed to handle both
 under&#45; and over&#45;subscribed scenarios in
 a scalable fashion. In particular, the 
current blocking synchronization primiti
ves that are designed to address both sc
enarios are NUMA oblivious, meaning that
 they suffer from cache&#45;line contention 
in an undersubscribed situation, and eve
n worse, inherently spur long scheduler 
intervention, which leads to sub&#45;optimal
 performance in an over&#45;subscribed situa
tion.In this work, we present several de
sign choices to implement scalable block
ing synchronization primitives that can 
address both under&#45; and over&#45;subscribed 
scenarios. Such design decisions include
 memory&#45;efficient NUMA&#45;aware locks (favo
rable for deployment) and scheduling&#45;awa
re, scalable parking and wake&#45;up strateg
ies. To validate our design choices, we 
implement two new blocking synchronizati
on primitives, which are variants of mut
ex and read&#45;write semaphore in the Linux
 kernel. Our evaluation shows that these
 locks can scale real&#45;world applications
 by 1.2–1.6× and some of the file sys
tem operations up to 4.7× in both under
&#45; and over&#45;subscribed scenarios. Moreove
r, they use 1.5–10× less memory than 
the state&#45;of&#45; the&#45;art NUMA&#45;aware locks o
n a 120&#45;core machine.</title>
<path fill="none" stroke="#000000" d="M61324.9404,-974.0077C61410.4257,-967.2577 61671.8964,-944.9219 61702.022,-922.0672 61732.6009,-898.8687 61758.5191,-869.9979 61780.4751,-838.0947"/>
<polygon fill="#000000" stroke="#000000" points="61783.5969,-839.7241 61786.2668,-829.4711 61777.7858,-835.8213 61783.5969,-839.7241"/>
</g>
<!-- StreamBox: Modern Stream Processing on a
 Multicore Machine -->
<g id="node220" class="node">
<title>StreamBox: Modern Stream Processing on a
 Multicore Machine</title>
<ellipse fill="none" stroke="#000000" cx="62294.022" cy="-461.0336" rx="187.6036" ry="25.4118"/>
<text text-anchor="middle" x="62294.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">StreamBox: Modern Stream Processing on a</text>
<text text-anchor="middle" x="62294.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Multicore Machine</text>
</g>
<!-- 56&#45;&gt;StreamBox: Modern Stream Processing on a
 Multicore Machine -->
<g id="edge226" class="edge">
<title>56&#45;&gt;StreamBox: Modern Stream Processing on a
 Multicore Machine</title>
<path fill="none" stroke="#000000" d="M62485.2064,-958.3386C62456.6123,-883.9602 62346.0306,-596.3173 62307.4185,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="62310.6616,-494.5623 62303.8063,-486.4843 62304.1278,-497.0742 62310.6616,-494.5623"/>
</g>
<!-- Hongyu Miao and Heejin Park, Purdue ECE;
 Myeongjae Jeon and Gennady Pekhimenko, 
Microsoft Research; Kathryn S. McKinley,
 Google; Felix Xiaozhu Lin, Purdue ECE -->
<g id="node221" class="node">
<title>Hongyu Miao and Heejin Park, Purdue ECE;
 Myeongjae Jeon and Gennady Pekhimenko, 
Microsoft Research; Kathryn S. McKinley,
 Google; Felix Xiaozhu Lin, Purdue ECE</title>
<ellipse fill="none" stroke="#000000" cx="62690.022" cy="-461.0336" rx="190.6776" ry="45.011"/>
<text text-anchor="middle" x="62690.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Hongyu Miao and Heejin Park, Purdue ECE;</text>
<text text-anchor="middle" x="62690.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Myeongjae Jeon and Gennady Pekhimenko, </text>
<text text-anchor="middle" x="62690.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Microsoft Research; Kathryn S. McKinley,</text>
<text text-anchor="middle" x="62690.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Google; Felix Xiaozhu Lin, Purdue ECE</text>
</g>
<!-- 56&#45;&gt;Hongyu Miao and Heejin Park, Purdue ECE;
 Myeongjae Jeon and Gennady Pekhimenko, 
Microsoft Research; Kathryn S. McKinley,
 Google; Felix Xiaozhu Lin, Purdue ECE -->
<g id="edge227" class="edge">
<title>56&#45;&gt;Hongyu Miao and Heejin Park, Purdue ECE;
 Myeongjae Jeon and Gennady Pekhimenko, 
Microsoft Research; Kathryn S. McKinley,
 Google; Felix Xiaozhu Lin, Purdue ECE</title>
<path fill="none" stroke="#000000" d="M62498.8376,-958.3386C62525.7301,-888.3865 62625.1423,-629.7974 62668.9999,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="62672.3684,-516.7074 62672.6899,-506.1175 62665.8346,-514.1955 62672.3684,-516.7074"/>
</g>
<!-- Stream analytics on real&#45;time events has
 an insatiable demand for throughput and
 latency. Its performance on a single ma
chine is central to meeting this demand,
 even in a distributed system. This pape
r presents a novel stream processing eng
ine called StreamBox that exploits the p
arallelism and memory hierarchy of moder
n multicore hardware. StreamBox executes
 a pipeline of transforms over records t
hat may arrive out&#45;of&#45;order. As records 
arrive, it groups the records into order
ed epochs delineated by watermarks. A wa
termark guarantees no subsequent record’
s event timestamp will precede it.Our 
contribution is to produce and manage ab
undant parallelism by generalizing out&#45;o
f&#45;order record processing within each ep
och to out&#45;of&#45;order epoch processing and
 by dynamically prioritizing epochs to o
ptimize latency. We introduce a data str
ucture called cascading containers, whic
h dynamically manages concurrency and de
pendences among epochs in the transform 
pipeline. StreamBox creates sequential m
emory layout of records in epochs and st
eers them to optimize NUMA locality. On 
a 56&#45;core machine, StreamBox processes r
ecords up to 38 GB/sec (38M Records/sec)
 with 50 ms latency. -->
<g id="node222" class="node">
<title>Stream analytics on real&#45;time events has
 an insatiable demand for throughput and
 latency. Its performance on a single ma
chine is central to meeting this demand,
 even in a distributed system. This pape
r presents a novel stream processing eng
ine called StreamBox that exploits the p
arallelism and memory hierarchy of moder
n multicore hardware. StreamBox executes
 a pipeline of transforms over records t
hat may arrive out&#45;of&#45;order. As records 
arrive, it groups the records into order
ed epochs delineated by watermarks. A wa
termark guarantees no subsequent record’
s event timestamp will precede it.Our 
contribution is to produce and manage ab
undant parallelism by generalizing out&#45;o
f&#45;order record processing within each ep
och to out&#45;of&#45;order epoch processing and
 by dynamically prioritizing epochs to o
ptimize latency. We introduce a data str
ucture called cascading containers, whic
h dynamically manages concurrency and de
pendences among epochs in the transform 
pipeline. StreamBox creates sequential m
emory layout of records in epochs and st
eers them to optimize NUMA locality. On 
a 56&#45;core machine, StreamBox processes r
ecords up to 38 GB/sec (38M Records/sec)
 with 50 ms latency.</title>
<ellipse fill="none" stroke="#000000" cx="63084.022" cy="-461.0336" rx="184.5161" ry="302.7835"/>
<text text-anchor="middle" x="63084.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Stream analytics on real&#45;time events has</text>
<text text-anchor="middle" x="63084.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> an insatiable demand for throughput and</text>
<text text-anchor="middle" x="63084.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> latency. Its performance on a single ma</text>
<text text-anchor="middle" x="63084.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">chine is central to meeting this demand,</text>
<text text-anchor="middle" x="63084.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> even in a distributed system. This pape</text>
<text text-anchor="middle" x="63084.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r presents a novel stream processing eng</text>
<text text-anchor="middle" x="63084.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ine called StreamBox that exploits the p</text>
<text text-anchor="middle" x="63084.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">arallelism and memory hierarchy of moder</text>
<text text-anchor="middle" x="63084.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n multicore hardware. StreamBox executes</text>
<text text-anchor="middle" x="63084.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a pipeline of transforms over records t</text>
<text text-anchor="middle" x="63084.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hat may arrive out&#45;of&#45;order. As records </text>
<text text-anchor="middle" x="63084.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">arrive, it groups the records into order</text>
<text text-anchor="middle" x="63084.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed epochs delineated by watermarks. A wa</text>
<text text-anchor="middle" x="63084.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">termark guarantees no subsequent record’</text>
<text text-anchor="middle" x="63084.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s event timestamp will precede it.Our </text>
<text text-anchor="middle" x="63084.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">contribution is to produce and manage ab</text>
<text text-anchor="middle" x="63084.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">undant parallelism by generalizing out&#45;o</text>
<text text-anchor="middle" x="63084.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f&#45;order record processing within each ep</text>
<text text-anchor="middle" x="63084.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">och to out&#45;of&#45;order epoch processing and</text>
<text text-anchor="middle" x="63084.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> by dynamically prioritizing epochs to o</text>
<text text-anchor="middle" x="63084.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ptimize latency. We introduce a data str</text>
<text text-anchor="middle" x="63084.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ucture called cascading containers, whic</text>
<text text-anchor="middle" x="63084.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h dynamically manages concurrency and de</text>
<text text-anchor="middle" x="63084.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pendences among epochs in the transform </text>
<text text-anchor="middle" x="63084.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pipeline. StreamBox creates sequential m</text>
<text text-anchor="middle" x="63084.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">emory layout of records in epochs and st</text>
<text text-anchor="middle" x="63084.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eers them to optimize NUMA locality. On </text>
<text text-anchor="middle" x="63084.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a 56&#45;core machine, StreamBox processes r</text>
<text text-anchor="middle" x="63084.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ecords up to 38 GB/sec (38M Records/sec)</text>
<text text-anchor="middle" x="63084.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> with 50 ms latency.</text>
</g>
<!-- 56&#45;&gt;Stream analytics on real&#45;time events has
 an insatiable demand for throughput and
 latency. Its performance on a single ma
chine is central to meeting this demand,
 even in a distributed system. This pape
r presents a novel stream processing eng
ine called StreamBox that exploits the p
arallelism and memory hierarchy of moder
n multicore hardware. StreamBox executes
 a pipeline of transforms over records t
hat may arrive out&#45;of&#45;order. As records 
arrive, it groups the records into order
ed epochs delineated by watermarks. A wa
termark guarantees no subsequent record’
s event timestamp will precede it.Our 
contribution is to produce and manage ab
undant parallelism by generalizing out&#45;o
f&#45;order record processing within each ep
och to out&#45;of&#45;order epoch processing and
 by dynamically prioritizing epochs to o
ptimize latency. We introduce a data str
ucture called cascading containers, whic
h dynamically manages concurrency and de
pendences among epochs in the transform 
pipeline. StreamBox creates sequential m
emory layout of records in epochs and st
eers them to optimize NUMA locality. On 
a 56&#45;core machine, StreamBox processes r
ecords up to 38 GB/sec (38M Records/sec)
 with 50 ms latency. -->
<g id="edge228" class="edge">
<title>56&#45;&gt;Stream analytics on real&#45;time events has
 an insatiable demand for throughput and
 latency. Its performance on a single ma
chine is central to meeting this demand,
 even in a distributed system. This pape
r presents a novel stream processing eng
ine called StreamBox that exploits the p
arallelism and memory hierarchy of moder
n multicore hardware. StreamBox executes
 a pipeline of transforms over records t
hat may arrive out&#45;of&#45;order. As records 
arrive, it groups the records into order
ed epochs delineated by watermarks. A wa
termark guarantees no subsequent record’
s event timestamp will precede it.Our 
contribution is to produce and manage ab
undant parallelism by generalizing out&#45;o
f&#45;order record processing within each ep
och to out&#45;of&#45;order epoch processing and
 by dynamically prioritizing epochs to o
ptimize latency. We introduce a data str
ucture called cascading containers, whic
h dynamically manages concurrency and de
pendences among epochs in the transform 
pipeline. StreamBox creates sequential m
emory layout of records in epochs and st
eers them to optimize NUMA locality. On 
a 56&#45;core machine, StreamBox processes r
ecords up to 38 GB/sec (38M Records/sec)
 with 50 ms latency.</title>
<path fill="none" stroke="#000000" d="M62518.8449,-973.9679C62603.3908,-967.1407 62860.4759,-944.7001 62890.022,-922.0672 62945.7074,-879.4112 62985.5665,-817.7722 63014.0427,-753.3769"/>
<polygon fill="#000000" stroke="#000000" points="63017.4025,-754.4254 63018.162,-743.8578 63010.9783,-751.6453 63017.4025,-754.4254"/>
</g>
<!-- Everything you always wanted to know abo
ut multicore graph processing but were a
fraid to ask -->
<g id="node224" class="node">
<title>Everything you always wanted to know abo
ut multicore graph processing but were a
fraid to ask</title>
<ellipse fill="none" stroke="#000000" cx="63472.022" cy="-461.0336" rx="185.1345" ry="35.2113"/>
<text text-anchor="middle" x="63472.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Everything you always wanted to know abo</text>
<text text-anchor="middle" x="63472.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ut multicore graph processing but were a</text>
<text text-anchor="middle" x="63472.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">fraid to ask</text>
</g>
<!-- 57&#45;&gt;Everything you always wanted to know abo
ut multicore graph processing but were a
fraid to ask -->
<g id="edge230" class="edge">
<title>57&#45;&gt;Everything you always wanted to know abo
ut multicore graph processing but were a
fraid to ask</title>
<path fill="none" stroke="#000000" d="M63660.3096,-958.3386C63633.0661,-886.383 63530.2519,-614.8303 63489.152,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="63492.3015,-504.711 63485.4873,-496.5982 63485.755,-507.1897 63492.3015,-504.711"/>
</g>
<!-- Jasmina Malicevic, Baptiste Lepers and W
illy Zwaenepoel, EPFLAwarded Best Paper! -->
<g id="node225" class="node">
<title>Jasmina Malicevic, Baptiste Lepers and W
illy Zwaenepoel, EPFLAwarded Best Paper!</title>
<ellipse fill="none" stroke="#000000" cx="63862.022" cy="-461.0336" rx="187.3497" ry="25.4118"/>
<text text-anchor="middle" x="63862.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Jasmina Malicevic, Baptiste Lepers and W</text>
<text text-anchor="middle" x="63862.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">illy Zwaenepoel, EPFLAwarded Best Paper!</text>
</g>
<!-- 57&#45;&gt;Jasmina Malicevic, Baptiste Lepers and W
illy Zwaenepoel, EPFLAwarded Best Paper! -->
<g id="edge231" class="edge">
<title>57&#45;&gt;Jasmina Malicevic, Baptiste Lepers and W
illy Zwaenepoel, EPFLAwarded Best Paper!</title>
<path fill="none" stroke="#000000" d="M63673.7343,-958.3386C63701.8952,-883.9602 63810.8014,-596.3173 63848.8285,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="63852.1183,-497.0757 63852.386,-486.4843 63845.5718,-494.5971 63852.1183,-497.0757"/>
</g>
<!-- Graph processing systems are used in a w
ide variety of fields, ranging from biol
ogy to social networks, and a large numb
er of such systems have been described i
n the recent literature. We perform a sy
stematic comparison of various technique
s proposed to speed up in&#45;memory multico
re graph processing. In addition, we tak
e an end&#45;to&#45;end view of execution time, 
including not only algorithm execution t
ime, but also pre&#45;processing time and th
e time to load the graph input data from
 storage.More specifically, we study var
ious data structures to represent the gr
aph in memory, various approaches to pre
&#45;processing and various ways to structur
e the graph computation. We also investi
gate approaches to improve cache localit
y, synchronization, and NUMA&#45;awareness. 
In doing so, we take our inspiration fro
m a number of graph processing systems, 
and implement the techniques they propos
e in a single system. We then selectivel
y enable different techniques, allowing 
us to assess their benefits in isolation
 and independent of unrelated implementa
tion considerations.Our main observation
 is that the cost of pre&#45;processing in m
any circumstances dominates the cost of 
algorithm execution, calling into questi
on the benefits of proposed algorithmic 
optimizations that rely on extensive pre
processing. Equally surprising, using ra
dix sort turns out to be the most effici
ent way of pre&#45;processing the graph inpu
t data into adjacency lists, when the gr
aph input data is already in memory or i
s loaded from fast storage. Furthermore,
 we adapt a technique developed for out&#45;
of&#45;core graph processing, and show that 
it significantly improves cache locality
. Finally, we demonstrate that NUMA&#45;awar
eness and its attendant pre&#45;processing c
osts are beneficial only on large machin
es and for certain algorithms. -->
<g id="node226" class="node">
<title>Graph processing systems are used in a w
ide variety of fields, ranging from biol
ogy to social networks, and a large numb
er of such systems have been described i
n the recent literature. We perform a sy
stematic comparison of various technique
s proposed to speed up in&#45;memory multico
re graph processing. In addition, we tak
e an end&#45;to&#45;end view of execution time, 
including not only algorithm execution t
ime, but also pre&#45;processing time and th
e time to load the graph input data from
 storage.More specifically, we study var
ious data structures to represent the gr
aph in memory, various approaches to pre
&#45;processing and various ways to structur
e the graph computation. We also investi
gate approaches to improve cache localit
y, synchronization, and NUMA&#45;awareness. 
In doing so, we take our inspiration fro
m a number of graph processing systems, 
and implement the techniques they propos
e in a single system. We then selectivel
y enable different techniques, allowing 
us to assess their benefits in isolation
 and independent of unrelated implementa
tion considerations.Our main observation
 is that the cost of pre&#45;processing in m
any circumstances dominates the cost of 
algorithm execution, calling into questi
on the benefits of proposed algorithmic 
optimizations that rely on extensive pre
processing. Equally surprising, using ra
dix sort turns out to be the most effici
ent way of pre&#45;processing the graph inpu
t data into adjacency lists, when the gr
aph input data is already in memory or i
s loaded from fast storage. Furthermore,
 we adapt a technique developed for out&#45;
of&#45;core graph processing, and show that 
it significantly improves cache locality
. Finally, we demonstrate that NUMA&#45;awar
eness and its attendant pre&#45;processing c
osts are beneficial only on large machin
es and for certain algorithms.</title>
<ellipse fill="none" stroke="#000000" cx="64252.022" cy="-461.0336" rx="184.8806" ry="451.2683"/>
<text text-anchor="middle" x="64252.022" y="-764.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Graph processing systems are used in a w</text>
<text text-anchor="middle" x="64252.022" y="-750.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ide variety of fields, ranging from biol</text>
<text text-anchor="middle" x="64252.022" y="-736.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ogy to social networks, and a large numb</text>
<text text-anchor="middle" x="64252.022" y="-722.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er of such systems have been described i</text>
<text text-anchor="middle" x="64252.022" y="-708.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n the recent literature. We perform a sy</text>
<text text-anchor="middle" x="64252.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stematic comparison of various technique</text>
<text text-anchor="middle" x="64252.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s proposed to speed up in&#45;memory multico</text>
<text text-anchor="middle" x="64252.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">re graph processing. In addition, we tak</text>
<text text-anchor="middle" x="64252.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e an end&#45;to&#45;end view of execution time, </text>
<text text-anchor="middle" x="64252.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">including not only algorithm execution t</text>
<text text-anchor="middle" x="64252.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ime, but also pre&#45;processing time and th</text>
<text text-anchor="middle" x="64252.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e time to load the graph input data from</text>
<text text-anchor="middle" x="64252.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> storage.More specifically, we study var</text>
<text text-anchor="middle" x="64252.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ious data structures to represent the gr</text>
<text text-anchor="middle" x="64252.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aph in memory, various approaches to pre</text>
<text text-anchor="middle" x="64252.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;processing and various ways to structur</text>
<text text-anchor="middle" x="64252.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e the graph computation. We also investi</text>
<text text-anchor="middle" x="64252.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gate approaches to improve cache localit</text>
<text text-anchor="middle" x="64252.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y, synchronization, and NUMA&#45;awareness. </text>
<text text-anchor="middle" x="64252.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">In doing so, we take our inspiration fro</text>
<text text-anchor="middle" x="64252.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m a number of graph processing systems, </text>
<text text-anchor="middle" x="64252.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">and implement the techniques they propos</text>
<text text-anchor="middle" x="64252.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e in a single system. We then selectivel</text>
<text text-anchor="middle" x="64252.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y enable different techniques, allowing </text>
<text text-anchor="middle" x="64252.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">us to assess their benefits in isolation</text>
<text text-anchor="middle" x="64252.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and independent of unrelated implementa</text>
<text text-anchor="middle" x="64252.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion considerations.Our main observation</text>
<text text-anchor="middle" x="64252.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> is that the cost of pre&#45;processing in m</text>
<text text-anchor="middle" x="64252.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">any circumstances dominates the cost of </text>
<text text-anchor="middle" x="64252.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">algorithm execution, calling into questi</text>
<text text-anchor="middle" x="64252.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on the benefits of proposed algorithmic </text>
<text text-anchor="middle" x="64252.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">optimizations that rely on extensive pre</text>
<text text-anchor="middle" x="64252.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">processing. Equally surprising, using ra</text>
<text text-anchor="middle" x="64252.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">dix sort turns out to be the most effici</text>
<text text-anchor="middle" x="64252.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ent way of pre&#45;processing the graph inpu</text>
<text text-anchor="middle" x="64252.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t data into adjacency lists, when the gr</text>
<text text-anchor="middle" x="64252.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aph input data is already in memory or i</text>
<text text-anchor="middle" x="64252.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s loaded from fast storage. Furthermore,</text>
<text text-anchor="middle" x="64252.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> we adapt a technique developed for out&#45;</text>
<text text-anchor="middle" x="64252.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of&#45;core graph processing, and show that </text>
<text text-anchor="middle" x="64252.022" y="-204.8336" font-family="Times,serif" font-size="14.00" fill="#000000">it significantly improves cache locality</text>
<text text-anchor="middle" x="64252.022" y="-190.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. Finally, we demonstrate that NUMA&#45;awar</text>
<text text-anchor="middle" x="64252.022" y="-176.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eness and its attendant pre&#45;processing c</text>
<text text-anchor="middle" x="64252.022" y="-162.8336" font-family="Times,serif" font-size="14.00" fill="#000000">osts are beneficial only on large machin</text>
<text text-anchor="middle" x="64252.022" y="-148.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es and for certain algorithms.</text>
</g>
<!-- 57&#45;&gt;Graph processing systems are used in a w
ide variety of fields, ranging from biol
ogy to social networks, and a large numb
er of such systems have been described i
n the recent literature. We perform a sy
stematic comparison of various technique
s proposed to speed up in&#45;memory multico
re graph processing. In addition, we tak
e an end&#45;to&#45;end view of execution time, 
including not only algorithm execution t
ime, but also pre&#45;processing time and th
e time to load the graph input data from
 storage.More specifically, we study var
ious data structures to represent the gr
aph in memory, various approaches to pre
&#45;processing and various ways to structur
e the graph computation. We also investi
gate approaches to improve cache localit
y, synchronization, and NUMA&#45;awareness. 
In doing so, we take our inspiration fro
m a number of graph processing systems, 
and implement the techniques they propos
e in a single system. We then selectivel
y enable different techniques, allowing 
us to assess their benefits in isolation
 and independent of unrelated implementa
tion considerations.Our main observation
 is that the cost of pre&#45;processing in m
any circumstances dominates the cost of 
algorithm execution, calling into questi
on the benefits of proposed algorithmic 
optimizations that rely on extensive pre
processing. Equally surprising, using ra
dix sort turns out to be the most effici
ent way of pre&#45;processing the graph inpu
t data into adjacency lists, when the gr
aph input data is already in memory or i
s loaded from fast storage. Furthermore,
 we adapt a technique developed for out&#45;
of&#45;core graph processing, and show that 
it significantly improves cache locality
. Finally, we demonstrate that NUMA&#45;awar
eness and its attendant pre&#45;processing c
osts are beneficial only on large machin
es and for certain algorithms. -->
<g id="edge232" class="edge">
<title>57&#45;&gt;Graph processing systems are used in a w
ide variety of fields, ranging from biol
ogy to social networks, and a large numb
er of such systems have been described i
n the recent literature. We perform a sy
stematic comparison of various technique
s proposed to speed up in&#45;memory multico
re graph processing. In addition, we tak
e an end&#45;to&#45;end view of execution time, 
including not only algorithm execution t
ime, but also pre&#45;processing time and th
e time to load the graph input data from
 storage.More specifically, we study var
ious data structures to represent the gr
aph in memory, various approaches to pre
&#45;processing and various ways to structur
e the graph computation. We also investi
gate approaches to improve cache localit
y, synchronization, and NUMA&#45;awareness. 
In doing so, we take our inspiration fro
m a number of graph processing systems, 
and implement the techniques they propos
e in a single system. We then selectivel
y enable different techniques, allowing 
us to assess their benefits in isolation
 and independent of unrelated implementa
tion considerations.Our main observation
 is that the cost of pre&#45;processing in m
any circumstances dominates the cost of 
algorithm execution, calling into questi
on the benefits of proposed algorithmic 
optimizations that rely on extensive pre
processing. Equally surprising, using ra
dix sort turns out to be the most effici
ent way of pre&#45;processing the graph inpu
t data into adjacency lists, when the gr
aph input data is already in memory or i
s loaded from fast storage. Furthermore,
 we adapt a technique developed for out&#45;
of&#45;core graph processing, and show that 
it significantly improves cache locality
. Finally, we demonstrate that NUMA&#45;awar
eness and its attendant pre&#45;processing c
osts are beneficial only on large machin
es and for certain algorithms.</title>
<path fill="none" stroke="#000000" d="M63694.2648,-975.719C63773.3247,-974.1925 64000.8184,-965.9945 64058.022,-922.0672 64089.3717,-897.9934 64115.7064,-867.9053 64137.8183,-834.7027"/>
<polygon fill="#000000" stroke="#000000" points="64140.8326,-836.4875 64143.3495,-826.196 64134.964,-832.6717 64140.8326,-836.4875"/>
</g>
<!-- Graphene&#45;SGX: A Practical Library OS for
 Unmodified Applications on SGX -->
<g id="node228" class="node">
<title>Graphene&#45;SGX: A Practical Library OS for
 Unmodified Applications on SGX</title>
<ellipse fill="none" stroke="#000000" cx="64637.022" cy="-461.0336" rx="182.6848" ry="25.4118"/>
<text text-anchor="middle" x="64637.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Graphene&#45;SGX: A Practical Library OS for</text>
<text text-anchor="middle" x="64637.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Unmodified Applications on SGX</text>
</g>
<!-- 58&#45;&gt;Graphene&#45;SGX: A Practical Library OS for
 Unmodified Applications on SGX -->
<g id="edge234" class="edge">
<title>58&#45;&gt;Graphene&#45;SGX: A Practical Library OS for
 Unmodified Applications on SGX</title>
<path fill="none" stroke="#000000" d="M64820.4818,-958.3386C64793.043,-883.9602 64686.9292,-596.3173 64649.8772,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="64653.1558,-494.6548 64646.4109,-486.4843 64646.5884,-497.0776 64653.1558,-494.6548"/>
</g>
<!-- Chia&#45;Che Tsai, Stony Brook University; D
onald E. Porter, University of North Car
olina at Chapel Hill and Fortanix; Mona 
Vij, Intel Corporation -->
<g id="node229" class="node">
<title>Chia&#45;Che Tsai, Stony Brook University; D
onald E. Porter, University of North Car
olina at Chapel Hill and Fortanix; Mona 
Vij, Intel Corporation</title>
<ellipse fill="none" stroke="#000000" cx="65017.022" cy="-461.0336" rx="179.6551" ry="45.011"/>
<text text-anchor="middle" x="65017.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Chia&#45;Che Tsai, Stony Brook University; D</text>
<text text-anchor="middle" x="65017.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onald E. Porter, University of North Car</text>
<text text-anchor="middle" x="65017.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">olina at Chapel Hill and Fortanix; Mona </text>
<text text-anchor="middle" x="65017.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Vij, Intel Corporation</text>
</g>
<!-- 58&#45;&gt;Chia&#45;Che Tsai, Stony Brook University; D
onald E. Porter, University of North Car
olina at Chapel Hill and Fortanix; Mona 
Vij, Intel Corporation -->
<g id="edge235" class="edge">
<title>58&#45;&gt;Chia&#45;Che Tsai, Stony Brook University; D
onald E. Porter, University of North Car
olina at Chapel Hill and Fortanix; Mona 
Vij, Intel Corporation</title>
<path fill="none" stroke="#000000" d="M64833.5622,-958.3386C64859.3681,-888.3865 64954.7637,-629.7974 64996.8493,-515.7159"/>
<polygon fill="#000000" stroke="#000000" points="65000.2127,-516.7108 65000.3902,-506.1175 64993.6454,-514.288 65000.2127,-516.7108"/>
</g>
<!-- Intel SGX hardware enables applications 
to protect themselves from potentially&#45;m
alicious OSes or hypervisors. In cloud c
omputing and other systems, many users a
nd applications could benefit from SGX. 
Unfortunately, current applications will
 not work out&#45;of&#45;the&#45;box on SGX. Althoug
h previous work has shown that a library
 OS can execute unmodified applications 
on SGX, a belief has developed that a li
brary OS will be ruinous for performance
 and TCB size, making application code m
odification an implicit prerequisite to 
adopting SGX.This paper demonstrates tha
t these concerns are exaggerated, and th
at a fully&#45;featured library OS can rapid
ly deploy unmodified applications on SGX
 with overheads comparable to applicatio
ns modified to use “shim” layers. We
 present a port of Graphene to SGX, as w
ell as a number of improvements to make 
the security benefits of SGX more usable
, such as integrity support for dynamica
lly&#45;loaded libraries, and secure multi&#45;p
rocess support. Graphene&#45;SGX supports a 
wide range of unmodified applications, i
ncluding Apache, GCC, and the R interpre
ter. The performance overheads of Graphe
ne&#45; SGX range from matching a Linux proc
ess to less than 2× in most single&#45;proc
ess cases; these overheads are largely a
ttributable to current SGX hardware or m
issed opportunities to optimize Graphene
 internals, and are not necessarily fund
amental to leaving the application unmod
ified. Graphene&#45;SGX is open&#45;source and h
as been used concurrently by other group
s for SGX research. -->
<g id="node230" class="node">
<title>Intel SGX hardware enables applications 
to protect themselves from potentially&#45;m
alicious OSes or hypervisors. In cloud c
omputing and other systems, many users a
nd applications could benefit from SGX. 
Unfortunately, current applications will
 not work out&#45;of&#45;the&#45;box on SGX. Althoug
h previous work has shown that a library
 OS can execute unmodified applications 
on SGX, a belief has developed that a li
brary OS will be ruinous for performance
 and TCB size, making application code m
odification an implicit prerequisite to 
adopting SGX.This paper demonstrates tha
t these concerns are exaggerated, and th
at a fully&#45;featured library OS can rapid
ly deploy unmodified applications on SGX
 with overheads comparable to applicatio
ns modified to use “shim” layers. We
 present a port of Graphene to SGX, as w
ell as a number of improvements to make 
the security benefits of SGX more usable
, such as integrity support for dynamica
lly&#45;loaded libraries, and secure multi&#45;p
rocess support. Graphene&#45;SGX supports a 
wide range of unmodified applications, i
ncluding Apache, GCC, and the R interpre
ter. The performance overheads of Graphe
ne&#45; SGX range from matching a Linux proc
ess to less than 2× in most single&#45;proc
ess cases; these overheads are largely a
ttributable to current SGX hardware or m
issed opportunities to optimize Graphene
 internals, and are not necessarily fund
amental to leaving the application unmod
ified. Graphene&#45;SGX is open&#45;source and h
as been used concurrently by other group
s for SGX research.</title>
<ellipse fill="none" stroke="#000000" cx="65400.022" cy="-461.0336" rx="184.5547" ry="381.6754"/>
<text text-anchor="middle" x="65400.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Intel SGX hardware enables applications </text>
<text text-anchor="middle" x="65400.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to protect themselves from potentially&#45;m</text>
<text text-anchor="middle" x="65400.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">alicious OSes or hypervisors. In cloud c</text>
<text text-anchor="middle" x="65400.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">omputing and other systems, many users a</text>
<text text-anchor="middle" x="65400.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd applications could benefit from SGX. </text>
<text text-anchor="middle" x="65400.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Unfortunately, current applications will</text>
<text text-anchor="middle" x="65400.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> not work out&#45;of&#45;the&#45;box on SGX. Althoug</text>
<text text-anchor="middle" x="65400.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h previous work has shown that a library</text>
<text text-anchor="middle" x="65400.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> OS can execute unmodified applications </text>
<text text-anchor="middle" x="65400.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on SGX, a belief has developed that a li</text>
<text text-anchor="middle" x="65400.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">brary OS will be ruinous for performance</text>
<text text-anchor="middle" x="65400.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and TCB size, making application code m</text>
<text text-anchor="middle" x="65400.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">odification an implicit prerequisite to </text>
<text text-anchor="middle" x="65400.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">adopting SGX.This paper demonstrates tha</text>
<text text-anchor="middle" x="65400.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t these concerns are exaggerated, and th</text>
<text text-anchor="middle" x="65400.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at a fully&#45;featured library OS can rapid</text>
<text text-anchor="middle" x="65400.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ly deploy unmodified applications on SGX</text>
<text text-anchor="middle" x="65400.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> with overheads comparable to applicatio</text>
<text text-anchor="middle" x="65400.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns modified to use “shim” layers. We</text>
<text text-anchor="middle" x="65400.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> present a port of Graphene to SGX, as w</text>
<text text-anchor="middle" x="65400.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ell as a number of improvements to make </text>
<text text-anchor="middle" x="65400.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the security benefits of SGX more usable</text>
<text text-anchor="middle" x="65400.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, such as integrity support for dynamica</text>
<text text-anchor="middle" x="65400.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lly&#45;loaded libraries, and secure multi&#45;p</text>
<text text-anchor="middle" x="65400.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rocess support. Graphene&#45;SGX supports a </text>
<text text-anchor="middle" x="65400.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">wide range of unmodified applications, i</text>
<text text-anchor="middle" x="65400.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ncluding Apache, GCC, and the R interpre</text>
<text text-anchor="middle" x="65400.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ter. The performance overheads of Graphe</text>
<text text-anchor="middle" x="65400.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ne&#45; SGX range from matching a Linux proc</text>
<text text-anchor="middle" x="65400.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ess to less than 2× in most single&#45;proc</text>
<text text-anchor="middle" x="65400.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ess cases; these overheads are largely a</text>
<text text-anchor="middle" x="65400.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ttributable to current SGX hardware or m</text>
<text text-anchor="middle" x="65400.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">issed opportunities to optimize Graphene</text>
<text text-anchor="middle" x="65400.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> internals, and are not necessarily fund</text>
<text text-anchor="middle" x="65400.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">amental to leaving the application unmod</text>
<text text-anchor="middle" x="65400.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ified. Graphene&#45;SGX is open&#45;source and h</text>
<text text-anchor="middle" x="65400.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">as been used concurrently by other group</text>
<text text-anchor="middle" x="65400.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s for SGX research.</text>
</g>
<!-- 58&#45;&gt;Intel SGX hardware enables applications 
to protect themselves from potentially&#45;m
alicious OSes or hypervisors. In cloud c
omputing and other systems, many users a
nd applications could benefit from SGX. 
Unfortunately, current applications will
 not work out&#45;of&#45;the&#45;box on SGX. Althoug
h previous work has shown that a library
 OS can execute unmodified applications 
on SGX, a belief has developed that a li
brary OS will be ruinous for performance
 and TCB size, making application code m
odification an implicit prerequisite to 
adopting SGX.This paper demonstrates tha
t these concerns are exaggerated, and th
at a fully&#45;featured library OS can rapid
ly deploy unmodified applications on SGX
 with overheads comparable to applicatio
ns modified to use “shim” layers. We
 present a port of Graphene to SGX, as w
ell as a number of improvements to make 
the security benefits of SGX more usable
, such as integrity support for dynamica
lly&#45;loaded libraries, and secure multi&#45;p
rocess support. Graphene&#45;SGX supports a 
wide range of unmodified applications, i
ncluding Apache, GCC, and the R interpre
ter. The performance overheads of Graphe
ne&#45; SGX range from matching a Linux proc
ess to less than 2× in most single&#45;proc
ess cases; these overheads are largely a
ttributable to current SGX hardware or m
issed opportunities to optimize Graphene
 internals, and are not necessarily fund
amental to leaving the application unmod
ified. Graphene&#45;SGX is open&#45;source and h
as been used concurrently by other group
s for SGX research. -->
<g id="edge236" class="edge">
<title>58&#45;&gt;Intel SGX hardware enables applications 
to protect themselves from potentially&#45;m
alicious OSes or hypervisors. In cloud c
omputing and other systems, many users a
nd applications could benefit from SGX. 
Unfortunately, current applications will
 not work out&#45;of&#45;the&#45;box on SGX. Althoug
h previous work has shown that a library
 OS can execute unmodified applications 
on SGX, a belief has developed that a li
brary OS will be ruinous for performance
 and TCB size, making application code m
odification an implicit prerequisite to 
adopting SGX.This paper demonstrates tha
t these concerns are exaggerated, and th
at a fully&#45;featured library OS can rapid
ly deploy unmodified applications on SGX
 with overheads comparable to applicatio
ns modified to use “shim” layers. We
 present a port of Graphene to SGX, as w
ell as a number of improvements to make 
the security benefits of SGX more usable
, such as integrity support for dynamica
lly&#45;loaded libraries, and secure multi&#45;p
rocess support. Graphene&#45;SGX supports a 
wide range of unmodified applications, i
ncluding Apache, GCC, and the R interpre
ter. The performance overheads of Graphe
ne&#45; SGX range from matching a Linux proc
ess to less than 2× in most single&#45;proc
ess cases; these overheads are largely a
ttributable to current SGX hardware or m
issed opportunities to optimize Graphene
 internals, and are not necessarily fund
amental to leaving the application unmod
ified. Graphene&#45;SGX is open&#45;source and h
as been used concurrently by other group
s for SGX research.</title>
<path fill="none" stroke="#000000" d="M64854.259,-975.585C64931.6524,-973.7003 65150.8295,-964.6387 65206.022,-922.0672 65246.8797,-890.5526 65279.2222,-848.8294 65304.8012,-803.3344"/>
<polygon fill="#000000" stroke="#000000" points="65307.9115,-804.9419 65309.663,-794.4928 65301.7777,-801.569 65307.9115,-804.9419"/>
</g>
<!-- PrivApprox: Privacy&#45;Preserving Stream An
alytics -->
<g id="node232" class="node">
<title>PrivApprox: Privacy&#45;Preserving Stream An
alytics</title>
<ellipse fill="none" stroke="#000000" cx="65786.022" cy="-461.0336" rx="183.9182" ry="25.4118"/>
<text text-anchor="middle" x="65786.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">PrivApprox: Privacy&#45;Preserving Stream An</text>
<text text-anchor="middle" x="65786.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">alytics</text>
</g>
<!-- 59&#45;&gt;PrivApprox: Privacy&#45;Preserving Stream An
alytics -->
<g id="edge238" class="edge">
<title>59&#45;&gt;PrivApprox: Privacy&#45;Preserving Stream An
alytics</title>
<path fill="none" stroke="#000000" d="M65974.3096,-958.3386C65946.1488,-883.9602 65837.2426,-596.3173 65799.2155,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="65802.4722,-494.5971 65795.658,-486.4843 65795.9257,-497.0757 65802.4722,-494.5971"/>
</g>
<!-- Do Le Quoc and Martin Beck, TU Dresden; 
Pramod Bhatotia, The University of Edinb
urgh; Ruichuan Chen, Nokia Bell Labs; Ch
ristof Fetzer and Thorsten Strufe, TU Dr
esden -->
<g id="node233" class="node">
<title>Do Le Quoc and Martin Beck, TU Dresden; 
Pramod Bhatotia, The University of Edinb
urgh; Ruichuan Chen, Nokia Bell Labs; Ch
ristof Fetzer and Thorsten Strufe, TU Dr
esden</title>
<ellipse fill="none" stroke="#000000" cx="66176.022" cy="-461.0336" rx="187.8093" ry="55.3091"/>
<text text-anchor="middle" x="66176.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Do Le Quoc and Martin Beck, TU Dresden; </text>
<text text-anchor="middle" x="66176.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Pramod Bhatotia, The University of Edinb</text>
<text text-anchor="middle" x="66176.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">urgh; Ruichuan Chen, Nokia Bell Labs; Ch</text>
<text text-anchor="middle" x="66176.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ristof Fetzer and Thorsten Strufe, TU Dr</text>
<text text-anchor="middle" x="66176.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">esden</text>
</g>
<!-- 59&#45;&gt;Do Le Quoc and Martin Beck, TU Dresden; 
Pramod Bhatotia, The University of Edinb
urgh; Ruichuan Chen, Nokia Bell Labs; Ch
ristof Fetzer and Thorsten Strufe, TU Dr
esden -->
<g id="edge239" class="edge">
<title>59&#45;&gt;Do Le Quoc and Martin Beck, TU Dresden; 
Pramod Bhatotia, The University of Edinb
urgh; Ruichuan Chen, Nokia Bell Labs; Ch
ristof Fetzer and Thorsten Strufe, TU Dr
esden</title>
<path fill="none" stroke="#000000" d="M65987.7343,-958.3386C66013.4643,-890.3807 66106.601,-644.3882 66151.4938,-525.8175"/>
<polygon fill="#000000" stroke="#000000" points="66154.8953,-526.7179 66155.163,-516.1264 66148.3488,-524.2392 66154.8953,-526.7179"/>
</g>
<!-- How to preserve users’ privacy while s
upporting high&#45;utility analytics for low
&#45;latency stream processing?To answer thi
s question: we describe the design, impl
ementation and evaluation of PRIVAPPROX,
 a data analytics system for privacy&#45;pre
serving stream processing. PRIVAPPROX pr
ovides three important properties: (i) P
rivacy: zero&#45;knowledge privacy guarantee
 for users, a privacy bound tighter than
 the state&#45;of&#45;the&#45;art differential priva
cy; (ii) Utility: an interface for data 
analysts to systematically explore the t
rade&#45;offs between the output accuracy (w
ith error estimation) and the query exec
ution budget; (iii) Latency: near real&#45;t
ime stream processing based on a scalabl
e “synchronization&#45;free” distributed
 architecture.The key idea behind our ap
proach is to marry two techniques togeth
er, namely, sampling (used for approxima
te computation) and randomized response 
(used for privacy&#45;preserving analytics).
 The resulting marriage is complementary
—it achieves stronger privacy guarante
es, and also improves the performance fo
r stream analytics. -->
<g id="node234" class="node">
<title>How to preserve users’ privacy while s
upporting high&#45;utility analytics for low
&#45;latency stream processing?To answer thi
s question: we describe the design, impl
ementation and evaluation of PRIVAPPROX,
 a data analytics system for privacy&#45;pre
serving stream processing. PRIVAPPROX pr
ovides three important properties: (i) P
rivacy: zero&#45;knowledge privacy guarantee
 for users, a privacy bound tighter than
 the state&#45;of&#45;the&#45;art differential priva
cy; (ii) Utility: an interface for data 
analysts to systematically explore the t
rade&#45;offs between the output accuracy (w
ith error estimation) and the query exec
ution budget; (iii) Latency: near real&#45;t
ime stream processing based on a scalabl
e “synchronization&#45;free” distributed
 architecture.The key idea behind our ap
proach is to marry two techniques togeth
er, namely, sampling (used for approxima
te computation) and randomized response 
(used for privacy&#45;preserving analytics).
 The resulting marriage is complementary
—it achieves stronger privacy guarante
es, and also improves the performance fo
r stream analytics.</title>
<ellipse fill="none" stroke="#000000" cx="66574.022" cy="-461.0336" rx="191.5629" ry="272.8864"/>
<text text-anchor="middle" x="66574.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">How to preserve users’ privacy while s</text>
<text text-anchor="middle" x="66574.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">upporting high&#45;utility analytics for low</text>
<text text-anchor="middle" x="66574.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;latency stream processing?To answer thi</text>
<text text-anchor="middle" x="66574.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s question: we describe the design, impl</text>
<text text-anchor="middle" x="66574.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ementation and evaluation of PRIVAPPROX,</text>
<text text-anchor="middle" x="66574.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a data analytics system for privacy&#45;pre</text>
<text text-anchor="middle" x="66574.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">serving stream processing. PRIVAPPROX pr</text>
<text text-anchor="middle" x="66574.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ovides three important properties: (i) P</text>
<text text-anchor="middle" x="66574.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rivacy: zero&#45;knowledge privacy guarantee</text>
<text text-anchor="middle" x="66574.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> for users, a privacy bound tighter than</text>
<text text-anchor="middle" x="66574.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> the state&#45;of&#45;the&#45;art differential priva</text>
<text text-anchor="middle" x="66574.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cy; (ii) Utility: an interface for data </text>
<text text-anchor="middle" x="66574.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">analysts to systematically explore the t</text>
<text text-anchor="middle" x="66574.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rade&#45;offs between the output accuracy (w</text>
<text text-anchor="middle" x="66574.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ith error estimation) and the query exec</text>
<text text-anchor="middle" x="66574.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ution budget; (iii) Latency: near real&#45;t</text>
<text text-anchor="middle" x="66574.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ime stream processing based on a scalabl</text>
<text text-anchor="middle" x="66574.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e “synchronization&#45;free” distributed</text>
<text text-anchor="middle" x="66574.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> architecture.The key idea behind our ap</text>
<text text-anchor="middle" x="66574.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">proach is to marry two techniques togeth</text>
<text text-anchor="middle" x="66574.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er, namely, sampling (used for approxima</text>
<text text-anchor="middle" x="66574.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">te computation) and randomized response </text>
<text text-anchor="middle" x="66574.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">(used for privacy&#45;preserving analytics).</text>
<text text-anchor="middle" x="66574.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> The resulting marriage is complementary</text>
<text text-anchor="middle" x="66574.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">—it achieves stronger privacy guarante</text>
<text text-anchor="middle" x="66574.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es, and also improves the performance fo</text>
<text text-anchor="middle" x="66574.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r stream analytics.</text>
</g>
<!-- 59&#45;&gt;How to preserve users’ privacy while s
upporting high&#45;utility analytics for low
&#45;latency stream processing?To answer thi
s question: we describe the design, impl
ementation and evaluation of PRIVAPPROX,
 a data analytics system for privacy&#45;pre
serving stream processing. PRIVAPPROX pr
ovides three important properties: (i) P
rivacy: zero&#45;knowledge privacy guarantee
 for users, a privacy bound tighter than
 the state&#45;of&#45;the&#45;art differential priva
cy; (ii) Utility: an interface for data 
analysts to systematically explore the t
rade&#45;offs between the output accuracy (w
ith error estimation) and the query exec
ution budget; (iii) Latency: near real&#45;t
ime stream processing based on a scalabl
e “synchronization&#45;free” distributed
 architecture.The key idea behind our ap
proach is to marry two techniques togeth
er, namely, sampling (used for approxima
te computation) and randomized response 
(used for privacy&#45;preserving analytics).
 The resulting marriage is complementary
—it achieves stronger privacy guarante
es, and also improves the performance fo
r stream analytics. -->
<g id="edge240" class="edge">
<title>59&#45;&gt;How to preserve users’ privacy while s
upporting high&#45;utility analytics for low
&#45;latency stream processing?To answer thi
s question: we describe the design, impl
ementation and evaluation of PRIVAPPROX,
 a data analytics system for privacy&#45;pre
serving stream processing. PRIVAPPROX pr
ovides three important properties: (i) P
rivacy: zero&#45;knowledge privacy guarantee
 for users, a privacy bound tighter than
 the state&#45;of&#45;the&#45;art differential priva
cy; (ii) Utility: an interface for data 
analysts to systematically explore the t
rade&#45;offs between the output accuracy (w
ith error estimation) and the query exec
ution budget; (iii) Latency: near real&#45;t
ime stream processing based on a scalabl
e “synchronization&#45;free” distributed
 architecture.The key idea behind our ap
proach is to marry two techniques togeth
er, namely, sampling (used for approxima
te computation) and randomized response 
(used for privacy&#45;preserving analytics).
 The resulting marriage is complementary
—it achieves stronger privacy guarante
es, and also improves the performance fo
r stream analytics.</title>
<path fill="none" stroke="#000000" d="M66008.0259,-975.6993C66086.9533,-974.1169 66315.3176,-965.7779 66373.022,-922.0672 66436.1818,-874.2242 66479.8205,-802.3709 66509.8414,-729.5406"/>
<polygon fill="#000000" stroke="#000000" points="66513.1175,-730.7752 66513.6192,-720.1922 66506.6274,-728.1525 66513.1175,-730.7752"/>
</g>
<!-- Mercury: Bandwidth&#45;Effective Prevention 
of Rollback Attacks Against Community Re
positories -->
<g id="node236" class="node">
<title>Mercury: Bandwidth&#45;Effective Prevention 
of Rollback Attacks Against Community Re
positories</title>
<ellipse fill="none" stroke="#000000" cx="66970.022" cy="-461.0336" rx="185.8553" ry="35.2113"/>
<text text-anchor="middle" x="66970.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Mercury: Bandwidth&#45;Effective Prevention </text>
<text text-anchor="middle" x="66970.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of Rollback Attacks Against Community Re</text>
<text text-anchor="middle" x="66970.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">positories</text>
</g>
<!-- 60&#45;&gt;Mercury: Bandwidth&#45;Effective Prevention 
of Rollback Attacks Against Community Re
positories -->
<g id="edge242" class="edge">
<title>60&#45;&gt;Mercury: Bandwidth&#45;Effective Prevention 
of Rollback Attacks Against Community Re
positories</title>
<path fill="none" stroke="#000000" d="M67158.3096,-958.3386C67131.0661,-886.383 67028.2519,-614.8303 66987.152,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="66990.3015,-504.711 66983.4873,-496.5982 66983.755,-507.1897 66990.3015,-504.711"/>
</g>
<!-- Trishank Karthik Kuppusamy, Vladimir Dia
z, and Justin Cappos, New York Universit
y -->
<g id="node237" class="node">
<title>Trishank Karthik Kuppusamy, Vladimir Dia
z, and Justin Cappos, New York Universit
y</title>
<ellipse fill="none" stroke="#000000" cx="67360.022" cy="-461.0336" rx="185.6718" ry="35.2113"/>
<text text-anchor="middle" x="67360.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Trishank Karthik Kuppusamy, Vladimir Dia</text>
<text text-anchor="middle" x="67360.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">z, and Justin Cappos, New York Universit</text>
<text text-anchor="middle" x="67360.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y</text>
</g>
<!-- 60&#45;&gt;Trishank Karthik Kuppusamy, Vladimir Dia
z, and Justin Cappos, New York Universit
y -->
<g id="edge243" class="edge">
<title>60&#45;&gt;Trishank Karthik Kuppusamy, Vladimir Dia
z, and Justin Cappos, New York Universit
y</title>
<path fill="none" stroke="#000000" d="M67171.7343,-958.3386C67198.9779,-886.383 67301.7921,-614.8303 67342.892,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="67346.289,-507.1897 67346.5567,-496.5982 67339.7425,-504.711 67346.289,-507.1897"/>
</g>
<!-- A popular community repository such as D
ocker Hub, PyPI, or RubyGems distributes
 tens of thousands of software projects 
to millions of users. The large number o
f projects and users make these reposito
ries attractive targets for exploitation
. After a repository compromise, a malic
ious party can launch a number of attack
s on unsuspecting users, including rollb
ack attacks that revert projects to obso
lete and vulnerable versions. Unfortunat
ely, due to the rapid rate at which pack
ages are updated, existing techniques th
at protect against rollback attacks woul
d cause each user to download 2–3 time
s the size of an average package in meta
data each month, making them impractical
 to deploy.In this work, we develop a sy
stem called Mercury that uses a novel te
chnique to compactly disseminate version
 information while still protecting agai
nst rollback attacks. Due to a different
 technique for dealing with key revocati
on, users are protected from rollback at
tacks, even if the software repository i
s compromised. This technique is bandwid
th&#45;efficient, especially when delta comp
ression is used to transmit only the dif
ferences between previous and current li
sts of version information. An analysis 
we performed for the Python community sh
ows that once Mercury is deployed on PyP
I, each user will only download metadata
 each month that is about 3.5% the size 
of an average package. Our work has been
 incorporated into the latest versions o
f TUF, which is being integrated by Hask
ell, OCaml, RubyGems, Python, and CoreOS
, and is being used in production by LEA
P, Flynn, and Docker. -->
<g id="node238" class="node">
<title>A popular community repository such as D
ocker Hub, PyPI, or RubyGems distributes
 tens of thousands of software projects 
to millions of users. The large number o
f projects and users make these reposito
ries attractive targets for exploitation
. After a repository compromise, a malic
ious party can launch a number of attack
s on unsuspecting users, including rollb
ack attacks that revert projects to obso
lete and vulnerable versions. Unfortunat
ely, due to the rapid rate at which pack
ages are updated, existing techniques th
at protect against rollback attacks woul
d cause each user to download 2–3 time
s the size of an average package in meta
data each month, making them impractical
 to deploy.In this work, we develop a sy
stem called Mercury that uses a novel te
chnique to compactly disseminate version
 information while still protecting agai
nst rollback attacks. Due to a different
 technique for dealing with key revocati
on, users are protected from rollback at
tacks, even if the software repository i
s compromised. This technique is bandwid
th&#45;efficient, especially when delta comp
ression is used to transmit only the dif
ferences between previous and current li
sts of version information. An analysis 
we performed for the Python community sh
ows that once Mercury is deployed on PyP
I, each user will only download metadata
 each month that is about 3.5% the size 
of an average package. Our work has been
 incorporated into the latest versions o
f TUF, which is being integrated by Hask
ell, OCaml, RubyGems, Python, and CoreOS
, and is being used in production by LEA
P, Flynn, and Docker.</title>
<ellipse fill="none" stroke="#000000" cx="67755.022" cy="-461.0336" rx="190.7452" ry="401.7733"/>
<text text-anchor="middle" x="67755.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000">A popular community repository such as D</text>
<text text-anchor="middle" x="67755.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ocker Hub, PyPI, or RubyGems distributes</text>
<text text-anchor="middle" x="67755.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> tens of thousands of software projects </text>
<text text-anchor="middle" x="67755.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to millions of users. The large number o</text>
<text text-anchor="middle" x="67755.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f projects and users make these reposito</text>
<text text-anchor="middle" x="67755.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ries attractive targets for exploitation</text>
<text text-anchor="middle" x="67755.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. After a repository compromise, a malic</text>
<text text-anchor="middle" x="67755.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ious party can launch a number of attack</text>
<text text-anchor="middle" x="67755.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s on unsuspecting users, including rollb</text>
<text text-anchor="middle" x="67755.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ack attacks that revert projects to obso</text>
<text text-anchor="middle" x="67755.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lete and vulnerable versions. Unfortunat</text>
<text text-anchor="middle" x="67755.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ely, due to the rapid rate at which pack</text>
<text text-anchor="middle" x="67755.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ages are updated, existing techniques th</text>
<text text-anchor="middle" x="67755.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at protect against rollback attacks woul</text>
<text text-anchor="middle" x="67755.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d cause each user to download 2–3 time</text>
<text text-anchor="middle" x="67755.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s the size of an average package in meta</text>
<text text-anchor="middle" x="67755.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">data each month, making them impractical</text>
<text text-anchor="middle" x="67755.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> to deploy.In this work, we develop a sy</text>
<text text-anchor="middle" x="67755.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stem called Mercury that uses a novel te</text>
<text text-anchor="middle" x="67755.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">chnique to compactly disseminate version</text>
<text text-anchor="middle" x="67755.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> information while still protecting agai</text>
<text text-anchor="middle" x="67755.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nst rollback attacks. Due to a different</text>
<text text-anchor="middle" x="67755.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> technique for dealing with key revocati</text>
<text text-anchor="middle" x="67755.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on, users are protected from rollback at</text>
<text text-anchor="middle" x="67755.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tacks, even if the software repository i</text>
<text text-anchor="middle" x="67755.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s compromised. This technique is bandwid</text>
<text text-anchor="middle" x="67755.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">th&#45;efficient, especially when delta comp</text>
<text text-anchor="middle" x="67755.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ression is used to transmit only the dif</text>
<text text-anchor="middle" x="67755.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ferences between previous and current li</text>
<text text-anchor="middle" x="67755.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sts of version information. An analysis </text>
<text text-anchor="middle" x="67755.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">we performed for the Python community sh</text>
<text text-anchor="middle" x="67755.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ows that once Mercury is deployed on PyP</text>
<text text-anchor="middle" x="67755.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">I, each user will only download metadata</text>
<text text-anchor="middle" x="67755.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> each month that is about 3.5% the size </text>
<text text-anchor="middle" x="67755.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">of an average package. Our work has been</text>
<text text-anchor="middle" x="67755.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> incorporated into the latest versions o</text>
<text text-anchor="middle" x="67755.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f TUF, which is being integrated by Hask</text>
<text text-anchor="middle" x="67755.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ell, OCaml, RubyGems, Python, and CoreOS</text>
<text text-anchor="middle" x="67755.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, and is being used in production by LEA</text>
<text text-anchor="middle" x="67755.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000">P, Flynn, and Docker.</text>
</g>
<!-- 60&#45;&gt;A popular community repository such as D
ocker Hub, PyPI, or RubyGems distributes
 tens of thousands of software projects 
to millions of users. The large number o
f projects and users make these reposito
ries attractive targets for exploitation
. After a repository compromise, a malic
ious party can launch a number of attack
s on unsuspecting users, including rollb
ack attacks that revert projects to obso
lete and vulnerable versions. Unfortunat
ely, due to the rapid rate at which pack
ages are updated, existing techniques th
at protect against rollback attacks woul
d cause each user to download 2–3 time
s the size of an average package in meta
data each month, making them impractical
 to deploy.In this work, we develop a sy
stem called Mercury that uses a novel te
chnique to compactly disseminate version
 information while still protecting agai
nst rollback attacks. Due to a different
 technique for dealing with key revocati
on, users are protected from rollback at
tacks, even if the software repository i
s compromised. This technique is bandwid
th&#45;efficient, especially when delta comp
ression is used to transmit only the dif
ferences between previous and current li
sts of version information. An analysis 
we performed for the Python community sh
ows that once Mercury is deployed on PyP
I, each user will only download metadata
 each month that is about 3.5% the size 
of an average package. Our work has been
 incorporated into the latest versions o
f TUF, which is being integrated by Hask
ell, OCaml, RubyGems, Python, and CoreOS
, and is being used in production by LEA
P, Flynn, and Docker. -->
<g id="edge244" class="edge">
<title>60&#45;&gt;A popular community repository such as D
ocker Hub, PyPI, or RubyGems distributes
 tens of thousands of software projects 
to millions of users. The large number o
f projects and users make these reposito
ries attractive targets for exploitation
. After a repository compromise, a malic
ious party can launch a number of attack
s on unsuspecting users, including rollb
ack attacks that revert projects to obso
lete and vulnerable versions. Unfortunat
ely, due to the rapid rate at which pack
ages are updated, existing techniques th
at protect against rollback attacks woul
d cause each user to download 2–3 time
s the size of an average package in meta
data each month, making them impractical
 to deploy.In this work, we develop a sy
stem called Mercury that uses a novel te
chnique to compactly disseminate version
 information while still protecting agai
nst rollback attacks. Due to a different
 technique for dealing with key revocati
on, users are protected from rollback at
tacks, even if the software repository i
s compromised. This technique is bandwid
th&#45;efficient, especially when delta comp
ression is used to transmit only the dif
ferences between previous and current li
sts of version information. An analysis 
we performed for the Python community sh
ows that once Mercury is deployed on PyP
I, each user will only download metadata
 each month that is about 3.5% the size 
of an average package. Our work has been
 incorporated into the latest versions o
f TUF, which is being integrated by Hask
ell, OCaml, RubyGems, Python, and CoreOS
, and is being used in production by LEA
P, Flynn, and Docker.</title>
<path fill="none" stroke="#000000" d="M67192.1728,-975.6797C67270.9691,-974.0451 67497.7293,-965.5796 67555.022,-922.0672 67593.6172,-892.7551 67624.8797,-854.457 67650.1746,-812.4526"/>
<polygon fill="#000000" stroke="#000000" points="67653.2587,-814.1129 67655.318,-803.7201 67647.2272,-810.5603 67653.2587,-814.1129"/>
</g>
<!-- CAB&#45;Fuzz: Practical Concolic Testing Tec
hniques for COTS Operating Systems -->
<g id="node240" class="node">
<title>CAB&#45;Fuzz: Practical Concolic Testing Tec
hniques for COTS Operating Systems</title>
<ellipse fill="none" stroke="#000000" cx="68144.022" cy="-461.0336" rx="180.0513" ry="25.4118"/>
<text text-anchor="middle" x="68144.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">CAB&#45;Fuzz: Practical Concolic Testing Tec</text>
<text text-anchor="middle" x="68144.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hniques for COTS Operating Systems</text>
</g>
<!-- 61&#45;&gt;CAB&#45;Fuzz: Practical Concolic Testing Tec
hniques for COTS Operating Systems -->
<g id="edge246" class="edge">
<title>61&#45;&gt;CAB&#45;Fuzz: Practical Concolic Testing Tec
hniques for COTS Operating Systems</title>
<path fill="none" stroke="#000000" d="M68330.3785,-958.3386C68302.5065,-883.9602 68194.7172,-596.3173 68157.0802,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="68160.3457,-494.6202 68153.5592,-486.4843 68153.7908,-497.0766 68160.3457,-494.6202"/>
</g>
<!-- Su Yong Kim, The Affiliated Institute of
 ETRI; Sangho Lee, Insu Yun, and Wen Xu,
 Georgia Tech; Byoungyoung Lee, Purdue U
niversity; Youngtae Yun, The Affiliated 
Institute of ETRI; Taesoo Kim, Georgia T
ech -->
<g id="node241" class="node">
<title>Su Yong Kim, The Affiliated Institute of
 ETRI; Sangho Lee, Insu Yun, and Wen Xu,
 Georgia Tech; Byoungyoung Lee, Purdue U
niversity; Youngtae Yun, The Affiliated 
Institute of ETRI; Taesoo Kim, Georgia T
ech</title>
<ellipse fill="none" stroke="#000000" cx="68530.022" cy="-461.0336" rx="188.2928" ry="65.1077"/>
<text text-anchor="middle" x="68530.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Su Yong Kim, The Affiliated Institute of</text>
<text text-anchor="middle" x="68530.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> ETRI; Sangho Lee, Insu Yun, and Wen Xu,</text>
<text text-anchor="middle" x="68530.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Georgia Tech; Byoungyoung Lee, Purdue U</text>
<text text-anchor="middle" x="68530.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">niversity; Youngtae Yun, The Affiliated </text>
<text text-anchor="middle" x="68530.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Institute of ETRI; Taesoo Kim, Georgia T</text>
<text text-anchor="middle" x="68530.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ech</text>
</g>
<!-- 61&#45;&gt;Su Yong Kim, The Affiliated Institute of
 ETRI; Sangho Lee, Insu Yun, and Wen Xu,
 Georgia Tech; Byoungyoung Lee, Purdue U
niversity; Youngtae Yun, The Affiliated 
Institute of ETRI; Taesoo Kim, Georgia T
ech -->
<g id="edge247" class="edge">
<title>61&#45;&gt;Su Yong Kim, The Affiliated Institute of
 ETRI; Sangho Lee, Insu Yun, and Wen Xu,
 Georgia Tech; Byoungyoung Lee, Purdue U
niversity; Youngtae Yun, The Affiliated 
Institute of ETRI; Taesoo Kim, Georgia T
ech</title>
<path fill="none" stroke="#000000" d="M68343.6655,-958.3386C68368.4472,-892.2069 68456.407,-657.4803 68502.0622,-535.6463"/>
<polygon fill="#000000" stroke="#000000" points="68505.4445,-536.5943 68505.6762,-526.002 68498.8897,-534.138 68505.4445,-536.5943"/>
</g>
<!-- Discovering the security vulnerabilities
 of commercial off&#45;the&#45;shelf (COTS) oper
ating systems (OSes) is challenging beca
use they not only are huge and complex, 
but also lack detailed debug information
. Concolic testing, which generates all 
feasible inputs of a program by using sy
mbolic execution and tests the program w
ith the generated inputs, is one of the 
most promising approaches to solve this 
problem. Unfortunately, the state&#45;of&#45;the
&#45;art concolic testing tools do not scale
 well for testing COTS OSes because of s
tate explosion. Indeed, they often fail 
to find a single bug (or crash) in COTS 
OSes despite their long execution time.I
n this paper, we propose CAB&#45;FUZZ (Conte
xt&#45;Aware and Boundary&#45;focused), a practi
cal concolic testing tool to quickly exp
lore interesting paths that are highly l
ikely triggering real bugs without debug
 information. First, CAB&#45;FUZZ prioritize
s the boundary states of arrays and loop
s, inspired by the fact that many vulner
abilities originate from a lack of prope
r boundary checks. Second, CAB&#45;FUZZ expl
oits real programs interacting with COTS
 OSes to construct proper contexts to ex
plore deep and complex kernel states wit
hout debug information. We applied CAB&#45;F
UZZ to Windows 7 and Windows Server 2008
 and found 21 undisclosed unique crashes
, including two local privilege escalati
on vulnerabilities (CVE&#45; 2015&#45;6098 and C
VE&#45;2016&#45;0040) and one information disclo
sure vulnerability in a cryptography dri
ver (CVE&#45; 2016&#45;7219). CAB&#45;FUZZ found vul
nerabilities that are non&#45;trivial to dis
cover; five vulnerabilities have existed
 for 14 years, and we could trigger them
 even in the initial version of Windows 
XP (August 2001). -->
<g id="node242" class="node">
<title>Discovering the security vulnerabilities
 of commercial off&#45;the&#45;shelf (COTS) oper
ating systems (OSes) is challenging beca
use they not only are huge and complex, 
but also lack detailed debug information
. Concolic testing, which generates all 
feasible inputs of a program by using sy
mbolic execution and tests the program w
ith the generated inputs, is one of the 
most promising approaches to solve this 
problem. Unfortunately, the state&#45;of&#45;the
&#45;art concolic testing tools do not scale
 well for testing COTS OSes because of s
tate explosion. Indeed, they often fail 
to find a single bug (or crash) in COTS 
OSes despite their long execution time.I
n this paper, we propose CAB&#45;FUZZ (Conte
xt&#45;Aware and Boundary&#45;focused), a practi
cal concolic testing tool to quickly exp
lore interesting paths that are highly l
ikely triggering real bugs without debug
 information. First, CAB&#45;FUZZ prioritize
s the boundary states of arrays and loop
s, inspired by the fact that many vulner
abilities originate from a lack of prope
r boundary checks. Second, CAB&#45;FUZZ expl
oits real programs interacting with COTS
 OSes to construct proper contexts to ex
plore deep and complex kernel states wit
hout debug information. We applied CAB&#45;F
UZZ to Windows 7 and Windows Server 2008
 and found 21 undisclosed unique crashes
, including two local privilege escalati
on vulnerabilities (CVE&#45; 2015&#45;6098 and C
VE&#45;2016&#45;0040) and one information disclo
sure vulnerability in a cryptography dri
ver (CVE&#45; 2016&#45;7219). CAB&#45;FUZZ found vul
nerabilities that are non&#45;trivial to dis
cover; five vulnerabilities have existed
 for 14 years, and we could trigger them
 even in the initial version of Windows 
XP (August 2001).</title>
<ellipse fill="none" stroke="#000000" cx="68932.022" cy="-461.0336" rx="195.5646" ry="421.3713"/>
<text text-anchor="middle" x="68932.022" y="-743.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Discovering the security vulnerabilities</text>
<text text-anchor="middle" x="68932.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> of commercial off&#45;the&#45;shelf (COTS) oper</text>
<text text-anchor="middle" x="68932.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ating systems (OSes) is challenging beca</text>
<text text-anchor="middle" x="68932.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">use they not only are huge and complex, </text>
<text text-anchor="middle" x="68932.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">but also lack detailed debug information</text>
<text text-anchor="middle" x="68932.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. Concolic testing, which generates all </text>
<text text-anchor="middle" x="68932.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000">feasible inputs of a program by using sy</text>
<text text-anchor="middle" x="68932.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mbolic execution and tests the program w</text>
<text text-anchor="middle" x="68932.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ith the generated inputs, is one of the </text>
<text text-anchor="middle" x="68932.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">most promising approaches to solve this </text>
<text text-anchor="middle" x="68932.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">problem. Unfortunately, the state&#45;of&#45;the</text>
<text text-anchor="middle" x="68932.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;art concolic testing tools do not scale</text>
<text text-anchor="middle" x="68932.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> well for testing COTS OSes because of s</text>
<text text-anchor="middle" x="68932.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tate explosion. Indeed, they often fail </text>
<text text-anchor="middle" x="68932.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000">to find a single bug (or crash) in COTS </text>
<text text-anchor="middle" x="68932.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">OSes despite their long execution time.I</text>
<text text-anchor="middle" x="68932.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n this paper, we propose CAB&#45;FUZZ (Conte</text>
<text text-anchor="middle" x="68932.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">xt&#45;Aware and Boundary&#45;focused), a practi</text>
<text text-anchor="middle" x="68932.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cal concolic testing tool to quickly exp</text>
<text text-anchor="middle" x="68932.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lore interesting paths that are highly l</text>
<text text-anchor="middle" x="68932.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ikely triggering real bugs without debug</text>
<text text-anchor="middle" x="68932.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> information. First, CAB&#45;FUZZ prioritize</text>
<text text-anchor="middle" x="68932.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s the boundary states of arrays and loop</text>
<text text-anchor="middle" x="68932.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s, inspired by the fact that many vulner</text>
<text text-anchor="middle" x="68932.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">abilities originate from a lack of prope</text>
<text text-anchor="middle" x="68932.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r boundary checks. Second, CAB&#45;FUZZ expl</text>
<text text-anchor="middle" x="68932.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oits real programs interacting with COTS</text>
<text text-anchor="middle" x="68932.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> OSes to construct proper contexts to ex</text>
<text text-anchor="middle" x="68932.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">plore deep and complex kernel states wit</text>
<text text-anchor="middle" x="68932.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hout debug information. We applied CAB&#45;F</text>
<text text-anchor="middle" x="68932.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">UZZ to Windows 7 and Windows Server 2008</text>
<text text-anchor="middle" x="68932.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and found 21 undisclosed unique crashes</text>
<text text-anchor="middle" x="68932.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, including two local privilege escalati</text>
<text text-anchor="middle" x="68932.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on vulnerabilities (CVE&#45; 2015&#45;6098 and C</text>
<text text-anchor="middle" x="68932.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">VE&#45;2016&#45;0040) and one information disclo</text>
<text text-anchor="middle" x="68932.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sure vulnerability in a cryptography dri</text>
<text text-anchor="middle" x="68932.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ver (CVE&#45; 2016&#45;7219). CAB&#45;FUZZ found vul</text>
<text text-anchor="middle" x="68932.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nerabilities that are non&#45;trivial to dis</text>
<text text-anchor="middle" x="68932.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cover; five vulnerabilities have existed</text>
<text text-anchor="middle" x="68932.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> for 14 years, and we could trigger them</text>
<text text-anchor="middle" x="68932.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> even in the initial version of Windows </text>
<text text-anchor="middle" x="68932.022" y="-169.8336" font-family="Times,serif" font-size="14.00" fill="#000000">XP (August 2001).</text>
</g>
<!-- 61&#45;&gt;Discovering the security vulnerabilities
 of commercial off&#45;the&#45;shelf (COTS) oper
ating systems (OSes) is challenging beca
use they not only are huge and complex, 
but also lack detailed debug information
. Concolic testing, which generates all 
feasible inputs of a program by using sy
mbolic execution and tests the program w
ith the generated inputs, is one of the 
most promising approaches to solve this 
problem. Unfortunately, the state&#45;of&#45;the
&#45;art concolic testing tools do not scale
 well for testing COTS OSes because of s
tate explosion. Indeed, they often fail 
to find a single bug (or crash) in COTS 
OSes despite their long execution time.I
n this paper, we propose CAB&#45;FUZZ (Conte
xt&#45;Aware and Boundary&#45;focused), a practi
cal concolic testing tool to quickly exp
lore interesting paths that are highly l
ikely triggering real bugs without debug
 information. First, CAB&#45;FUZZ prioritize
s the boundary states of arrays and loop
s, inspired by the fact that many vulner
abilities originate from a lack of prope
r boundary checks. Second, CAB&#45;FUZZ expl
oits real programs interacting with COTS
 OSes to construct proper contexts to ex
plore deep and complex kernel states wit
hout debug information. We applied CAB&#45;F
UZZ to Windows 7 and Windows Server 2008
 and found 21 undisclosed unique crashes
, including two local privilege escalati
on vulnerabilities (CVE&#45; 2015&#45;6098 and C
VE&#45;2016&#45;0040) and one information disclo
sure vulnerability in a cryptography dri
ver (CVE&#45; 2016&#45;7219). CAB&#45;FUZZ found vul
nerabilities that are non&#45;trivial to dis
cover; five vulnerabilities have existed
 for 14 years, and we could trigger them
 even in the initial version of Windows 
XP (August 2001). -->
<g id="edge248" class="edge">
<title>61&#45;&gt;Discovering the security vulnerabilities
 of commercial off&#45;the&#45;shelf (COTS) oper
ating systems (OSes) is challenging beca
use they not only are huge and complex, 
but also lack detailed debug information
. Concolic testing, which generates all 
feasible inputs of a program by using sy
mbolic execution and tests the program w
ith the generated inputs, is one of the 
most promising approaches to solve this 
problem. Unfortunately, the state&#45;of&#45;the
&#45;art concolic testing tools do not scale
 well for testing COTS OSes because of s
tate explosion. Indeed, they often fail 
to find a single bug (or crash) in COTS 
OSes despite their long execution time.I
n this paper, we propose CAB&#45;FUZZ (Conte
xt&#45;Aware and Boundary&#45;focused), a practi
cal concolic testing tool to quickly exp
lore interesting paths that are highly l
ikely triggering real bugs without debug
 information. First, CAB&#45;FUZZ prioritize
s the boundary states of arrays and loop
s, inspired by the fact that many vulner
abilities originate from a lack of prope
r boundary checks. Second, CAB&#45;FUZZ expl
oits real programs interacting with COTS
 OSes to construct proper contexts to ex
plore deep and complex kernel states wit
hout debug information. We applied CAB&#45;F
UZZ to Windows 7 and Windows Server 2008
 and found 21 undisclosed unique crashes
, including two local privilege escalati
on vulnerabilities (CVE&#45; 2015&#45;6098 and C
VE&#45;2016&#45;0040) and one information disclo
sure vulnerability in a cryptography dri
ver (CVE&#45; 2016&#45;7219). CAB&#45;FUZZ found vul
nerabilities that are non&#45;trivial to dis
cover; five vulnerabilities have existed
 for 14 years, and we could trigger them
 even in the initial version of Windows 
XP (August 2001).</title>
<path fill="none" stroke="#000000" d="M68364.1541,-975.655C68442.899,-973.9523 68669.5321,-965.3188 68727.022,-922.0672 68763.3024,-894.7723 68793.2952,-859.6317 68818.0591,-820.9411"/>
<polygon fill="#000000" stroke="#000000" points="68821.2515,-822.4373 68823.5885,-812.1035 68815.3173,-818.7245 68821.2515,-822.4373"/>
</g>
<!-- Log&#45;Structured Non&#45;Volatile Main Memory -->
<g id="node244" class="node">
<title>Log&#45;Structured Non&#45;Volatile Main Memory</title>
<ellipse fill="none" stroke="#000000" cx="69311.022" cy="-461.0336" rx="165.3232" ry="18"/>
<text text-anchor="middle" x="69311.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Log&#45;Structured Non&#45;Volatile Main Memory</text>
</g>
<!-- 62&#45;&gt;Log&#45;Structured Non&#45;Volatile Main Memory -->
<g id="edge250" class="edge">
<title>62&#45;&gt;Log&#45;Structured Non&#45;Volatile Main Memory</title>
<path fill="none" stroke="#000000" d="M69490.6195,-958.3386C69463.0971,-882.1293 69354.7176,-582.0267 69321.053,-488.8094"/>
<polygon fill="#000000" stroke="#000000" points="69324.2788,-487.4375 69317.5902,-479.2209 69317.695,-489.8152 69324.2788,-487.4375"/>
</g>
<!-- Qingda Hu, Tsinghua University; Jinglei 
Ren and Anirudh Badam, Microsoft Researc
h; Jiwu Shu, Tsinghua University; Thomas
 Moscibroda, Microsoft Research -->
<g id="node245" class="node">
<title>Qingda Hu, Tsinghua University; Jinglei 
Ren and Anirudh Badam, Microsoft Researc
h; Jiwu Shu, Tsinghua University; Thomas
 Moscibroda, Microsoft Research</title>
<ellipse fill="none" stroke="#000000" cx="69682.022" cy="-461.0336" rx="187.0335" ry="45.011"/>
<text text-anchor="middle" x="69682.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Qingda Hu, Tsinghua University; Jinglei </text>
<text text-anchor="middle" x="69682.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Ren and Anirudh Badam, Microsoft Researc</text>
<text text-anchor="middle" x="69682.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">h; Jiwu Shu, Tsinghua University; Thomas</text>
<text text-anchor="middle" x="69682.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Moscibroda, Microsoft Research</text>
</g>
<!-- 62&#45;&gt;Qingda Hu, Tsinghua University; Jinglei 
Ren and Anirudh Badam, Microsoft Researc
h; Jiwu Shu, Tsinghua University; Thomas
 Moscibroda, Microsoft Research -->
<g id="edge251" class="edge">
<title>62&#45;&gt;Qingda Hu, Tsinghua University; Jinglei 
Ren and Anirudh Badam, Microsoft Researc
h; Jiwu Shu, Tsinghua University; Thomas
 Moscibroda, Microsoft Research</title>
<path fill="none" stroke="#000000" d="M69503.3901,-958.3386C69528.486,-888.4724 69621.1739,-630.4325 69662.2289,-516.137"/>
<polygon fill="#000000" stroke="#000000" points="69665.5974,-517.1124 69665.684,-506.5179 69659.0095,-514.746 69665.5974,-517.1124"/>
</g>
<!-- Emerging non&#45;volatile main memory (NVMM)
 unlocks the performance potential of ap
plications by storing persistent data in
 the main memory. Such applications requ
ire a lightweight persistent transaction
al memory (PTM) system, instead of a hea
vyweight filesystem or database, to have
 fast access to data. In a PTM system, t
he memory usage, both capacity and bandw
idth, plays a key role in dictating perf
ormance and efficiency. Existing memory 
management mechanisms for PTMs generate 
high memory fragmentation, high write tr
affic and a large number of persist barr
iers, since data is first written to a l
og and then to the main data store.In th
is paper, we present a log&#45;structured NV
MM system that not only maintains NVMM i
n a compact manner but also reduces the 
write traffic and the number of persist 
barriers needed for executing transactio
ns. All data allocations and modificatio
ns are appended to the log which becomes
 the location of the data. Further, we a
ddress a unique challenge of log&#45;structu
red memory management by designing a tre
e&#45;based address translation mechanism wh
ere access granularities are flexible an
d different from allocation granularitie
s. Our results show that the new system 
enjoys up to 89.9% higher transaction th
roughput and up to 82.8% lower write tra
ffic than a traditional PTM system. -->
<g id="node246" class="node">
<title>Emerging non&#45;volatile main memory (NVMM)
 unlocks the performance potential of ap
plications by storing persistent data in
 the main memory. Such applications requ
ire a lightweight persistent transaction
al memory (PTM) system, instead of a hea
vyweight filesystem or database, to have
 fast access to data. In a PTM system, t
he memory usage, both capacity and bandw
idth, plays a key role in dictating perf
ormance and efficiency. Existing memory 
management mechanisms for PTMs generate 
high memory fragmentation, high write tr
affic and a large number of persist barr
iers, since data is first written to a l
og and then to the main data store.In th
is paper, we present a log&#45;structured NV
MM system that not only maintains NVMM i
n a compact manner but also reduces the 
write traffic and the number of persist 
barriers needed for executing transactio
ns. All data allocations and modificatio
ns are appended to the log which becomes
 the location of the data. Further, we a
ddress a unique challenge of log&#45;structu
red memory management by designing a tre
e&#45;based address translation mechanism wh
ere access granularities are flexible an
d different from allocation granularitie
s. Our results show that the new system 
enjoys up to 89.9% higher transaction th
roughput and up to 82.8% lower write tra
ffic than a traditional PTM system.</title>
<ellipse fill="none" stroke="#000000" cx="70086.022" cy="-461.0336" rx="199.383" ry="332.1805"/>
<text text-anchor="middle" x="70086.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Emerging non&#45;volatile main memory (NVMM)</text>
<text text-anchor="middle" x="70086.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> unlocks the performance potential of ap</text>
<text text-anchor="middle" x="70086.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">plications by storing persistent data in</text>
<text text-anchor="middle" x="70086.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> the main memory. Such applications requ</text>
<text text-anchor="middle" x="70086.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ire a lightweight persistent transaction</text>
<text text-anchor="middle" x="70086.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">al memory (PTM) system, instead of a hea</text>
<text text-anchor="middle" x="70086.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">vyweight filesystem or database, to have</text>
<text text-anchor="middle" x="70086.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> fast access to data. In a PTM system, t</text>
<text text-anchor="middle" x="70086.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">he memory usage, both capacity and bandw</text>
<text text-anchor="middle" x="70086.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">idth, plays a key role in dictating perf</text>
<text text-anchor="middle" x="70086.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ormance and efficiency. Existing memory </text>
<text text-anchor="middle" x="70086.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">management mechanisms for PTMs generate </text>
<text text-anchor="middle" x="70086.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">high memory fragmentation, high write tr</text>
<text text-anchor="middle" x="70086.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">affic and a large number of persist barr</text>
<text text-anchor="middle" x="70086.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iers, since data is first written to a l</text>
<text text-anchor="middle" x="70086.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">og and then to the main data store.In th</text>
<text text-anchor="middle" x="70086.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">is paper, we present a log&#45;structured NV</text>
<text text-anchor="middle" x="70086.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">MM system that not only maintains NVMM i</text>
<text text-anchor="middle" x="70086.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n a compact manner but also reduces the </text>
<text text-anchor="middle" x="70086.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">write traffic and the number of persist </text>
<text text-anchor="middle" x="70086.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">barriers needed for executing transactio</text>
<text text-anchor="middle" x="70086.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns. All data allocations and modificatio</text>
<text text-anchor="middle" x="70086.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ns are appended to the log which becomes</text>
<text text-anchor="middle" x="70086.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> the location of the data. Further, we a</text>
<text text-anchor="middle" x="70086.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ddress a unique challenge of log&#45;structu</text>
<text text-anchor="middle" x="70086.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">red memory management by designing a tre</text>
<text text-anchor="middle" x="70086.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e&#45;based address translation mechanism wh</text>
<text text-anchor="middle" x="70086.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ere access granularities are flexible an</text>
<text text-anchor="middle" x="70086.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d different from allocation granularitie</text>
<text text-anchor="middle" x="70086.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s. Our results show that the new system </text>
<text text-anchor="middle" x="70086.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">enjoys up to 89.9% higher transaction th</text>
<text text-anchor="middle" x="70086.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">roughput and up to 82.8% lower write tra</text>
<text text-anchor="middle" x="70086.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ffic than a traditional PTM system.</text>
</g>
<!-- 62&#45;&gt;Emerging non&#45;volatile main memory (NVMM)
 unlocks the performance potential of ap
plications by storing persistent data in
 the main memory. Such applications requ
ire a lightweight persistent transaction
al memory (PTM) system, instead of a hea
vyweight filesystem or database, to have
 fast access to data. In a PTM system, t
he memory usage, both capacity and bandw
idth, plays a key role in dictating perf
ormance and efficiency. Existing memory 
management mechanisms for PTMs generate 
high memory fragmentation, high write tr
affic and a large number of persist barr
iers, since data is first written to a l
og and then to the main data store.In th
is paper, we present a log&#45;structured NV
MM system that not only maintains NVMM i
n a compact manner but also reduces the 
write traffic and the number of persist 
barriers needed for executing transactio
ns. All data allocations and modificatio
ns are appended to the log which becomes
 the location of the data. Further, we a
ddress a unique challenge of log&#45;structu
red memory management by designing a tre
e&#45;based address translation mechanism wh
ere access granularities are flexible an
d different from allocation granularitie
s. Our results show that the new system 
enjoys up to 89.9% higher transaction th
roughput and up to 82.8% lower write tra
ffic than a traditional PTM system. -->
<g id="edge252" class="edge">
<title>62&#45;&gt;Emerging non&#45;volatile main memory (NVMM)
 unlocks the performance potential of ap
plications by storing persistent data in
 the main memory. Such applications requ
ire a lightweight persistent transaction
al memory (PTM) system, instead of a hea
vyweight filesystem or database, to have
 fast access to data. In a PTM system, t
he memory usage, both capacity and bandw
idth, plays a key role in dictating perf
ormance and efficiency. Existing memory 
management mechanisms for PTMs generate 
high memory fragmentation, high write tr
affic and a large number of persist barr
iers, since data is first written to a l
og and then to the main data store.In th
is paper, we present a log&#45;structured NV
MM system that not only maintains NVMM i
n a compact manner but also reduces the 
write traffic and the number of persist 
barriers needed for executing transactio
ns. All data allocations and modificatio
ns are appended to the log which becomes
 the location of the data. Further, we a
ddress a unique challenge of log&#45;structu
red memory management by designing a tre
e&#45;based address translation mechanism wh
ere access granularities are flexible an
d different from allocation granularitie
s. Our results show that the new system 
enjoys up to 89.9% higher transaction th
roughput and up to 82.8% lower write tra
ffic than a traditional PTM system.</title>
<path fill="none" stroke="#000000" d="M69524.0717,-975.5421C69601.4808,-973.5378 69821.9204,-964.1772 69878.022,-922.0672 69929.2677,-883.6021 69968.1988,-829.6066 69997.6721,-772.0595"/>
<polygon fill="#000000" stroke="#000000" points="70000.9643,-773.3025 70002.3216,-762.7949 69994.708,-770.1626 70000.9643,-773.3025"/>
</g>
<!-- Soft Updates Made Simple and Fast on Non
&#45;volatile Memory -->
<g id="node248" class="node">
<title>Soft Updates Made Simple and Fast on Non
&#45;volatile Memory</title>
<ellipse fill="none" stroke="#000000" cx="70489.022" cy="-461.0336" rx="185.8263" ry="25.4118"/>
<text text-anchor="middle" x="70489.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Soft Updates Made Simple and Fast on Non</text>
<text text-anchor="middle" x="70489.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;volatile Memory</text>
</g>
<!-- 63&#45;&gt;Soft Updates Made Simple and Fast on Non
&#45;volatile Memory -->
<g id="edge254" class="edge">
<title>63&#45;&gt;Soft Updates Made Simple and Fast on Non
&#45;volatile Memory</title>
<path fill="none" stroke="#000000" d="M70674.4129,-958.3386C70646.6853,-883.9602 70539.4546,-596.3173 70502.0125,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="70505.2824,-494.6317 70498.5098,-486.4843 70498.7234,-497.0769 70505.2824,-494.6317"/>
</g>
<!-- Mingkai Dong and Haibo Chen, Institute o
f Parallel and Distributed Systems, Shan
ghai Jiao Tong University -->
<g id="node249" class="node">
<title>Mingkai Dong and Haibo Chen, Institute o
f Parallel and Distributed Systems, Shan
ghai Jiao Tong University</title>
<ellipse fill="none" stroke="#000000" cx="70874.022" cy="-461.0336" rx="180.9171" ry="35.2113"/>
<text text-anchor="middle" x="70874.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Mingkai Dong and Haibo Chen, Institute o</text>
<text text-anchor="middle" x="70874.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f Parallel and Distributed Systems, Shan</text>
<text text-anchor="middle" x="70874.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ghai Jiao Tong University</text>
</g>
<!-- 63&#45;&gt;Mingkai Dong and Haibo Chen, Institute o
f Parallel and Distributed Systems, Shan
ghai Jiao Tong University -->
<g id="edge255" class="edge">
<title>63&#45;&gt;Mingkai Dong and Haibo Chen, Institute o
f Parallel and Distributed Systems, Shan
ghai Jiao Tong University</title>
<path fill="none" stroke="#000000" d="M70687.6655,-958.3386C70714.6296,-886.383 70816.3893,-614.8303 70857.0677,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="70860.4631,-507.1905 70860.6948,-496.5982 70853.9082,-504.7342 70860.4631,-507.1905"/>
</g>
<!-- Fast, byte&#45;addressable NVM promises near
 cache latency and near memory bus throu
ghput for file system operations. Howeve
r, unanticipated cache line eviction may
 lead to disordered metadata update and 
thus existing NVM file systems (NVMFS) u
se synchronous cache flushes to ensure c
onsistency, which extends critical path 
latency.In this paper, we revisit soft u
pdates, an intriguing idea that eliminat
es most synchronous metadata updates thr
ough delayed writes and dependency track
ing, in the context of NVMFS. We show th
at on one hand byte&#45;addressability of NV
M significantly simplifies dependency tr
acking and enforcement by allowing bette
r directory organization and closely mat
ching the per&#45;pointer dependency trackin
g of soft updates. On the other hand, pe
r&#45;cache&#45;line failure atomicity of NVM ca
nnot ensure the correctness of soft upda
tes, which relies on block write atomici
ty; page cache, which is necessary for d
ual views in soft updates, becomes ineff
icient due to double writes and duplicat
ed metadata. To guarantee the correctnes
s and consistency without synchronous ca
che flushes and page cache, we propose p
ointer&#45;based dual views, which shares mo
st data structures but uses different po
inters in different views, to allow dela
yed persistency and eliminate file syste
m checking after a crash. In this way, o
ur system, namely SoupFS, significantly 
shortens the critical path latency by de
laying almost all synchronous cache flus
hes.We have implemented SoupFS as a POSI
X&#45;compliant file system for Linux and ev
aluated it against state&#45;of&#45;the&#45;art NVMF
S like PMFS and NOVA. Performance result
s show that SoupFS can have notably lowe
r latency and modestly higher throughput
 compared to existing NVMFS. -->
<g id="node250" class="node">
<title>Fast, byte&#45;addressable NVM promises near
 cache latency and near memory bus throu
ghput for file system operations. Howeve
r, unanticipated cache line eviction may
 lead to disordered metadata update and 
thus existing NVM file systems (NVMFS) u
se synchronous cache flushes to ensure c
onsistency, which extends critical path 
latency.In this paper, we revisit soft u
pdates, an intriguing idea that eliminat
es most synchronous metadata updates thr
ough delayed writes and dependency track
ing, in the context of NVMFS. We show th
at on one hand byte&#45;addressability of NV
M significantly simplifies dependency tr
acking and enforcement by allowing bette
r directory organization and closely mat
ching the per&#45;pointer dependency trackin
g of soft updates. On the other hand, pe
r&#45;cache&#45;line failure atomicity of NVM ca
nnot ensure the correctness of soft upda
tes, which relies on block write atomici
ty; page cache, which is necessary for d
ual views in soft updates, becomes ineff
icient due to double writes and duplicat
ed metadata. To guarantee the correctnes
s and consistency without synchronous ca
che flushes and page cache, we propose p
ointer&#45;based dual views, which shares mo
st data structures but uses different po
inters in different views, to allow dela
yed persistency and eliminate file syste
m checking after a crash. In this way, o
ur system, namely SoupFS, significantly 
shortens the critical path latency by de
laying almost all synchronous cache flus
hes.We have implemented SoupFS as a POSI
X&#45;compliant file system for Linux and ev
aluated it against state&#45;of&#45;the&#45;art NVMF
S like PMFS and NOVA. Performance result
s show that SoupFS can have notably lowe
r latency and modestly higher throughput
 compared to existing NVMFS.</title>
<ellipse fill="none" stroke="#000000" cx="71264.022" cy="-461.0336" rx="190.7328" ry="431.1703"/>
<text text-anchor="middle" x="71264.022" y="-750.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Fast, byte&#45;addressable NVM promises near</text>
<text text-anchor="middle" x="71264.022" y="-736.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> cache latency and near memory bus throu</text>
<text text-anchor="middle" x="71264.022" y="-722.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ghput for file system operations. Howeve</text>
<text text-anchor="middle" x="71264.022" y="-708.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r, unanticipated cache line eviction may</text>
<text text-anchor="middle" x="71264.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> lead to disordered metadata update and </text>
<text text-anchor="middle" x="71264.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">thus existing NVM file systems (NVMFS) u</text>
<text text-anchor="middle" x="71264.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">se synchronous cache flushes to ensure c</text>
<text text-anchor="middle" x="71264.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onsistency, which extends critical path </text>
<text text-anchor="middle" x="71264.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">latency.In this paper, we revisit soft u</text>
<text text-anchor="middle" x="71264.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pdates, an intriguing idea that eliminat</text>
<text text-anchor="middle" x="71264.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">es most synchronous metadata updates thr</text>
<text text-anchor="middle" x="71264.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ough delayed writes and dependency track</text>
<text text-anchor="middle" x="71264.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing, in the context of NVMFS. We show th</text>
<text text-anchor="middle" x="71264.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">at on one hand byte&#45;addressability of NV</text>
<text text-anchor="middle" x="71264.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">M significantly simplifies dependency tr</text>
<text text-anchor="middle" x="71264.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">acking and enforcement by allowing bette</text>
<text text-anchor="middle" x="71264.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r directory organization and closely mat</text>
<text text-anchor="middle" x="71264.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ching the per&#45;pointer dependency trackin</text>
<text text-anchor="middle" x="71264.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g of soft updates. On the other hand, pe</text>
<text text-anchor="middle" x="71264.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r&#45;cache&#45;line failure atomicity of NVM ca</text>
<text text-anchor="middle" x="71264.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nnot ensure the correctness of soft upda</text>
<text text-anchor="middle" x="71264.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tes, which relies on block write atomici</text>
<text text-anchor="middle" x="71264.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ty; page cache, which is necessary for d</text>
<text text-anchor="middle" x="71264.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ual views in soft updates, becomes ineff</text>
<text text-anchor="middle" x="71264.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">icient due to double writes and duplicat</text>
<text text-anchor="middle" x="71264.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed metadata. To guarantee the correctnes</text>
<text text-anchor="middle" x="71264.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s and consistency without synchronous ca</text>
<text text-anchor="middle" x="71264.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">che flushes and page cache, we propose p</text>
<text text-anchor="middle" x="71264.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ointer&#45;based dual views, which shares mo</text>
<text text-anchor="middle" x="71264.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">st data structures but uses different po</text>
<text text-anchor="middle" x="71264.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">inters in different views, to allow dela</text>
<text text-anchor="middle" x="71264.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">yed persistency and eliminate file syste</text>
<text text-anchor="middle" x="71264.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">m checking after a crash. In this way, o</text>
<text text-anchor="middle" x="71264.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ur system, namely SoupFS, significantly </text>
<text text-anchor="middle" x="71264.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">shortens the critical path latency by de</text>
<text text-anchor="middle" x="71264.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">laying almost all synchronous cache flus</text>
<text text-anchor="middle" x="71264.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hes.We have implemented SoupFS as a POSI</text>
<text text-anchor="middle" x="71264.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">X&#45;compliant file system for Linux and ev</text>
<text text-anchor="middle" x="71264.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000">aluated it against state&#45;of&#45;the&#45;art NVMF</text>
<text text-anchor="middle" x="71264.022" y="-204.8336" font-family="Times,serif" font-size="14.00" fill="#000000">S like PMFS and NOVA. Performance result</text>
<text text-anchor="middle" x="71264.022" y="-190.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s show that SoupFS can have notably lowe</text>
<text text-anchor="middle" x="71264.022" y="-176.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r latency and modestly higher throughput</text>
<text text-anchor="middle" x="71264.022" y="-162.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> compared to existing NVMFS.</text>
</g>
<!-- 63&#45;&gt;Fast, byte&#45;addressable NVM promises near
 cache latency and near memory bus throu
ghput for file system operations. Howeve
r, unanticipated cache line eviction may
 lead to disordered metadata update and 
thus existing NVM file systems (NVMFS) u
se synchronous cache flushes to ensure c
onsistency, which extends critical path 
latency.In this paper, we revisit soft u
pdates, an intriguing idea that eliminat
es most synchronous metadata updates thr
ough delayed writes and dependency track
ing, in the context of NVMFS. We show th
at on one hand byte&#45;addressability of NV
M significantly simplifies dependency tr
acking and enforcement by allowing bette
r directory organization and closely mat
ching the per&#45;pointer dependency trackin
g of soft updates. On the other hand, pe
r&#45;cache&#45;line failure atomicity of NVM ca
nnot ensure the correctness of soft upda
tes, which relies on block write atomici
ty; page cache, which is necessary for d
ual views in soft updates, becomes ineff
icient due to double writes and duplicat
ed metadata. To guarantee the correctnes
s and consistency without synchronous ca
che flushes and page cache, we propose p
ointer&#45;based dual views, which shares mo
st data structures but uses different po
inters in different views, to allow dela
yed persistency and eliminate file syste
m checking after a crash. In this way, o
ur system, namely SoupFS, significantly 
shortens the critical path latency by de
laying almost all synchronous cache flus
hes.We have implemented SoupFS as a POSI
X&#45;compliant file system for Linux and ev
aluated it against state&#45;of&#45;the&#45;art NVMF
S like PMFS and NOVA. Performance result
s show that SoupFS can have notably lowe
r latency and modestly higher throughput
 compared to existing NVMFS. -->
<g id="edge256" class="edge">
<title>63&#45;&gt;Fast, byte&#45;addressable NVM promises near
 cache latency and near memory bus throu
ghput for file system operations. Howeve
r, unanticipated cache line eviction may
 lead to disordered metadata update and 
thus existing NVM file systems (NVMFS) u
se synchronous cache flushes to ensure c
onsistency, which extends critical path 
latency.In this paper, we revisit soft u
pdates, an intriguing idea that eliminat
es most synchronous metadata updates thr
ough delayed writes and dependency track
ing, in the context of NVMFS. We show th
at on one hand byte&#45;addressability of NV
M significantly simplifies dependency tr
acking and enforcement by allowing bette
r directory organization and closely mat
ching the per&#45;pointer dependency trackin
g of soft updates. On the other hand, pe
r&#45;cache&#45;line failure atomicity of NVM ca
nnot ensure the correctness of soft upda
tes, which relies on block write atomici
ty; page cache, which is necessary for d
ual views in soft updates, becomes ineff
icient due to double writes and duplicat
ed metadata. To guarantee the correctnes
s and consistency without synchronous ca
che flushes and page cache, we propose p
ointer&#45;based dual views, which shares mo
st data structures but uses different po
inters in different views, to allow dela
yed persistency and eliminate file syste
m checking after a crash. In this way, o
ur system, namely SoupFS, significantly 
shortens the critical path latency by de
laying almost all synchronous cache flus
hes.We have implemented SoupFS as a POSI
X&#45;compliant file system for Linux and ev
aluated it against state&#45;of&#45;the&#45;art NVMF
S like PMFS and NOVA. Performance result
s show that SoupFS can have notably lowe
r latency and modestly higher throughput
 compared to existing NVMFS.</title>
<path fill="none" stroke="#000000" d="M70708.2426,-975.6007C70786.1365,-973.755 71007.9248,-964.7816 71064.022,-922.0672 71098.4028,-895.8885 71126.9665,-862.5821 71150.677,-825.886"/>
<polygon fill="#000000" stroke="#000000" points="71153.9096,-827.3217 71156.2865,-816.9969 71147.9898,-823.5859 71153.9096,-827.3217"/>
</g>
<!-- SmartMD: A High Performance Deduplicatio
n Engine with Mixed Pages -->
<g id="node252" class="node">
<title>SmartMD: A High Performance Deduplicatio
n Engine with Mixed Pages</title>
<ellipse fill="none" stroke="#000000" cx="71664.022" cy="-461.0336" rx="191.2576" ry="25.4118"/>
<text text-anchor="middle" x="71664.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">SmartMD: A High Performance Deduplicatio</text>
<text text-anchor="middle" x="71664.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n Engine with Mixed Pages</text>
</g>
<!-- 64&#45;&gt;SmartMD: A High Performance Deduplicatio
n Engine with Mixed Pages -->
<g id="edge258" class="edge">
<title>64&#45;&gt;SmartMD: A High Performance Deduplicatio
n Engine with Mixed Pages</title>
<path fill="none" stroke="#000000" d="M71859.1853,-958.636C71830.2059,-884.7479 71717.188,-596.5894 71677.7174,-495.9524"/>
<polygon fill="#000000" stroke="#000000" points="71680.9345,-494.5691 71674.0248,-486.5375 71674.4178,-497.125 71680.9345,-494.5691"/>
</g>
<!-- Fan Guo, University of Science and Techn
ology of China; Yongkun Li, University o
f Science and Technology of China; Colla
borative Innovation Center of High Perfo
rmance Computing, NUDT; Yinlong Xu, Univ
ersity of Science and Technology of Chin
a; Anhui Province Key Laboratory of High
 Performance Computing, USTC; Song Jiang
, University of Texas, Arlington; John C
. S. Lui, The Chinese University of Hong
 Kong -->
<g id="node253" class="node">
<title>Fan Guo, University of Science and Techn
ology of China; Yongkun Li, University o
f Science and Technology of China; Colla
borative Innovation Center of High Perfo
rmance Computing, NUDT; Yinlong Xu, Univ
ersity of Science and Technology of Chin
a; Anhui Province Key Laboratory of High
 Performance Computing, USTC; Song Jiang
, University of Texas, Arlington; John C
. S. Lui, The Chinese University of Hong
 Kong</title>
<ellipse fill="none" stroke="#000000" cx="72069.022" cy="-461.0336" rx="195.4292" ry="114.6026"/>
<text text-anchor="middle" x="72069.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Fan Guo, University of Science and Techn</text>
<text text-anchor="middle" x="72069.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ology of China; Yongkun Li, University o</text>
<text text-anchor="middle" x="72069.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">f Science and Technology of China; Colla</text>
<text text-anchor="middle" x="72069.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">borative Innovation Center of High Perfo</text>
<text text-anchor="middle" x="72069.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rmance Computing, NUDT; Yinlong Xu, Univ</text>
<text text-anchor="middle" x="72069.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ersity of Science and Technology of Chin</text>
<text text-anchor="middle" x="72069.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a; Anhui Province Key Laboratory of High</text>
<text text-anchor="middle" x="72069.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Performance Computing, USTC; Song Jiang</text>
<text text-anchor="middle" x="72069.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, University of Texas, Arlington; John C</text>
<text text-anchor="middle" x="72069.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. S. Lui, The Chinese University of Hong</text>
<text text-anchor="middle" x="72069.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Kong</text>
</g>
<!-- 64&#45;&gt;Fan Guo, University of Science and Techn
ology of China; Yongkun Li, University o
f Science and Technology of China; Colla
borative Innovation Center of High Perfo
rmance Computing, NUDT; Yinlong Xu, Univ
ersity of Science and Technology of Chin
a; Anhui Province Key Laboratory of High
 Performance Computing, USTC; Song Jiang
, University of Texas, Arlington; John C
. S. Lui, The Chinese University of Hong
 Kong -->
<g id="edge259" class="edge">
<title>64&#45;&gt;Fan Guo, University of Science and Techn
ology of China; Yongkun Li, University o
f Science and Technology of China; Colla
borative Innovation Center of High Perfo
rmance Computing, NUDT; Yinlong Xu, Univ
ersity of Science and Technology of Chin
a; Anhui Province Key Laboratory of High
 Performance Computing, USTC; Song Jiang
, University of Texas, Arlington; John C
. S. Lui, The Chinese University of Hong
 Kong</title>
<path fill="none" stroke="#000000" d="M71872.8925,-958.636C71895.7978,-900.5226 71970.9459,-709.8635 72021.2878,-582.1405"/>
<polygon fill="#000000" stroke="#000000" points="72024.6086,-583.2599 72025.0194,-572.673 72018.0963,-580.693 72024.6086,-583.2599"/>
</g>
<!-- In hypervisor&#45;based virtualization envir
onments, translation lookaside buffers (
TLBs) misses may induce two&#45;dimensional 
page table walks, which may incur a long
 access latency, and this issue becomes 
worse with ever increasing memory capaci
ty. To reduce the overhead of TLB misses
, large pages (e.g., 2M&#45;pages) are widel
y supported in modern hardware platforms
 to reduce the number of page table entr
ies. However, memory management with lar
ge pages can be inefficient in deduplica
tion, leading to low utilization of memo
ry, which is a precious resource for a v
ariety of applications.To simultaneously
 enjoy benefits of high performance by a
ccessing memory with large pages (e.g., 
2M&#45;pages) and high deduplication rate by
 managing memory with base pages (e.g., 
4K&#45;pages), we propose Smart Memory Dedup
lciation, or SmartMD in short, which is 
an adaptive and efficient management sch
eme for mixed&#45;page memory. Specifically,
 we propose two lightweight schemes to a
ccurately monitor pages’ access freque
ncy and repetition rate, and present a d
ynamic and adaptive conversion scheme to
 selectively split or reconstruct large 
pages. We implement a prototype system a
nd conduct extensive experiments with va
rious workloads. Experiment results show
 that SmartMD can simultaneously achieve
 high access performance similar to syst
ems using large pages, and achieves a de
duplication rate similar to that applyin
g aggressive deduplication scheme (i.e.,
 KSM) at the same time on base pages. -->
<g id="node254" class="node">
<title>In hypervisor&#45;based virtualization envir
onments, translation lookaside buffers (
TLBs) misses may induce two&#45;dimensional 
page table walks, which may incur a long
 access latency, and this issue becomes 
worse with ever increasing memory capaci
ty. To reduce the overhead of TLB misses
, large pages (e.g., 2M&#45;pages) are widel
y supported in modern hardware platforms
 to reduce the number of page table entr
ies. However, memory management with lar
ge pages can be inefficient in deduplica
tion, leading to low utilization of memo
ry, which is a precious resource for a v
ariety of applications.To simultaneously
 enjoy benefits of high performance by a
ccessing memory with large pages (e.g., 
2M&#45;pages) and high deduplication rate by
 managing memory with base pages (e.g., 
4K&#45;pages), we propose Smart Memory Dedup
lciation, or SmartMD in short, which is 
an adaptive and efficient management sch
eme for mixed&#45;page memory. Specifically,
 we propose two lightweight schemes to a
ccurately monitor pages’ access freque
ncy and repetition rate, and present a d
ynamic and adaptive conversion scheme to
 selectively split or reconstruct large 
pages. We implement a prototype system a
nd conduct extensive experiments with va
rious workloads. Experiment results show
 that SmartMD can simultaneously achieve
 high access performance similar to syst
ems using large pages, and achieves a de
duplication rate similar to that applyin
g aggressive deduplication scheme (i.e.,
 KSM) at the same time on base pages.</title>
<ellipse fill="none" stroke="#000000" cx="72477.022" cy="-461.0336" rx="194.3218" ry="371.8763"/>
<text text-anchor="middle" x="72477.022" y="-708.8336" font-family="Times,serif" font-size="14.00" fill="#000000">In hypervisor&#45;based virtualization envir</text>
<text text-anchor="middle" x="72477.022" y="-694.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onments, translation lookaside buffers (</text>
<text text-anchor="middle" x="72477.022" y="-680.8336" font-family="Times,serif" font-size="14.00" fill="#000000">TLBs) misses may induce two&#45;dimensional </text>
<text text-anchor="middle" x="72477.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">page table walks, which may incur a long</text>
<text text-anchor="middle" x="72477.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> access latency, and this issue becomes </text>
<text text-anchor="middle" x="72477.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">worse with ever increasing memory capaci</text>
<text text-anchor="middle" x="72477.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ty. To reduce the overhead of TLB misses</text>
<text text-anchor="middle" x="72477.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, large pages (e.g., 2M&#45;pages) are widel</text>
<text text-anchor="middle" x="72477.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y supported in modern hardware platforms</text>
<text text-anchor="middle" x="72477.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> to reduce the number of page table entr</text>
<text text-anchor="middle" x="72477.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ies. However, memory management with lar</text>
<text text-anchor="middle" x="72477.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ge pages can be inefficient in deduplica</text>
<text text-anchor="middle" x="72477.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tion, leading to low utilization of memo</text>
<text text-anchor="middle" x="72477.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ry, which is a precious resource for a v</text>
<text text-anchor="middle" x="72477.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ariety of applications.To simultaneously</text>
<text text-anchor="middle" x="72477.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> enjoy benefits of high performance by a</text>
<text text-anchor="middle" x="72477.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ccessing memory with large pages (e.g., </text>
<text text-anchor="middle" x="72477.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">2M&#45;pages) and high deduplication rate by</text>
<text text-anchor="middle" x="72477.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> managing memory with base pages (e.g., </text>
<text text-anchor="middle" x="72477.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">4K&#45;pages), we propose Smart Memory Dedup</text>
<text text-anchor="middle" x="72477.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">lciation, or SmartMD in short, which is </text>
<text text-anchor="middle" x="72477.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">an adaptive and efficient management sch</text>
<text text-anchor="middle" x="72477.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eme for mixed&#45;page memory. Specifically,</text>
<text text-anchor="middle" x="72477.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> we propose two lightweight schemes to a</text>
<text text-anchor="middle" x="72477.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ccurately monitor pages’ access freque</text>
<text text-anchor="middle" x="72477.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ncy and repetition rate, and present a d</text>
<text text-anchor="middle" x="72477.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ynamic and adaptive conversion scheme to</text>
<text text-anchor="middle" x="72477.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> selectively split or reconstruct large </text>
<text text-anchor="middle" x="72477.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">pages. We implement a prototype system a</text>
<text text-anchor="middle" x="72477.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nd conduct extensive experiments with va</text>
<text text-anchor="middle" x="72477.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rious workloads. Experiment results show</text>
<text text-anchor="middle" x="72477.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> that SmartMD can simultaneously achieve</text>
<text text-anchor="middle" x="72477.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> high access performance similar to syst</text>
<text text-anchor="middle" x="72477.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ems using large pages, and achieves a de</text>
<text text-anchor="middle" x="72477.022" y="-232.8336" font-family="Times,serif" font-size="14.00" fill="#000000">duplication rate similar to that applyin</text>
<text text-anchor="middle" x="72477.022" y="-218.8336" font-family="Times,serif" font-size="14.00" fill="#000000">g aggressive deduplication scheme (i.e.,</text>
<text text-anchor="middle" x="72477.022" y="-204.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> KSM) at the same time on base pages.</text>
</g>
<!-- 64&#45;&gt;In hypervisor&#45;based virtualization envir
onments, translation lookaside buffers (
TLBs) misses may induce two&#45;dimensional 
page table walks, which may incur a long
 access latency, and this issue becomes 
worse with ever increasing memory capaci
ty. To reduce the overhead of TLB misses
, large pages (e.g., 2M&#45;pages) are widel
y supported in modern hardware platforms
 to reduce the number of page table entr
ies. However, memory management with lar
ge pages can be inefficient in deduplica
tion, leading to low utilization of memo
ry, which is a precious resource for a v
ariety of applications.To simultaneously
 enjoy benefits of high performance by a
ccessing memory with large pages (e.g., 
2M&#45;pages) and high deduplication rate by
 managing memory with base pages (e.g., 
4K&#45;pages), we propose Smart Memory Dedup
lciation, or SmartMD in short, which is 
an adaptive and efficient management sch
eme for mixed&#45;page memory. Specifically,
 we propose two lightweight schemes to a
ccurately monitor pages’ access freque
ncy and repetition rate, and present a d
ynamic and adaptive conversion scheme to
 selectively split or reconstruct large 
pages. We implement a prototype system a
nd conduct extensive experiments with va
rious workloads. Experiment results show
 that SmartMD can simultaneously achieve
 high access performance similar to syst
ems using large pages, and achieves a de
duplication rate similar to that applyin
g aggressive deduplication scheme (i.e.,
 KSM) at the same time on base pages. -->
<g id="edge260" class="edge">
<title>64&#45;&gt;In hypervisor&#45;based virtualization envir
onments, translation lookaside buffers (
TLBs) misses may induce two&#45;dimensional 
page table walks, which may incur a long
 access latency, and this issue becomes 
worse with ever increasing memory capaci
ty. To reduce the overhead of TLB misses
, large pages (e.g., 2M&#45;pages) are widel
y supported in modern hardware platforms
 to reduce the number of page table entr
ies. However, memory management with lar
ge pages can be inefficient in deduplica
tion, leading to low utilization of memo
ry, which is a precious resource for a v
ariety of applications.To simultaneously
 enjoy benefits of high performance by a
ccessing memory with large pages (e.g., 
2M&#45;pages) and high deduplication rate by
 managing memory with base pages (e.g., 
4K&#45;pages), we propose Smart Memory Dedup
lciation, or SmartMD in short, which is 
an adaptive and efficient management sch
eme for mixed&#45;page memory. Specifically,
 we propose two lightweight schemes to a
ccurately monitor pages’ access freque
ncy and repetition rate, and present a d
ynamic and adaptive conversion scheme to
 selectively split or reconstruct large 
pages. We implement a prototype system a
nd conduct extensive experiments with va
rious workloads. Experiment results show
 that SmartMD can simultaneously achieve
 high access performance similar to syst
ems using large pages, and achieves a de
duplication rate similar to that applyin
g aggressive deduplication scheme (i.e.,
 KSM) at the same time on base pages.</title>
<path fill="none" stroke="#000000" d="M71893.1295,-974.0066C71979.2166,-967.253 72242.5401,-944.9076 72273.022,-922.0672 72316.9631,-889.1418 72351.6187,-844.6679 72378.9012,-796.2827"/>
<polygon fill="#000000" stroke="#000000" points="72381.9661,-797.9726 72383.7361,-787.5267 72375.8382,-794.5889 72381.9661,-797.9726"/>
</g>
<!-- Elastic Memory Management for Cloud Data
 Analytics -->
<g id="node256" class="node">
<title>Elastic Memory Management for Cloud Data
 Analytics</title>
<ellipse fill="none" stroke="#000000" cx="72880.022" cy="-461.0336" rx="190.6583" ry="25.4118"/>
<text text-anchor="middle" x="72880.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Elastic Memory Management for Cloud Data</text>
<text text-anchor="middle" x="72880.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Analytics</text>
</g>
<!-- 65&#45;&gt;Elastic Memory Management for Cloud Data
 Analytics -->
<g id="edge262" class="edge">
<title>65&#45;&gt;Elastic Memory Management for Cloud Data
 Analytics</title>
<path fill="none" stroke="#000000" d="M73068.3096,-958.3386C73040.1488,-883.9602 72931.2426,-596.3173 72893.2155,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="72896.4722,-494.5971 72889.658,-486.4843 72889.9257,-497.0757 72896.4722,-494.5971"/>
</g>
<!-- Jingjing Wang and Magdalena Balazinska, 
University of Washington -->
<g id="node257" class="node">
<title>Jingjing Wang and Magdalena Balazinska, 
University of Washington</title>
<ellipse fill="none" stroke="#000000" cx="73271.022" cy="-461.0336" rx="182.3851" ry="25.4118"/>
<text text-anchor="middle" x="73271.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Jingjing Wang and Magdalena Balazinska, </text>
<text text-anchor="middle" x="73271.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">University of Washington</text>
</g>
<!-- 65&#45;&gt;Jingjing Wang and Magdalena Balazinska, 
University of Washington -->
<g id="edge263" class="edge">
<title>65&#45;&gt;Jingjing Wang and Magdalena Balazinska, 
University of Washington</title>
<path fill="none" stroke="#000000" d="M73081.7688,-958.3386C73110.074,-883.9602 73219.5388,-596.3173 73257.7608,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="73261.0509,-497.0752 73261.3366,-486.4843 73254.5086,-494.5855 73261.0509,-497.0752"/>
</g>
<!-- We develop an approach for the automatic
 and elastic management of memory in sha
red clusters executing data analytics ap
plications. Our approach, called Elastic
Mem, comprises a technique for dynamical
ly changing memory limits in Java virtua
l machines, models to predict memory usa
ge and garbage collection cost, and a sc
heduling algorithm that dynamically real
locates memory between applications. Exp
eriments with our prototype implementati
on show that our approach outperforms st
atic memory allocation leading to fewer 
query failures when memory is scarce, up
 to 80% lower garbage collection overhea
ds, and up to 30% lower query times when
 memory is abundant. -->
<g id="node258" class="node">
<title>We develop an approach for the automatic
 and elastic management of memory in sha
red clusters executing data analytics ap
plications. Our approach, called Elastic
Mem, comprises a technique for dynamical
ly changing memory limits in Java virtua
l machines, models to predict memory usa
ge and garbage collection cost, and a sc
heduling algorithm that dynamically real
locates memory between applications. Exp
eriments with our prototype implementati
on show that our approach outperforms st
atic memory allocation leading to fewer 
query failures when memory is scarce, up
 to 80% lower garbage collection overhea
ds, and up to 30% lower query times when
 memory is abundant.</title>
<ellipse fill="none" stroke="#000000" cx="73654.022" cy="-461.0336" rx="182.6972" ry="173.8966"/>
<text text-anchor="middle" x="73654.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">We develop an approach for the automatic</text>
<text text-anchor="middle" x="73654.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> and elastic management of memory in sha</text>
<text text-anchor="middle" x="73654.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">red clusters executing data analytics ap</text>
<text text-anchor="middle" x="73654.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">plications. Our approach, called Elastic</text>
<text text-anchor="middle" x="73654.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Mem, comprises a technique for dynamical</text>
<text text-anchor="middle" x="73654.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ly changing memory limits in Java virtua</text>
<text text-anchor="middle" x="73654.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">l machines, models to predict memory usa</text>
<text text-anchor="middle" x="73654.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ge and garbage collection cost, and a sc</text>
<text text-anchor="middle" x="73654.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">heduling algorithm that dynamically real</text>
<text text-anchor="middle" x="73654.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">locates memory between applications. Exp</text>
<text text-anchor="middle" x="73654.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">eriments with our prototype implementati</text>
<text text-anchor="middle" x="73654.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on show that our approach outperforms st</text>
<text text-anchor="middle" x="73654.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">atic memory allocation leading to fewer </text>
<text text-anchor="middle" x="73654.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">query failures when memory is scarce, up</text>
<text text-anchor="middle" x="73654.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> to 80% lower garbage collection overhea</text>
<text text-anchor="middle" x="73654.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ds, and up to 30% lower query times when</text>
<text text-anchor="middle" x="73654.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> memory is abundant.</text>
</g>
<!-- 65&#45;&gt;We develop an approach for the automatic
 and elastic management of memory in sha
red clusters executing data analytics ap
plications. Our approach, called Elastic
Mem, comprises a technique for dynamical
ly changing memory limits in Java virtua
l machines, models to predict memory usa
ge and garbage collection cost, and a sc
heduling algorithm that dynamically real
locates memory between applications. Exp
eriments with our prototype implementati
on show that our approach outperforms st
atic memory allocation leading to fewer 
query failures when memory is scarce, up
 to 80% lower garbage collection overhea
ds, and up to 30% lower query times when
 memory is abundant. -->
<g id="edge264" class="edge">
<title>65&#45;&gt;We develop an approach for the automatic
 and elastic management of memory in sha
red clusters executing data analytics ap
plications. Our approach, called Elastic
Mem, comprises a technique for dynamical
ly changing memory limits in Java virtua
l machines, models to predict memory usa
ge and garbage collection cost, and a sc
heduling algorithm that dynamically real
locates memory between applications. Exp
eriments with our prototype implementati
on show that our approach outperforms st
atic memory allocation leading to fewer 
query failures when memory is scarce, up
 to 80% lower garbage collection overhea
ds, and up to 30% lower query times when
 memory is abundant.</title>
<path fill="none" stroke="#000000" d="M73102.2751,-975.6852C73180.8075,-974.067 73405.5706,-965.6458 73462.022,-922.0672 73549.2827,-854.7048 73597.2262,-740.5359 73623.3825,-642.6683"/>
<polygon fill="#000000" stroke="#000000" points="73626.7806,-643.5081 73625.9237,-632.9479 73620.0082,-641.7375 73626.7806,-643.5081"/>
</g>
<!-- Improving File System Performance of Mob
ile Storage Systems Using a Decoupled De
fragmenter -->
<g id="node260" class="node">
<title>Improving File System Performance of Mob
ile Storage Systems Using a Decoupled De
fragmenter</title>
<ellipse fill="none" stroke="#000000" cx="74042.022" cy="-461.0336" rx="187.6036" ry="35.2113"/>
<text text-anchor="middle" x="74042.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Improving File System Performance of Mob</text>
<text text-anchor="middle" x="74042.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ile Storage Systems Using a Decoupled De</text>
<text text-anchor="middle" x="74042.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">fragmenter</text>
</g>
<!-- 66&#45;&gt;Improving File System Performance of Mob
ile Storage Systems Using a Decoupled De
fragmenter -->
<g id="edge266" class="edge">
<title>66&#45;&gt;Improving File System Performance of Mob
ile Storage Systems Using a Decoupled De
fragmenter</title>
<path fill="none" stroke="#000000" d="M74233.2064,-958.3386C74205.5158,-886.3106 74100.9374,-614.2832 74059.2896,-505.9498"/>
<polygon fill="#000000" stroke="#000000" points="74062.5498,-504.6763 74055.6945,-496.5982 74056.016,-507.1882 74062.5498,-504.6763"/>
</g>
<!-- Sangwook Shane Hahn, Seoul National Univ
ersity; Sungjin Lee, Daegu Gyeongbuk Ins
titute of Science and Technology; Cheng 
Ji, City University of Hong Kong; Li&#45;Pin
 Chang, National Chiao&#45;Tung University; 
Inhyuk Yee, Seoul National University; L
iang Shi, Chongqing University; Chun Jas
on Xue, City University of Hong Kong; Ji
hong Kim, Seoul National University -->
<g id="node261" class="node">
<title>Sangwook Shane Hahn, Seoul National Univ
ersity; Sungjin Lee, Daegu Gyeongbuk Ins
titute of Science and Technology; Cheng 
Ji, City University of Hong Kong; Li&#45;Pin
 Chang, National Chiao&#45;Tung University; 
Inhyuk Yee, Seoul National University; L
iang Shi, Chongqing University; Chun Jas
on Xue, City University of Hong Kong; Ji
hong Kim, Seoul National University</title>
<ellipse fill="none" stroke="#000000" cx="74438.022" cy="-461.0336" rx="190.063" ry="94.5053"/>
<text text-anchor="middle" x="74438.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Sangwook Shane Hahn, Seoul National Univ</text>
<text text-anchor="middle" x="74438.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ersity; Sungjin Lee, Daegu Gyeongbuk Ins</text>
<text text-anchor="middle" x="74438.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">titute of Science and Technology; Cheng </text>
<text text-anchor="middle" x="74438.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Ji, City University of Hong Kong; Li&#45;Pin</text>
<text text-anchor="middle" x="74438.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Chang, National Chiao&#45;Tung University; </text>
<text text-anchor="middle" x="74438.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Inhyuk Yee, Seoul National University; L</text>
<text text-anchor="middle" x="74438.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iang Shi, Chongqing University; Chun Jas</text>
<text text-anchor="middle" x="74438.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on Xue, City University of Hong Kong; Ji</text>
<text text-anchor="middle" x="74438.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hong Kim, Seoul National University</text>
</g>
<!-- 66&#45;&gt;Sangwook Shane Hahn, Seoul National Univ
ersity; Sungjin Lee, Daegu Gyeongbuk Ins
titute of Science and Technology; Cheng 
Ji, City University of Hong Kong; Li&#45;Pin
 Chang, National Chiao&#45;Tung University; 
Inhyuk Yee, Seoul National University; L
iang Shi, Chongqing University; Chun Jas
on Xue, City University of Hong Kong; Ji
hong Kim, Seoul National University -->
<g id="edge267" class="edge">
<title>66&#45;&gt;Sangwook Shane Hahn, Seoul National Univ
ersity; Sungjin Lee, Daegu Gyeongbuk Ins
titute of Science and Technology; Cheng 
Ji, City University of Hong Kong; Li&#45;Pin
 Chang, National Chiao&#45;Tung University; 
Inhyuk Yee, Seoul National University; L
iang Shi, Chongqing University; Chun Jas
on Xue, City University of Hong Kong; Ji
hong Kim, Seoul National University</title>
<path fill="none" stroke="#000000" d="M74246.8376,-958.3386C74270.4382,-896.9492 74349.8913,-690.2775 74398.6321,-563.4939"/>
<polygon fill="#000000" stroke="#000000" points="74401.9107,-564.7192 74402.2322,-554.1293 74395.3769,-562.2073 74401.9107,-564.7192"/>
</g>
<!-- In this paper, we comprehensively invest
igate the file fragmentation problem on 
mobile flash storage. From our evaluatio
n study with real Android smartphones, w
e observed two interesting points on fil
e fragmentation on flash storage. First,
 defragmentation on mobile flash storage
 is essential for high I/O performance o
n Android smartphones because file fragm
entation, which is a recurring problem (
even after defragmentation), can signifi
cantly degrade I/O performance. Second, 
file fragmentation affects flash storage
 quite differently than HDDs. When files
 are fragmented on flash storage, the lo
gical fragmentation and the physical fra
gmentation are decoupled and a performan
ce degradation mostly comes from logical
 fragmentation. Motivated by our observa
tions, we propose a novel defragger, jan
us defragger (janusd), which supports tw
o defraggers, janusdL for a logical defr
agger and janusdP for a physical defragg
er. JanusdL, which takes advantage of fl
ash storage’s internal logical to phys
ical mapping table, supports logical def
ragmentation without data copies. Janusd
L is very effective for most fragmented 
files while not sacrificing the flash li
fetime. JanusdP, which is useful for phy
sically fragmented files but requires da
ta copies, is invoked only when absolute
ly necessary. By adaptively selecting ja
nusdL and janusdP, janusd achieves the e
ffect of full file defragmentation witho
ut reducing the flash lifetime. Our expe
rimental results show that janusd can ac
hieve at least the same level of I/O per
formance improvement as e4defrag without
 affecting the flash lifetime, thus maki
ng janusd an attractive defragmentation 
solution for mobile flash storage. -->
<g id="node262" class="node">
<title>In this paper, we comprehensively invest
igate the file fragmentation problem on 
mobile flash storage. From our evaluatio
n study with real Android smartphones, w
e observed two interesting points on fil
e fragmentation on flash storage. First,
 defragmentation on mobile flash storage
 is essential for high I/O performance o
n Android smartphones because file fragm
entation, which is a recurring problem (
even after defragmentation), can signifi
cantly degrade I/O performance. Second, 
file fragmentation affects flash storage
 quite differently than HDDs. When files
 are fragmented on flash storage, the lo
gical fragmentation and the physical fra
gmentation are decoupled and a performan
ce degradation mostly comes from logical
 fragmentation. Motivated by our observa
tions, we propose a novel defragger, jan
us defragger (janusd), which supports tw
o defraggers, janusdL for a logical defr
agger and janusdP for a physical defragg
er. JanusdL, which takes advantage of fl
ash storage’s internal logical to phys
ical mapping table, supports logical def
ragmentation without data copies. Janusd
L is very effective for most fragmented 
files while not sacrificing the flash li
fetime. JanusdP, which is useful for phy
sically fragmented files but requires da
ta copies, is invoked only when absolute
ly necessary. By adaptively selecting ja
nusdL and janusdP, janusd achieves the e
ffect of full file defragmentation witho
ut reducing the flash lifetime. Our expe
rimental results show that janusd can ac
hieve at least the same level of I/O per
formance improvement as e4defrag without
 affecting the flash lifetime, thus maki
ng janusd an attractive defragmentation 
solution for mobile flash storage.</title>
<ellipse fill="none" stroke="#000000" cx="74831.022" cy="-461.0336" rx="184.4841" ry="421.3713"/>
<text text-anchor="middle" x="74831.022" y="-743.8336" font-family="Times,serif" font-size="14.00" fill="#000000">In this paper, we comprehensively invest</text>
<text text-anchor="middle" x="74831.022" y="-729.8336" font-family="Times,serif" font-size="14.00" fill="#000000">igate the file fragmentation problem on </text>
<text text-anchor="middle" x="74831.022" y="-715.8336" font-family="Times,serif" font-size="14.00" fill="#000000">mobile flash storage. From our evaluatio</text>
<text text-anchor="middle" x="74831.022" y="-701.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n study with real Android smartphones, w</text>
<text text-anchor="middle" x="74831.022" y="-687.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e observed two interesting points on fil</text>
<text text-anchor="middle" x="74831.022" y="-673.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e fragmentation on flash storage. First,</text>
<text text-anchor="middle" x="74831.022" y="-659.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> defragmentation on mobile flash storage</text>
<text text-anchor="middle" x="74831.022" y="-645.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> is essential for high I/O performance o</text>
<text text-anchor="middle" x="74831.022" y="-631.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n Android smartphones because file fragm</text>
<text text-anchor="middle" x="74831.022" y="-617.8336" font-family="Times,serif" font-size="14.00" fill="#000000">entation, which is a recurring problem (</text>
<text text-anchor="middle" x="74831.022" y="-603.8336" font-family="Times,serif" font-size="14.00" fill="#000000">even after defragmentation), can signifi</text>
<text text-anchor="middle" x="74831.022" y="-589.8336" font-family="Times,serif" font-size="14.00" fill="#000000">cantly degrade I/O performance. Second, </text>
<text text-anchor="middle" x="74831.022" y="-575.8336" font-family="Times,serif" font-size="14.00" fill="#000000">file fragmentation affects flash storage</text>
<text text-anchor="middle" x="74831.022" y="-561.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> quite differently than HDDs. When files</text>
<text text-anchor="middle" x="74831.022" y="-547.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> are fragmented on flash storage, the lo</text>
<text text-anchor="middle" x="74831.022" y="-533.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gical fragmentation and the physical fra</text>
<text text-anchor="middle" x="74831.022" y="-519.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gmentation are decoupled and a performan</text>
<text text-anchor="middle" x="74831.022" y="-505.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ce degradation mostly comes from logical</text>
<text text-anchor="middle" x="74831.022" y="-491.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> fragmentation. Motivated by our observa</text>
<text text-anchor="middle" x="74831.022" y="-477.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tions, we propose a novel defragger, jan</text>
<text text-anchor="middle" x="74831.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">us defragger (janusd), which supports tw</text>
<text text-anchor="middle" x="74831.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o defraggers, janusdL for a logical defr</text>
<text text-anchor="middle" x="74831.022" y="-435.8336" font-family="Times,serif" font-size="14.00" fill="#000000">agger and janusdP for a physical defragg</text>
<text text-anchor="middle" x="74831.022" y="-421.8336" font-family="Times,serif" font-size="14.00" fill="#000000">er. JanusdL, which takes advantage of fl</text>
<text text-anchor="middle" x="74831.022" y="-407.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ash storage’s internal logical to phys</text>
<text text-anchor="middle" x="74831.022" y="-393.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ical mapping table, supports logical def</text>
<text text-anchor="middle" x="74831.022" y="-379.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ragmentation without data copies. Janusd</text>
<text text-anchor="middle" x="74831.022" y="-365.8336" font-family="Times,serif" font-size="14.00" fill="#000000">L is very effective for most fragmented </text>
<text text-anchor="middle" x="74831.022" y="-351.8336" font-family="Times,serif" font-size="14.00" fill="#000000">files while not sacrificing the flash li</text>
<text text-anchor="middle" x="74831.022" y="-337.8336" font-family="Times,serif" font-size="14.00" fill="#000000">fetime. JanusdP, which is useful for phy</text>
<text text-anchor="middle" x="74831.022" y="-323.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sically fragmented files but requires da</text>
<text text-anchor="middle" x="74831.022" y="-309.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ta copies, is invoked only when absolute</text>
<text text-anchor="middle" x="74831.022" y="-295.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ly necessary. By adaptively selecting ja</text>
<text text-anchor="middle" x="74831.022" y="-281.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nusdL and janusdP, janusd achieves the e</text>
<text text-anchor="middle" x="74831.022" y="-267.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ffect of full file defragmentation witho</text>
<text text-anchor="middle" x="74831.022" y="-253.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ut reducing the flash lifetime. Our expe</text>
<text text-anchor="middle" x="74831.022" y="-239.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rimental results show that janusd can ac</text>
<text text-anchor="middle" x="74831.022" y="-225.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hieve at least the same level of I/O per</text>
<text text-anchor="middle" x="74831.022" y="-211.8336" font-family="Times,serif" font-size="14.00" fill="#000000">formance improvement as e4defrag without</text>
<text text-anchor="middle" x="74831.022" y="-197.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> affecting the flash lifetime, thus maki</text>
<text text-anchor="middle" x="74831.022" y="-183.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng janusd an attractive defragmentation </text>
<text text-anchor="middle" x="74831.022" y="-169.8336" font-family="Times,serif" font-size="14.00" fill="#000000">solution for mobile flash storage.</text>
</g>
<!-- 66&#45;&gt;In this paper, we comprehensively invest
igate the file fragmentation problem on 
mobile flash storage. From our evaluatio
n study with real Android smartphones, w
e observed two interesting points on fil
e fragmentation on flash storage. First,
 defragmentation on mobile flash storage
 is essential for high I/O performance o
n Android smartphones because file fragm
entation, which is a recurring problem (
even after defragmentation), can signifi
cantly degrade I/O performance. Second, 
file fragmentation affects flash storage
 quite differently than HDDs. When files
 are fragmented on flash storage, the lo
gical fragmentation and the physical fra
gmentation are decoupled and a performan
ce degradation mostly comes from logical
 fragmentation. Motivated by our observa
tions, we propose a novel defragger, jan
us defragger (janusd), which supports tw
o defraggers, janusdL for a logical defr
agger and janusdP for a physical defragg
er. JanusdL, which takes advantage of fl
ash storage’s internal logical to phys
ical mapping table, supports logical def
ragmentation without data copies. Janusd
L is very effective for most fragmented 
files while not sacrificing the flash li
fetime. JanusdP, which is useful for phy
sically fragmented files but requires da
ta copies, is invoked only when absolute
ly necessary. By adaptively selecting ja
nusdL and janusdP, janusd achieves the e
ffect of full file defragmentation witho
ut reducing the flash lifetime. Our expe
rimental results show that janusd can ac
hieve at least the same level of I/O per
formance improvement as e4defrag without
 affecting the flash lifetime, thus maki
ng janusd an attractive defragmentation 
solution for mobile flash storage. -->
<g id="edge268" class="edge">
<title>66&#45;&gt;In this paper, we comprehensively invest
igate the file fragmentation problem on 
mobile flash storage. From our evaluatio
n study with real Android smartphones, w
e observed two interesting points on fil
e fragmentation on flash storage. First,
 defragmentation on mobile flash storage
 is essential for high I/O performance o
n Android smartphones because file fragm
entation, which is a recurring problem (
even after defragmentation), can signifi
cantly degrade I/O performance. Second, 
file fragmentation affects flash storage
 quite differently than HDDs. When files
 are fragmented on flash storage, the lo
gical fragmentation and the physical fra
gmentation are decoupled and a performan
ce degradation mostly comes from logical
 fragmentation. Motivated by our observa
tions, we propose a novel defragger, jan
us defragger (janusd), which supports tw
o defraggers, janusdL for a logical defr
agger and janusdP for a physical defragg
er. JanusdL, which takes advantage of fl
ash storage’s internal logical to phys
ical mapping table, supports logical def
ragmentation without data copies. Janusd
L is very effective for most fragmented 
files while not sacrificing the flash li
fetime. JanusdP, which is useful for phy
sically fragmented files but requires da
ta copies, is invoked only when absolute
ly necessary. By adaptively selecting ja
nusdL and janusdP, janusd achieves the e
ffect of full file defragmentation witho
ut reducing the flash lifetime. Our expe
rimental results show that janusd can ac
hieve at least the same level of I/O per
formance improvement as e4defrag without
 affecting the flash lifetime, thus maki
ng janusd an attractive defragmentation 
solution for mobile flash storage.</title>
<path fill="none" stroke="#000000" d="M74267.0747,-973.9396C74351.7121,-967.0712 74607.5871,-944.6228 74637.022,-922.0672 74672.1867,-895.121 74701.0405,-860.6052 74724.702,-822.607"/>
<polygon fill="#000000" stroke="#000000" points="74727.775,-824.2899 74729.982,-813.9275 74721.7946,-820.6519 74727.775,-824.2899"/>
</g>
<!-- Octopus: an RDMA&#45;enabled Distributed Per
sistent Memory File System -->
<g id="node264" class="node">
<title>Octopus: an RDMA&#45;enabled Distributed Per
sistent Memory File System</title>
<ellipse fill="none" stroke="#000000" cx="75221.022" cy="-461.0336" rx="187.6451" ry="25.4118"/>
<text text-anchor="middle" x="75221.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Octopus: an RDMA&#45;enabled Distributed Per</text>
<text text-anchor="middle" x="75221.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">sistent Memory File System</text>
</g>
<!-- 67&#45;&gt;Octopus: an RDMA&#45;enabled Distributed Per
sistent Memory File System -->
<g id="edge270" class="edge">
<title>67&#45;&gt;Octopus: an RDMA&#45;enabled Distributed Per
sistent Memory File System</title>
<path fill="none" stroke="#000000" d="M75410.2752,-958.3386C75381.97,-883.9602 75272.5052,-596.3173 75234.2832,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="75237.5354,-494.5855 75230.7074,-486.4843 75230.9931,-497.0752 75237.5354,-494.5855"/>
</g>
<!-- Youyou Lu, Jiwu Shu, and Youmin Chen, Ts
inghua University; Tao Li, University of
 Florida -->
<g id="node265" class="node">
<title>Youyou Lu, Jiwu Shu, and Youmin Chen, Ts
inghua University; Tao Li, University of
 Florida</title>
<ellipse fill="none" stroke="#000000" cx="75614.022" cy="-461.0336" rx="187.3039" ry="35.2113"/>
<text text-anchor="middle" x="75614.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Youyou Lu, Jiwu Shu, and Youmin Chen, Ts</text>
<text text-anchor="middle" x="75614.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">inghua University; Tao Li, University of</text>
<text text-anchor="middle" x="75614.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Florida</text>
</g>
<!-- 67&#45;&gt;Youyou Lu, Jiwu Shu, and Youmin Chen, Ts
inghua University; Tao Li, University of
 Florida -->
<g id="edge271" class="edge">
<title>67&#45;&gt;Youyou Lu, Jiwu Shu, and Youmin Chen, Ts
inghua University; Tao Li, University of
 Florida</title>
<path fill="none" stroke="#000000" d="M75423.8032,-958.3386C75451.3539,-886.3106 75555.4041,-614.2832 75596.8416,-505.9498"/>
<polygon fill="#000000" stroke="#000000" points="75600.1149,-507.1887 75600.4185,-496.5982 75593.5769,-504.6879 75600.1149,-507.1887"/>
</g>
<!-- Non&#45;volatile memory (NVM) and remote dir
ect memory access (RDMA) provide extreme
ly high performance in storage and netwo
rk hardware. However, existing distribut
ed file systems strictly isolate file sy
stem and network layers, and the heavy l
ayered software designs leave high&#45;speed
 hardware under&#45;exploited. In this paper
, we propose an RDMA&#45;enabled distributed
 persistent memory file system, Octopus,
 to redesign file system internal mechan
isms by closely coupling NVM and RDMA fe
atures. For data operations, Octopus dir
ectly accesses a shared persistent memor
y pool to reduce memory copying overhead
, and actively fetches and pushes data a
ll in clients to re&#45;balance the load bet
ween the server and network. For metadat
a operations, Octopus introduces self&#45;id
entified RPC for immediate notification 
between file systems and networking, and
 an efficient distributed transaction me
chanism for consistency. Evaluations sho
w that Octopus achieves nearly the raw b
andwidth for large I/Os and orders of ma
gnitude better performance than existing
 distributed file systems. -->
<g id="node266" class="node">
<title>Non&#45;volatile memory (NVM) and remote dir
ect memory access (RDMA) provide extreme
ly high performance in storage and netwo
rk hardware. However, existing distribut
ed file systems strictly isolate file sy
stem and network layers, and the heavy l
ayered software designs leave high&#45;speed
 hardware under&#45;exploited. In this paper
, we propose an RDMA&#45;enabled distributed
 persistent memory file system, Octopus,
 to redesign file system internal mechan
isms by closely coupling NVM and RDMA fe
atures. For data operations, Octopus dir
ectly accesses a shared persistent memor
y pool to reduce memory copying overhead
, and actively fetches and pushes data a
ll in clients to re&#45;balance the load bet
ween the server and network. For metadat
a operations, Octopus introduces self&#45;id
entified RPC for immediate notification 
between file systems and networking, and
 an efficient distributed transaction me
chanism for consistency. Evaluations sho
w that Octopus achieves nearly the raw b
andwidth for large I/Os and orders of ma
gnitude better performance than existing
 distributed file systems.</title>
<ellipse fill="none" stroke="#000000" cx="76013.022" cy="-461.0336" rx="193.746" ry="272.8864"/>
<text text-anchor="middle" x="76013.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Non&#45;volatile memory (NVM) and remote dir</text>
<text text-anchor="middle" x="76013.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ect memory access (RDMA) provide extreme</text>
<text text-anchor="middle" x="76013.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ly high performance in storage and netwo</text>
<text text-anchor="middle" x="76013.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rk hardware. However, existing distribut</text>
<text text-anchor="middle" x="76013.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ed file systems strictly isolate file sy</text>
<text text-anchor="middle" x="76013.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">stem and network layers, and the heavy l</text>
<text text-anchor="middle" x="76013.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ayered software designs leave high&#45;speed</text>
<text text-anchor="middle" x="76013.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> hardware under&#45;exploited. In this paper</text>
<text text-anchor="middle" x="76013.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, we propose an RDMA&#45;enabled distributed</text>
<text text-anchor="middle" x="76013.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> persistent memory file system, Octopus,</text>
<text text-anchor="middle" x="76013.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> to redesign file system internal mechan</text>
<text text-anchor="middle" x="76013.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">isms by closely coupling NVM and RDMA fe</text>
<text text-anchor="middle" x="76013.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">atures. For data operations, Octopus dir</text>
<text text-anchor="middle" x="76013.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ectly accesses a shared persistent memor</text>
<text text-anchor="middle" x="76013.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y pool to reduce memory copying overhead</text>
<text text-anchor="middle" x="76013.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, and actively fetches and pushes data a</text>
<text text-anchor="middle" x="76013.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ll in clients to re&#45;balance the load bet</text>
<text text-anchor="middle" x="76013.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ween the server and network. For metadat</text>
<text text-anchor="middle" x="76013.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">a operations, Octopus introduces self&#45;id</text>
<text text-anchor="middle" x="76013.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">entified RPC for immediate notification </text>
<text text-anchor="middle" x="76013.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">between file systems and networking, and</text>
<text text-anchor="middle" x="76013.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> an efficient distributed transaction me</text>
<text text-anchor="middle" x="76013.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">chanism for consistency. Evaluations sho</text>
<text text-anchor="middle" x="76013.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">w that Octopus achieves nearly the raw b</text>
<text text-anchor="middle" x="76013.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">andwidth for large I/Os and orders of ma</text>
<text text-anchor="middle" x="76013.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gnitude better performance than existing</text>
<text text-anchor="middle" x="76013.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> distributed file systems.</text>
</g>
<!-- 67&#45;&gt;Non&#45;volatile memory (NVM) and remote dir
ect memory access (RDMA) provide extreme
ly high performance in storage and netwo
rk hardware. However, existing distribut
ed file systems strictly isolate file sy
stem and network layers, and the heavy l
ayered software designs leave high&#45;speed
 hardware under&#45;exploited. In this paper
, we propose an RDMA&#45;enabled distributed
 persistent memory file system, Octopus,
 to redesign file system internal mechan
isms by closely coupling NVM and RDMA fe
atures. For data operations, Octopus dir
ectly accesses a shared persistent memor
y pool to reduce memory copying overhead
, and actively fetches and pushes data a
ll in clients to re&#45;balance the load bet
ween the server and network. For metadat
a operations, Octopus introduces self&#45;id
entified RPC for immediate notification 
between file systems and networking, and
 an efficient distributed transaction me
chanism for consistency. Evaluations sho
w that Octopus achieves nearly the raw b
andwidth for large I/Os and orders of ma
gnitude better performance than existing
 distributed file systems. -->
<g id="edge272" class="edge">
<title>67&#45;&gt;Non&#45;volatile memory (NVM) and remote dir
ect memory access (RDMA) provide extreme
ly high performance in storage and netwo
rk hardware. However, existing distribut
ed file systems strictly isolate file sy
stem and network layers, and the heavy l
ayered software designs leave high&#45;speed
 hardware under&#45;exploited. In this paper
, we propose an RDMA&#45;enabled distributed
 persistent memory file system, Octopus,
 to redesign file system internal mechan
isms by closely coupling NVM and RDMA fe
atures. For data operations, Octopus dir
ectly accesses a shared persistent memor
y pool to reduce memory copying overhead
, and actively fetches and pushes data a
ll in clients to re&#45;balance the load bet
ween the server and network. For metadat
a operations, Octopus introduces self&#45;id
entified RPC for immediate notification 
between file systems and networking, and
 an efficient distributed transaction me
chanism for consistency. Evaluations sho
w that Octopus achieves nearly the raw b
andwidth for large I/Os and orders of ma
gnitude better performance than existing
 distributed file systems.</title>
<path fill="none" stroke="#000000" d="M75444.0868,-975.6987C75523.1937,-974.1149 75752.0859,-965.7721 75810.022,-922.0672 75873.4616,-874.2108 75917.4411,-802.2453 75947.7825,-729.3141"/>
<polygon fill="#000000" stroke="#000000" points="75951.0648,-730.5341 75951.6012,-719.9529 75944.5833,-727.8901 75951.0648,-730.5341"/>
</g>
<!-- iJournaling: Fine&#45;Grained Journaling for
 Improving the Latency of Fsync System C
all -->
<g id="node268" class="node">
<title>iJournaling: Fine&#45;Grained Journaling for
 Improving the Latency of Fsync System C
all</title>
<ellipse fill="none" stroke="#000000" cx="76407.022" cy="-461.0336" rx="182.1117" ry="35.2113"/>
<text text-anchor="middle" x="76407.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">iJournaling: Fine&#45;Grained Journaling for</text>
<text text-anchor="middle" x="76407.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> Improving the Latency of Fsync System C</text>
<text text-anchor="middle" x="76407.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">all</text>
</g>
<!-- 68&#45;&gt;iJournaling: Fine&#45;Grained Journaling for
 Improving the Latency of Fsync System C
all -->
<g id="edge274" class="edge">
<title>68&#45;&gt;iJournaling: Fine&#45;Grained Journaling for
 Improving the Latency of Fsync System C
all</title>
<path fill="none" stroke="#000000" d="M76597.2408,-958.3386C76569.6901,-886.3106 76465.6398,-614.2832 76424.2024,-505.9498"/>
<polygon fill="#000000" stroke="#000000" points="76427.4671,-504.6879 76420.6254,-496.5982 76420.929,-507.1887 76427.4671,-504.6879"/>
</g>
<!-- Daejun Park and Dongkun Shin, Sungkyunkw
an University, Korea -->
<g id="node269" class="node">
<title>Daejun Park and Dongkun Shin, Sungkyunkw
an University, Korea</title>
<ellipse fill="none" stroke="#000000" cx="76802.022" cy="-461.0336" rx="194.3894" ry="25.4118"/>
<text text-anchor="middle" x="76802.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Daejun Park and Dongkun Shin, Sungkyunkw</text>
<text text-anchor="middle" x="76802.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">an University, Korea</text>
</g>
<!-- 68&#45;&gt;Daejun Park and Dongkun Shin, Sungkyunkw
an University, Korea -->
<g id="edge275" class="edge">
<title>68&#45;&gt;Daejun Park and Dongkun Shin, Sungkyunkw
an University, Korea</title>
<path fill="none" stroke="#000000" d="M76610.8376,-958.3386C76639.4317,-883.9602 76750.0134,-596.3173 76788.6255,-495.8803"/>
<polygon fill="#000000" stroke="#000000" points="76791.9162,-497.0742 76792.2377,-486.4843 76785.3824,-494.5623 76791.9162,-497.0742"/>
</g>
<!-- For data durability, many applications r
ely on synchronous operations such as an
 fsync() system call. However, latency&#45;s
ensitive synchronous operations can be d
elayed under the compound transaction sc
heme of the current journaling technique
. Because a compound transaction include
s irrelevant data and metadata, as well 
as the data and metadata of fsynced file
, the latency of an fsync call can be un
expectedly long. In this paper, we first
 analyze various factors that may delay 
an fsync operation, and propose a novel 
hybrid journaling technique, called ijou
rnaling, which journals only the corresp
onding file&#45;level transaction for an fsy
nc call, while recording a normal journa
l transaction during periodic journaling
. The file&#45;level transaction journal has
 only the related metadata updates of th
e fsynced file. By removing several fact
ors detrimental to fsync latency, the pr
oposed technique can reduce the fsync la
tency, mitigate the interference between
 fsync&#45;intensive threads, and provide hi
gh manycore scalability. Experiments usi
ng a smartphone and a desktop computer s
howed significant improvements in fsync 
latency through the use of ijournaling. -->
<g id="node270" class="node">
<title>For data durability, many applications r
ely on synchronous operations such as an
 fsync() system call. However, latency&#45;s
ensitive synchronous operations can be d
elayed under the compound transaction sc
heme of the current journaling technique
. Because a compound transaction include
s irrelevant data and metadata, as well 
as the data and metadata of fsynced file
, the latency of an fsync call can be un
expectedly long. In this paper, we first
 analyze various factors that may delay 
an fsync operation, and propose a novel 
hybrid journaling technique, called ijou
rnaling, which journals only the corresp
onding file&#45;level transaction for an fsy
nc call, while recording a normal journa
l transaction during periodic journaling
. The file&#45;level transaction journal has
 only the related metadata updates of th
e fsynced file. By removing several fact
ors detrimental to fsync latency, the pr
oposed technique can reduce the fsync la
tency, mitigate the interference between
 fsync&#45;intensive threads, and provide hi
gh manycore scalability. Experiments usi
ng a smartphone and a desktop computer s
howed significant improvements in fsync 
latency through the use of ijournaling.</title>
<ellipse fill="none" stroke="#000000" cx="77194.022" cy="-461.0336" rx="179.6744" ry="292.9846"/>
<text text-anchor="middle" x="77194.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">For data durability, many applications r</text>
<text text-anchor="middle" x="77194.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ely on synchronous operations such as an</text>
<text text-anchor="middle" x="77194.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> fsync() system call. However, latency&#45;s</text>
<text text-anchor="middle" x="77194.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ensitive synchronous operations can be d</text>
<text text-anchor="middle" x="77194.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">elayed under the compound transaction sc</text>
<text text-anchor="middle" x="77194.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000">heme of the current journaling technique</text>
<text text-anchor="middle" x="77194.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. Because a compound transaction include</text>
<text text-anchor="middle" x="77194.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s irrelevant data and metadata, as well </text>
<text text-anchor="middle" x="77194.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">as the data and metadata of fsynced file</text>
<text text-anchor="middle" x="77194.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">, the latency of an fsync call can be un</text>
<text text-anchor="middle" x="77194.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">expectedly long. In this paper, we first</text>
<text text-anchor="middle" x="77194.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> analyze various factors that may delay </text>
<text text-anchor="middle" x="77194.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">an fsync operation, and propose a novel </text>
<text text-anchor="middle" x="77194.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">hybrid journaling technique, called ijou</text>
<text text-anchor="middle" x="77194.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rnaling, which journals only the corresp</text>
<text text-anchor="middle" x="77194.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">onding file&#45;level transaction for an fsy</text>
<text text-anchor="middle" x="77194.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nc call, while recording a normal journa</text>
<text text-anchor="middle" x="77194.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000">l transaction during periodic journaling</text>
<text text-anchor="middle" x="77194.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">. The file&#45;level transaction journal has</text>
<text text-anchor="middle" x="77194.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> only the related metadata updates of th</text>
<text text-anchor="middle" x="77194.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e fsynced file. By removing several fact</text>
<text text-anchor="middle" x="77194.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ors detrimental to fsync latency, the pr</text>
<text text-anchor="middle" x="77194.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000">oposed technique can reduce the fsync la</text>
<text text-anchor="middle" x="77194.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tency, mitigate the interference between</text>
<text text-anchor="middle" x="77194.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> fsync&#45;intensive threads, and provide hi</text>
<text text-anchor="middle" x="77194.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">gh manycore scalability. Experiments usi</text>
<text text-anchor="middle" x="77194.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ng a smartphone and a desktop computer s</text>
<text text-anchor="middle" x="77194.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">howed significant improvements in fsync </text>
<text text-anchor="middle" x="77194.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">latency through the use of ijournaling.</text>
</g>
<!-- 68&#45;&gt;For data durability, many applications r
ely on synchronous operations such as an
 fsync() system call. However, latency&#45;s
ensitive synchronous operations can be d
elayed under the compound transaction sc
heme of the current journaling technique
. Because a compound transaction include
s irrelevant data and metadata, as well 
as the data and metadata of fsynced file
, the latency of an fsync call can be un
expectedly long. In this paper, we first
 analyze various factors that may delay 
an fsync operation, and propose a novel 
hybrid journaling technique, called ijou
rnaling, which journals only the corresp
onding file&#45;level transaction for an fsy
nc call, while recording a normal journa
l transaction during periodic journaling
. The file&#45;level transaction journal has
 only the related metadata updates of th
e fsynced file. By removing several fact
ors detrimental to fsync latency, the pr
oposed technique can reduce the fsync la
tency, mitigate the interference between
 fsync&#45;intensive threads, and provide hi
gh manycore scalability. Experiments usi
ng a smartphone and a desktop computer s
howed significant improvements in fsync 
latency through the use of ijournaling. -->
<g id="edge276" class="edge">
<title>68&#45;&gt;For data durability, many applications r
ely on synchronous operations such as an
 fsync() system call. However, latency&#45;s
ensitive synchronous operations can be d
elayed under the compound transaction sc
heme of the current journaling technique
. Because a compound transaction include
s irrelevant data and metadata, as well 
as the data and metadata of fsynced file
, the latency of an fsync call can be un
expectedly long. In this paper, we first
 analyze various factors that may delay 
an fsync operation, and propose a novel 
hybrid journaling technique, called ijou
rnaling, which journals only the corresp
onding file&#45;level transaction for an fsy
nc call, while recording a normal journa
l transaction during periodic journaling
. The file&#45;level transaction journal has
 only the related metadata updates of th
e fsynced file. By removing several fact
ors detrimental to fsync latency, the pr
oposed technique can reduce the fsync la
tency, mitigate the interference between
 fsync&#45;intensive threads, and provide hi
gh manycore scalability. Experiments usi
ng a smartphone and a desktop computer s
howed significant improvements in fsync 
latency through the use of ijournaling.</title>
<path fill="none" stroke="#000000" d="M76631.0552,-973.9919C76716.263,-967.237 76975.3515,-944.9903 77005.022,-922.0672 77062.2293,-877.8696 77102.2276,-813.398 77130.156,-746.5989"/>
<polygon fill="#000000" stroke="#000000" points="77133.4705,-747.7404 77134.0173,-737.1597 77126.9916,-745.0901 77133.4705,-747.7404"/>
</g>
<!-- Scaling Distributed File Systems in Reso
urce&#45;Harvesting Datacenters -->
<g id="node272" class="node">
<title>Scaling Distributed File Systems in Reso
urce&#45;Harvesting Datacenters</title>
<ellipse fill="none" stroke="#000000" cx="77566.022" cy="-461.0336" rx="173.6578" ry="25.4118"/>
<text text-anchor="middle" x="77566.022" y="-463.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Scaling Distributed File Systems in Reso</text>
<text text-anchor="middle" x="77566.022" y="-449.8336" font-family="Times,serif" font-size="14.00" fill="#000000">urce&#45;Harvesting Datacenters</text>
</g>
<!-- 69&#45;&gt;Scaling Distributed File Systems in Reso
urce&#45;Harvesting Datacenters -->
<g id="edge278" class="edge">
<title>69&#45;&gt;Scaling Distributed File Systems in Reso
urce&#45;Harvesting Datacenters</title>
<path fill="none" stroke="#000000" d="M77744.6539,-958.3386C77717.9641,-884.0353 77614.8243,-596.8976 77578.6483,-496.1849"/>
<polygon fill="#000000" stroke="#000000" points="77581.8384,-494.7123 77575.1639,-486.4843 77575.2505,-497.0787 77581.8384,-494.7123"/>
</g>
<!-- Pulkit A. Misra, Duke University; Íñig
o Goiri, Jason Kace and Ricardo Bianchin
i, Microsoft Research -->
<g id="node273" class="node">
<title>Pulkit A. Misra, Duke University; Íñig
o Goiri, Jason Kace and Ricardo Bianchin
i, Microsoft Research</title>
<ellipse fill="none" stroke="#000000" cx="77936.022" cy="-461.0336" rx="178.3682" ry="35.2113"/>
<text text-anchor="middle" x="77936.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Pulkit A. Misra, Duke University; Íñig</text>
<text text-anchor="middle" x="77936.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">o Goiri, Jason Kace and Ricardo Bianchin</text>
<text text-anchor="middle" x="77936.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">i, Microsoft Research</text>
</g>
<!-- 69&#45;&gt;Pulkit A. Misra, Duke University; Íñig
o Goiri, Jason Kace and Ricardo Bianchin
i, Microsoft Research -->
<g id="edge279" class="edge">
<title>69&#45;&gt;Pulkit A. Misra, Duke University; Íñig
o Goiri, Jason Kace and Ricardo Bianchin
i, Microsoft Research</title>
<path fill="none" stroke="#000000" d="M77757.3901,-958.3386C77783.2366,-886.383 77880.7782,-614.8303 77919.7705,-506.2772"/>
<polygon fill="#000000" stroke="#000000" points="77923.1605,-507.1927 77923.2472,-496.5982 77916.5726,-504.8263 77923.1605,-507.1927"/>
</g>
<!-- Datacenters can use distributed file sys
tems to store data for batch processing 
on the same servers that run latency&#45;cri
tical services. Taking advantage of this
 storage capacity involves minimizing in
terference with the co&#45;located services,
 while implementing user&#45;friendly, effic
ient, and scalable file system access. U
nfortunately, current systems fail one o
r more of these requirements, and must b
e manually partitioned across independen
t subclusters. Thus, in this paper, we i
ntroduce techniques for automatically an
d transparently scaling such file system
s to entire resource&#45;harvesting datacent
ers. We create a layer of software in fr
ont of the existing metadata managers, a
ssign servers to subclusters to minimize
 interference and data movement, and sma
rtly migrate data across subclusters in 
the background. We implement our techniq
ues in HDFS, and evaluate them using sim
ulation of 10 production datacenters and
 a real 4k&#45;server deployment. Our result
s show that our techniques produce high 
file access performance, and high data d
urability and availability, while migrat
ing a limited amount of data. We recentl
y deployed our system onto 30k servers i
n Bing’s datacenters, and discuss less
ons from this deployment. -->
<g id="node274" class="node">
<title>Datacenters can use distributed file sys
tems to store data for batch processing 
on the same servers that run latency&#45;cri
tical services. Taking advantage of this
 storage capacity involves minimizing in
terference with the co&#45;located services,
 while implementing user&#45;friendly, effic
ient, and scalable file system access. U
nfortunately, current systems fail one o
r more of these requirements, and must b
e manually partitioned across independen
t subclusters. Thus, in this paper, we i
ntroduce techniques for automatically an
d transparently scaling such file system
s to entire resource&#45;harvesting datacent
ers. We create a layer of software in fr
ont of the existing metadata managers, a
ssign servers to subclusters to minimize
 interference and data movement, and sma
rtly migrate data across subclusters in 
the background. We implement our techniq
ues in HDFS, and evaluate them using sim
ulation of 10 production datacenters and
 a real 4k&#45;server deployment. Our result
s show that our techniques produce high 
file access performance, and high data d
urability and availability, while migrat
ing a limited amount of data. We recentl
y deployed our system onto 30k servers i
n Bing’s datacenters, and discuss less
ons from this deployment.</title>
<ellipse fill="none" stroke="#000000" cx="78315.022" cy="-461.0336" rx="182.3754" ry="312.5824"/>
<text text-anchor="middle" x="78315.022" y="-666.8336" font-family="Times,serif" font-size="14.00" fill="#000000">Datacenters can use distributed file sys</text>
<text text-anchor="middle" x="78315.022" y="-652.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tems to store data for batch processing </text>
<text text-anchor="middle" x="78315.022" y="-638.8336" font-family="Times,serif" font-size="14.00" fill="#000000">on the same servers that run latency&#45;cri</text>
<text text-anchor="middle" x="78315.022" y="-624.8336" font-family="Times,serif" font-size="14.00" fill="#000000">tical services. Taking advantage of this</text>
<text text-anchor="middle" x="78315.022" y="-610.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> storage capacity involves minimizing in</text>
<text text-anchor="middle" x="78315.022" y="-596.8336" font-family="Times,serif" font-size="14.00" fill="#000000">terference with the co&#45;located services,</text>
<text text-anchor="middle" x="78315.022" y="-582.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> while implementing user&#45;friendly, effic</text>
<text text-anchor="middle" x="78315.022" y="-568.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ient, and scalable file system access. U</text>
<text text-anchor="middle" x="78315.022" y="-554.8336" font-family="Times,serif" font-size="14.00" fill="#000000">nfortunately, current systems fail one o</text>
<text text-anchor="middle" x="78315.022" y="-540.8336" font-family="Times,serif" font-size="14.00" fill="#000000">r more of these requirements, and must b</text>
<text text-anchor="middle" x="78315.022" y="-526.8336" font-family="Times,serif" font-size="14.00" fill="#000000">e manually partitioned across independen</text>
<text text-anchor="middle" x="78315.022" y="-512.8336" font-family="Times,serif" font-size="14.00" fill="#000000">t subclusters. Thus, in this paper, we i</text>
<text text-anchor="middle" x="78315.022" y="-498.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ntroduce techniques for automatically an</text>
<text text-anchor="middle" x="78315.022" y="-484.8336" font-family="Times,serif" font-size="14.00" fill="#000000">d transparently scaling such file system</text>
<text text-anchor="middle" x="78315.022" y="-470.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s to entire resource&#45;harvesting datacent</text>
<text text-anchor="middle" x="78315.022" y="-456.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ers. We create a layer of software in fr</text>
<text text-anchor="middle" x="78315.022" y="-442.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ont of the existing metadata managers, a</text>
<text text-anchor="middle" x="78315.022" y="-428.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ssign servers to subclusters to minimize</text>
<text text-anchor="middle" x="78315.022" y="-414.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> interference and data movement, and sma</text>
<text text-anchor="middle" x="78315.022" y="-400.8336" font-family="Times,serif" font-size="14.00" fill="#000000">rtly migrate data across subclusters in </text>
<text text-anchor="middle" x="78315.022" y="-386.8336" font-family="Times,serif" font-size="14.00" fill="#000000">the background. We implement our techniq</text>
<text text-anchor="middle" x="78315.022" y="-372.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ues in HDFS, and evaluate them using sim</text>
<text text-anchor="middle" x="78315.022" y="-358.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ulation of 10 production datacenters and</text>
<text text-anchor="middle" x="78315.022" y="-344.8336" font-family="Times,serif" font-size="14.00" fill="#000000"> a real 4k&#45;server deployment. Our result</text>
<text text-anchor="middle" x="78315.022" y="-330.8336" font-family="Times,serif" font-size="14.00" fill="#000000">s show that our techniques produce high </text>
<text text-anchor="middle" x="78315.022" y="-316.8336" font-family="Times,serif" font-size="14.00" fill="#000000">file access performance, and high data d</text>
<text text-anchor="middle" x="78315.022" y="-302.8336" font-family="Times,serif" font-size="14.00" fill="#000000">urability and availability, while migrat</text>
<text text-anchor="middle" x="78315.022" y="-288.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ing a limited amount of data. We recentl</text>
<text text-anchor="middle" x="78315.022" y="-274.8336" font-family="Times,serif" font-size="14.00" fill="#000000">y deployed our system onto 30k servers i</text>
<text text-anchor="middle" x="78315.022" y="-260.8336" font-family="Times,serif" font-size="14.00" fill="#000000">n Bing’s datacenters, and discuss less</text>
<text text-anchor="middle" x="78315.022" y="-246.8336" font-family="Times,serif" font-size="14.00" fill="#000000">ons from this deployment.</text>
</g>
<!-- 69&#45;&gt;Datacenters can use distributed file sys
tems to store data for batch processing 
on the same servers that run latency&#45;cri
tical services. Taking advantage of this
 storage capacity involves minimizing in
terference with the co&#45;located services,
 while implementing user&#45;friendly, effic
ient, and scalable file system access. U
nfortunately, current systems fail one o
r more of these requirements, and must b
e manually partitioned across independen
t subclusters. Thus, in this paper, we i
ntroduce techniques for automatically an
d transparently scaling such file system
s to entire resource&#45;harvesting datacent
ers. We create a layer of software in fr
ont of the existing metadata managers, a
ssign servers to subclusters to minimize
 interference and data movement, and sma
rtly migrate data across subclusters in 
the background. We implement our techniq
ues in HDFS, and evaluate them using sim
ulation of 10 production datacenters and
 a real 4k&#45;server deployment. Our result
s show that our techniques produce high 
file access performance, and high data d
urability and availability, while migrat
ing a limited amount of data. We recentl
y deployed our system onto 30k servers i
n Bing’s datacenters, and discuss less
ons from this deployment. -->
<g id="edge280" class="edge">
<title>69&#45;&gt;Datacenters can use distributed file sys
tems to store data for batch processing 
on the same servers that run latency&#45;cri
tical services. Taking advantage of this
 storage capacity involves minimizing in
terference with the co&#45;located services,
 while implementing user&#45;friendly, effic
ient, and scalable file system access. U
nfortunately, current systems fail one o
r more of these requirements, and must b
e manually partitioned across independen
t subclusters. Thus, in this paper, we i
ntroduce techniques for automatically an
d transparently scaling such file system
s to entire resource&#45;harvesting datacent
ers. We create a layer of software in fr
ont of the existing metadata managers, a
ssign servers to subclusters to minimize
 interference and data movement, and sma
rtly migrate data across subclusters in 
the background. We implement our techniq
ues in HDFS, and evaluate them using sim
ulation of 10 production datacenters and
 a real 4k&#45;server deployment. Our result
s show that our techniques produce high 
file access performance, and high data d
urability and availability, while migrat
ing a limited amount of data. We recentl
y deployed our system onto 30k servers i
n Bing’s datacenters, and discuss less
ons from this deployment.</title>
<path fill="none" stroke="#000000" d="M77778.0392,-975.519C77854.2731,-973.4611 78069.0252,-963.9891 78123.022,-922.0672 78176.1131,-880.8485 78214.6565,-822.3178 78242.5943,-760.7394"/>
<polygon fill="#000000" stroke="#000000" points="78245.9555,-761.794 78246.8135,-751.2339 78239.5574,-758.954 78245.9555,-761.794"/>
</g>
</g>
</svg>
